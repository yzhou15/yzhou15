<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SpringMVC07-Ajax</title>
    <url>/2021/03/06/SpringMVC07%20Ajax/</url>
    <content><![CDATA[<p>[转发]</p>
<p>Ajax研究</p>
<blockquote>
<p>简介</p>
</blockquote>
<ul>
<li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p>
</li>
<li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p>
</li>
<li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p>
</li>
<li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p>
</li>
<li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p>
</li>
<li><p>就和国内百度的搜索框一样!</p>
</li>
<li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p>
</li>
<li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p>
</li>
<li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>
</li>
</ul>
<blockquote>
<p>伪造Ajax</p>
</blockquote>
<p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p>
<p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p>
<p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">   &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;kuangshen&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">   window.onload &#x3D; function()&#123;</span><br><span class="line">       var myDate &#x3D; new Date();</span><br><span class="line">       document.getElementById(&#39;currentTime&#39;).innerText &#x3D; myDate.getTime();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">   function LoadPage()&#123;</span><br><span class="line">       var targetUrl &#x3D;  document.getElementById(&#39;url&#39;).value;</span><br><span class="line">       console.log(targetUrl);</span><br><span class="line">       document.getElementById(&quot;iframePosition&quot;).src &#x3D; targetUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;p&gt;请输入要加载的地址：&lt;span id&#x3D;&quot;currentTime&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt;</span><br><span class="line">       &lt;input id&#x3D;&quot;url&quot; type&#x3D;&quot;text&quot; value&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">       &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;提交&quot; onclick&#x3D;&quot;LoadPage()&quot;&gt;</span><br><span class="line">   &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;h3&gt;加载页面位置：&lt;&#x2F;h3&gt;</span><br><span class="line">   &lt;iframe id&#x3D;&quot;iframePosition&quot; style&#x3D;&quot;width: 100%;height: 500px;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>3、使用IDEA开浏览器测试一下！</p>
<p><strong>利用AJAX可以做：</strong></p>
<ul>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误</li>
<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li>
<li>….等等</li>
</ul>
<blockquote>
<p>jQuery.ajax</p>
</blockquote>
<p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p>
<p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p>
<p>jQuery 提供多个与 AJAX 有关的方法。</p>
<p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p>
<p>jQuery 不是生产者，而是大自然搬运工。</p>
<p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（1.9.0之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)</span><br><span class="line">          async：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure>

<p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p>
<p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">      xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">      xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">   &lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;</span><br><span class="line">   &lt;mvc:default-servlet-handler &#x2F;&gt;</span><br><span class="line">   &lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 视图解析器 --&gt;</span><br><span class="line">   &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">         id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">       &lt;!-- 前缀 --&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">       &lt;!-- 后缀 --&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p>2、编写一个AjaxController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class AjaxController &#123;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;&#x2F;a1&quot;)</span><br><span class="line">   public void ajax1(String name , HttpServletResponse response) throws IOException &#123;</span><br><span class="line">       if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(&quot;true&quot;);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">           response.getWriter().print(&quot;false&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>4、编写index.jsp测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;%--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;--%&gt;</span><br><span class="line">   &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       function a1()&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a1&quot;,</span><br><span class="line">               data:&#123;&#39;name&#39;:$(&quot;#txtName&quot;).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txtName&quot; onblur&#x3D;&quot;a1()&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p>
<p><strong>Springmvc实现</strong></p>
<p>实体类user</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   private String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来获取一个集合对象，展示到前端页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;a2&quot;)</span><br><span class="line">public List&lt;User&gt; ajax2()&#123;</span><br><span class="line">   List&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();</span><br><span class="line">   list.add(new User(&quot;秦疆1号&quot;,3,&quot;男&quot;));</span><br><span class="line">   list.add(new User(&quot;秦疆2号&quot;,3,&quot;男&quot;));</span><br><span class="line">   list.add(new User(&quot;秦疆3号&quot;,3,&quot;男&quot;));</span><br><span class="line">   return list; &#x2F;&#x2F;由于@RestController注解，将list转成json格式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;获取数据&quot;&#x2F;&gt;</span><br><span class="line">&lt;table width&#x3D;&quot;80%&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">       &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">       &lt;td&gt;年龄&lt;&#x2F;td&gt;</span><br><span class="line">       &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">   &lt;&#x2F;tr&gt;</span><br><span class="line">   &lt;tbody id&#x3D;&quot;content&quot;&gt;</span><br><span class="line">   &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   $(function () &#123;</span><br><span class="line">       $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">           $.post(&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a2&quot;,function (data) &#123;</span><br><span class="line">               console.log(data)</span><br><span class="line">               var html&#x3D;&quot;&quot;;</span><br><span class="line">               for (var i &#x3D; 0; i &lt;data.length ; i++) &#123;</span><br><span class="line">                   html+&#x3D; &quot;&lt;tr&gt;&quot; +</span><br><span class="line">                       &quot;&lt;td&gt;&quot; + data[i].name + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                       &quot;&lt;td&gt;&quot; + data[i].age + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                       &quot;&lt;td&gt;&quot; + data[i].sex + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                       &quot;&lt;&#x2F;tr&gt;&quot;</span><br><span class="line">              &#125;</span><br><span class="line">               $(&quot;#content&quot;).html(html);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p>
<blockquote>
<p>注册提示效果</p>
</blockquote>
<p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p>
<p>我们写一个Controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;a3&quot;)</span><br><span class="line">public String ajax3(String name,String pwd)&#123;</span><br><span class="line">   String msg &#x3D; &quot;&quot;;</span><br><span class="line">   &#x2F;&#x2F;模拟数据库中存在数据</span><br><span class="line">   if (name!&#x3D;null)&#123;</span><br><span class="line">       if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">           msg &#x3D; &quot;OK&quot;;</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">           msg &#x3D; &quot;用户名输入错误&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   if (pwd!&#x3D;null)&#123;</span><br><span class="line">       if (&quot;123456&quot;.equals(pwd))&#123;</span><br><span class="line">           msg &#x3D; &quot;OK&quot;;</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">           msg &#x3D; &quot;密码输入有误&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   return msg; &#x2F;&#x2F;由于@RestController注解，将msg转成json格式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端页面 login.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ajax&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       function a1()&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,</span><br><span class="line">               data:&#123;&#39;name&#39;:$(&quot;#name&quot;).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   if (data.toString()&#x3D;&#x3D;&#39;OK&#39;)&#123;</span><br><span class="line">                       $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                  &#125;else &#123;</span><br><span class="line">                       $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(&quot;#userInfo&quot;).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">       function a2()&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,</span><br><span class="line">               data:&#123;&#39;pwd&#39;:$(&quot;#pwd&quot;).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   if (data.toString()&#x3D;&#x3D;&#39;OK&#39;)&#123;</span><br><span class="line">                       $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                  &#125;else &#123;</span><br><span class="line">                       $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(&quot;#pwdInfo&quot;).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; onblur&#x3D;&quot;a1()&quot;&#x2F;&gt;</span><br><span class="line">   &lt;span id&#x3D;&quot;userInfo&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  密码:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;pwd&quot; onblur&#x3D;&quot;a2()&quot;&#x2F;&gt;</span><br><span class="line">   &lt;span id&#x3D;&quot;pwdInfo&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>【记得处理json乱码问题】</p>
<p>测试一下效果，动态请求响应，局部刷新，就是如此！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KZibKx8mbpgp9uicB6eJRNyNtU7ek8sJ1kpbFia5e5IoMRtGFwBiaylw7iakYBws0icEAqyH22l6Y7FMzQ/640?wx_fmt=png" alt="图片"></p>
<blockquote>
<p>获取baidu接口Demo</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;JSONP百度搜索&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       #q&#123;</span><br><span class="line">           width: 500px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           display: block;</span><br><span class="line">           margin: 0 auto;</span><br><span class="line">           padding: 0 10px;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul&#123;</span><br><span class="line">           width: 520px;</span><br><span class="line">           list-style: none;</span><br><span class="line">           margin: 0 auto;</span><br><span class="line">           padding: 0;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           margin-top: -1px;</span><br><span class="line">           display: none;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li&#123;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           padding: 0 10px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li:hover&#123;</span><br><span class="line">           background-color: #f60;</span><br><span class="line">           color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 2.步骤二</span><br><span class="line">       &#x2F;&#x2F; 定义demo函数 (分析接口、数据)</span><br><span class="line">       function demo(data)&#123;</span><br><span class="line">           var Ul &#x3D; document.getElementById(&#39;ul&#39;);</span><br><span class="line">           var html &#x3D; &#39;&#39;;</span><br><span class="line">           &#x2F;&#x2F; 如果搜索数据存在 把内容添加进去</span><br><span class="line">           if (data.s.length) &#123;</span><br><span class="line">               &#x2F;&#x2F; 隐藏掉的ul显示出来</span><br><span class="line">               Ul.style.display &#x3D; &#39;block&#39;;</span><br><span class="line">               &#x2F;&#x2F; 搜索到的数据循环追加到li里</span><br><span class="line">               for(var i &#x3D; 0;i&lt;data.s.length;i++)&#123;</span><br><span class="line">                   html +&#x3D; &#39;&lt;li&gt;&#39;+data.s[i]+&#39;&lt;&#x2F;li&gt;&#39;;</span><br><span class="line">              &#125;</span><br><span class="line">               &#x2F;&#x2F; 循环的li写入ul</span><br><span class="line">               Ul.innerHTML &#x3D; html;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 1.步骤一</span><br><span class="line">       window.onload &#x3D; function()&#123;</span><br><span class="line">           &#x2F;&#x2F; 获取输入框和ul</span><br><span class="line">           var Q &#x3D; document.getElementById(&#39;q&#39;);</span><br><span class="line">           var Ul &#x3D; document.getElementById(&#39;ul&#39;);</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F; 事件鼠标抬起时候</span><br><span class="line">           Q.onkeyup &#x3D; function()&#123;</span><br><span class="line">               &#x2F;&#x2F; 如果输入框不等于空</span><br><span class="line">               if (this.value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                   &#x2F;&#x2F; ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span><br><span class="line">                   &#x2F;&#x2F; 创建标签</span><br><span class="line">                   var script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">                   &#x2F;&#x2F;给定要跨域的地址 赋值给src</span><br><span class="line">                   &#x2F;&#x2F;这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span><br><span class="line">                   script.src &#x3D; &#39;https:&#x2F;&#x2F;sp0.baidu.com&#x2F;5a1Fazu8AA54nxGko9WTAnF6hhy&#x2F;su?wd&#x3D;&#39;+this.value+&#39;&amp;cb&#x3D;demo&#39;;</span><br><span class="line">                   &#x2F;&#x2F; 将组合好的带src的script标签追加到body里</span><br><span class="line">                   document.body.appendChild(script);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;q&quot; &#x2F;&gt;</span><br><span class="line">&lt;ul id&#x3D;&quot;ul&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<p>Ajax在我们开发中十分重要，一定要学会使用！</p>
<p>end</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMA Script6</title>
    <url>/2021/06/30/ECMA%20Script6/</url>
    <content><![CDATA[<h3 id="一-let声明变量"><a href="#一-let声明变量" class="headerlink" title="一. let声明变量"></a>一. let声明变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b,c,d;</span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = [];</span><br></pre></td></tr></table></figure>

<ol>
<li>变量不能重复声明</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;罗志祥&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;小猪&#x27;</span>;</span><br><span class="line"><span class="comment">// &quot;star&quot; has already been declared</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>块级作用域</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> girl = <span class="string">&#x27;周扬青&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(girl);</span><br><span class="line"><span class="comment">// referenceError: girl is not defined</span></span><br><span class="line"><span class="comment">// if else while for循环</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>不存在变量提升</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="keyword">var</span> = song = <span class="string">&#x27;恋爱达人&#x27;</span>;</span><br><span class="line"><span class="comment">// Cannot access &#x27;song&#x27; before initialization</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>不影响作用域链</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> school = <span class="string">&#x27;peking&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(school);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// peking</span></span><br></pre></td></tr></table></figure>

<h3 id="二-const声明常量"><a href="#二-const声明常量" class="headerlink" title="二. const声明常量"></a>二. const声明常量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SCHOOL = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(SCHOOL);</span><br></pre></td></tr></table></figure>

<ol>
<li>一定要赋初始值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A;</span><br><span class="line"><span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一般常量使用大写(潜规则)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>常量的值不能修改</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SCHOOL = <span class="string">&#x27;ATGUIGU&#x27;</span>;</span><br><span class="line"><span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>块级作用域</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> PLAYER = <span class="string">&#x27;UZI&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(PLAYER);</span><br><span class="line"><span class="comment">// PLAYER is not defined</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>对于数组和对象的元素修改,不算做对常量的修改,不会报错</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TEAM = [<span class="string">&#x27;UZI&#x27;</span>, <span class="string">&#x27;MXLG&#x27;</span>, <span class="string">&#x27;Letme&#x27;</span>];</span><br><span class="line">TEAM.push(<span class="string">&#x27;Meiko&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="三-变量解构赋值"><a href="#三-变量解构赋值" class="headerlink" title="三. 变量解构赋值"></a>三. 变量解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许按照一定模式从数组和对象中提取值,对变量进行复制</span></span><br><span class="line"><span class="comment">// 这被称为解构赋值</span></span><br><span class="line"><span class="comment">// 1. 数组的解构</span></span><br><span class="line"><span class="keyword">const</span> F4 = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = F4;</span><br><span class="line"><span class="built_in">console</span>.log(xiao);</span><br><span class="line"><span class="built_in">console</span>.log(liu);</span><br><span class="line"><span class="built_in">console</span>.log(zhao);</span><br><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="comment">//小沈阳</span></span><br><span class="line"><span class="comment">//刘能</span></span><br><span class="line"><span class="comment">//赵四</span></span><br><span class="line"><span class="comment">//宋小宝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 对象的解构</span></span><br><span class="line"><span class="keyword">const</span> zhao = &#123;</span><br><span class="line">  name: <span class="string">&#x27;赵本山&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;不详&#x27;</span>,</span><br><span class="line">  xiaopin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以演小品&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, xiaopin&#125; = zhao;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(xiaopin);</span><br><span class="line">xiaopin();</span><br><span class="line"><span class="comment">//赵本山</span></span><br><span class="line"><span class="comment">//不详</span></span><br><span class="line"><span class="comment">//f ()&#123;</span></span><br><span class="line"><span class="comment">// console.log(&quot;我可以演小品&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 我可以演小品</span></span><br></pre></td></tr></table></figure>

<h3 id="四-ES6引入新的声明字符串的方式-‘-‘-“-“"><a href="#四-ES6引入新的声明字符串的方式-‘-‘-“-“" class="headerlink" title="四. ES6引入新的声明字符串的方式 [``]  ‘ ‘  “ “"></a>四. ES6引入新的声明字符串的方式 [``]  ‘ ‘  “ “</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 声明</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我也是一个字符串哦!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">//我也是一个字符串哦! string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 内容中可以直接出现换行符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">						&lt;li&gt;沈腾&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;li&gt;玛丽&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;li&gt;魏翔&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;li&gt;艾伦&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;ul&gt;`</span>;</span><br><span class="line"><span class="comment">// 3. 变量拼接</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是我心目中最搞笑的演员!!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(out);</span><br><span class="line"><span class="comment">// 魏翔是我心目中最搞笑的演员!!</span></span><br></pre></td></tr></table></figure>

<h3 id="五-简化对象写法"><a href="#五-简化对象写法" class="headerlink" title="五. 简化对象写法"></a>五. 简化对象写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许在大括号里面,直接写入变量和函数,作为对象的属性和方法</span></span><br><span class="line"><span class="comment">// 这样的书写更加简洁</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我们可以改变你&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  name, <span class="comment">// name: name,</span></span><br><span class="line">  change,</span><br><span class="line">  improve: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以提高你的技能&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure>

<h3 id="六-箭头函数"><a href="#六-箭头函数" class="headerlink" title="六. 箭头函数"></a>六. 箭头函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6允许使用[箭头] (=&gt;)定义函数</span></span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="comment">// let fn = function()&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">let</span> result = fn(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和之前区别:</span></span><br><span class="line"><span class="comment">// 1. this 是静态的. this 始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getName2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置 window对象的name属性</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">&#x27;乐乐&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  name: <span class="string">&quot;LELE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用</span></span><br><span class="line">getName();</span><br><span class="line">getName2();</span><br><span class="line"><span class="comment">// 乐乐</span></span><br><span class="line"><span class="comment">// 乐乐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call方法调用</span></span><br><span class="line">getName.call(school);</span><br><span class="line">getName2.call(school);</span><br><span class="line"><span class="comment">// LELE</span></span><br><span class="line"><span class="comment">// 乐乐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 不能作为构造实例化对象</span></span><br><span class="line"><span class="keyword">let</span> Person = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;xiao&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 不能使用arguments变量</span></span><br></pre></td></tr></table></figure>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>30 分钟部署一个 Kubernetes 集群（转载自 - 阿良)</title>
    <url>/2021/08/06/30%20%E5%88%86%E9%92%9F%E9%83%A8%E7%BD%B2%E4%B8%80%E4%B8%AA%20Kubernetes%20%E9%9B%86%E7%BE%A4%EF%BC%88%E8%BD%AC%E8%BD%BD%E8%87%AA%20-%20%E9%98%BF%E8%89%AF)/</url>
    <content><![CDATA[<p>kubeadm 是官方社区推出的一个用于快速部署 kubernetes 集群的工具。</p>
<p>这个工具能通过两条指令完成一个 kubernetes 集群的部署：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 创建一个 Master 节点</span><br><span class="line">$ kubeadm init</span><br><span class="line"></span><br><span class="line"># 将一个 Node 节点加入到当前集群中</span><br><span class="line">$ kubeadm join &lt;Master节点的IP和端口 &gt;</span><br></pre></td></tr></table></figure>

<h2 id="1-安装要求"><a href="#1-安装要求" class="headerlink" title="1. 安装要求"></a><strong>1. 安装要求</strong></h2><p>在开始之前，部署 Kubernetes 集群机器需要满足以下几个条件：</p>
<ul>
<li>一台或多台机器，操作系统 CentOS7.x-86_x64</li>
<li>硬件配置：2GB 或更多 RAM，2 个 CPU 或更多 CPU，硬盘 30GB 或更多</li>
<li>集群中所有机器之间网络互通</li>
<li>可以访问外网，需要拉取镜像</li>
<li>禁止 swap 分区</li>
</ul>
<h2 id="2-学习目标"><a href="#2-学习目标" class="headerlink" title="2. 学习目标"></a><strong>2. 学习目标</strong></h2><ol>
<li>在所有节点上安装 Docker 和 kubeadm</li>
<li>部署 Kubernetes Master</li>
<li>部署容器网络插件</li>
<li>部署 Kubernetes Node，将节点加入 Kubernetes 集群中</li>
<li>部署 Dashboard Web 页面，可视化查看 Kubernetes 资源</li>
</ol>
<h2 id="3-准备环境"><a href="#3-准备环境" class="headerlink" title="3. 准备环境"></a><strong>3. 准备环境</strong></h2><p><img src="https://blog-1252881505.cos.ap-beijing.myqcloud.com/k8s/single-master.jpg" alt="https://blog-1252881505.cos.ap-beijing.myqcloud.com/k8s/single-master.jpg"></p>
<p><a href="https://www.notion.so/476a92d26dba47c0aa0f30ee70244221">Untitled</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">关闭防火墙：</span><br><span class="line">$ systemctl stop firewalld</span><br><span class="line">$ systemctl disable firewalld</span><br><span class="line"></span><br><span class="line">关闭selinux：</span><br><span class="line">$ sed -i &#39;s&#x2F;enforcing&#x2F;disabled&#x2F;&#39; &#x2F;etc&#x2F;selinux&#x2F;config  # 永久</span><br><span class="line">$ setenforce 0  # 临时</span><br><span class="line"></span><br><span class="line">关闭swap：</span><br><span class="line">$ swapoff -a  # 临时</span><br><span class="line">$ vim &#x2F;etc&#x2F;fstab  # 永久</span><br><span class="line"></span><br><span class="line">设置主机名：</span><br><span class="line">$ hostnamectl set-hostname &lt;hostname&gt;</span><br><span class="line"></span><br><span class="line">在master添加hosts：</span><br><span class="line">$ cat &gt;&gt; &#x2F;etc&#x2F;hosts &lt;&lt; EOF</span><br><span class="line">192.168.31.61 k8s-master</span><br><span class="line">192.168.31.62 k8s-node1</span><br><span class="line">192.168.31.63 k8s-node2</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">将桥接的IPv4流量传递到iptables的链：</span><br><span class="line">$ cat &gt; &#x2F;etc&#x2F;sysctl.d&#x2F;k8s.conf &lt;&lt; EOF</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables &#x3D; 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables &#x3D; 1</span><br><span class="line">EOF</span><br><span class="line">$ sysctl --system  # 生效</span><br><span class="line"></span><br><span class="line">时间同步：</span><br><span class="line">$ yum install ntpdate -y</span><br><span class="line">$ ntpdate time.windows.com</span><br></pre></td></tr></table></figure>

<h2 id="4-所有节点安装-Docker-kubeadm-kubelet"><a href="#4-所有节点安装-Docker-kubeadm-kubelet" class="headerlink" title="4. 所有节点安装 Docker/kubeadm/kubelet"></a><strong>4. 所有节点安装 Docker/kubeadm/kubelet</strong></h2><p>Kubernetes 默认 CRI（容器运行时）为 Docker，因此先安装 Docker。</p>
<h3 id="4-1-安装-Docker"><a href="#4-1-安装-Docker" class="headerlink" title="4.1 安装 Docker"></a>4.1 安装 Docker</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ wget &lt;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;centos&#x2F;docker-ce.repo&gt; -O &#x2F;etc&#x2F;yum.repos.d&#x2F;docker-ce.repo</span><br><span class="line">$ yum -y install docker-ce-18.06.1.ce-3.el7</span><br><span class="line">$ systemctl enable docker &amp;&amp; systemctl start docker</span><br><span class="line">$ docker --version</span><br><span class="line">Docker version 18.06.1-ce, build e68fc7a</span><br><span class="line"># cat &gt; &#x2F;etc&#x2F;docker&#x2F;daemon.json &lt;&lt; EOF</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;&lt;https:&#x2F;&#x2F;b9pmyelo.mirror.aliyuncs.com&gt;&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="4-2-添加阿里云-YUM-软件源"><a href="#4-2-添加阿里云-YUM-软件源" class="headerlink" title="4.2 添加阿里云 YUM 软件源"></a>4.2 添加阿里云 YUM 软件源</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cat &gt; &#x2F;etc&#x2F;yum.repos.d&#x2F;kubernetes.repo &lt;&lt; EOF</span><br><span class="line">[kubernetes]</span><br><span class="line">name&#x3D;Kubernetes</span><br><span class="line">baseurl&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;repos&#x2F;kubernetes-el7-x86_64</span><br><span class="line">enabled&#x3D;1</span><br><span class="line">gpgcheck&#x3D;0</span><br><span class="line">repo_gpgcheck&#x3D;0</span><br><span class="line">gpgkey&#x3D;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;yum-key.gpg &lt;https:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;kubernetes&#x2F;yum&#x2F;doc&#x2F;rpm-package-key.gpg&gt;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h3 id="4-3-安装-kubeadm，kubelet-和-kubectl"><a href="#4-3-安装-kubeadm，kubelet-和-kubectl" class="headerlink" title="4.3 安装 kubeadm，kubelet 和 kubectl"></a>4.3 安装 kubeadm，kubelet 和 kubectl</h3><p>由于版本更新频繁，这里指定版本号部署：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ yum install -y kubelet-1.17.0 kubeadm-1.17.0 kubectl-1.17.0</span><br><span class="line">$ systemctl enable kubelet</span><br></pre></td></tr></table></figure>

<h2 id="5-部署-Kubernetes-Master"><a href="#5-部署-Kubernetes-Master" class="headerlink" title="5. 部署 Kubernetes Master"></a><strong>5. 部署 Kubernetes Master</strong></h2><p>在 192.168.31.61（Master）执行。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubeadm init \\</span><br><span class="line">  --apiserver-advertise-address&#x3D;192.168.31.61 \\</span><br><span class="line">  --image-repository registry.aliyuncs.com&#x2F;google_containers \\</span><br><span class="line">  --kubernetes-version v1.17.0 \\</span><br><span class="line">  --service-cidr&#x3D;10.96.0.0&#x2F;12 \\</span><br><span class="line">  --pod-network-cidr&#x3D;10.244.0.0&#x2F;16</span><br></pre></td></tr></table></figure>

<p>由于默认拉取镜像地址 <a href="http://k8s.gcr.io/">k8s.gcr.io</a> 国内无法访问，这里指定阿里云镜像仓库地址。</p>
<p>使用 kubectl 工具：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mkdir -p $HOME&#x2F;.kube</span><br><span class="line">sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">$ kubectl get nodes</span><br></pre></td></tr></table></figure>

<h2 id="6-安装-Pod-网络插件（CNI）"><a href="#6-安装-Pod-网络插件（CNI）" class="headerlink" title="6. 安装 Pod 网络插件（CNI）"></a><strong>6. 安装 Pod 网络插件（CNI）</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f &lt;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;coreos&#x2F;flannel&#x2F;master&#x2F;Documentation&#x2F;kube-flannel.yml&gt;</span><br></pre></td></tr></table></figure>

<p>确保能够访问到 <a href="http://quay.io/">quay.io</a> 这个 registery。</p>
<p>如果 Pod 镜像下载失败，可以改成这个镜像地址：lizhenliang/flannel:v0.11.0-amd64</p>
<h2 id="7-加入-Kubernetes-Node"><a href="#7-加入-Kubernetes-Node" class="headerlink" title="7. 加入 Kubernetes Node"></a><strong>7. 加入 Kubernetes Node</strong></h2><p>在 192.168.31.62/63（Node）执行。</p>
<p>向集群添加新节点，执行在 kubeadm init 输出的 kubeadm join 命令：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubeadm join 192.168.31.61:6443 --token esce21.q6hetwm8si29qxwn \\</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:00603a05805807501d7181c3d60b478788408cfe6cedefedb1f97569708be9c5</span><br></pre></td></tr></table></figure>

<h2 id="8-测试-kubernetes-集群"><a href="#8-测试-kubernetes-集群" class="headerlink" title="8. 测试 kubernetes 集群"></a><strong>8. 测试 kubernetes 集群</strong></h2><p>在 Kubernetes 集群中创建一个 pod，验证是否正常运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl create deployment nginx --image&#x3D;nginx</span><br><span class="line">$ kubectl expose deployment nginx --port&#x3D;80 --type&#x3D;NodePort</span><br><span class="line">$ kubectl get pod,svc</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://NodeIP:Port">http://NodeIP:Port</a></p>
<h2 id="9-部署-Dashboard"><a href="#9-部署-Dashboard" class="headerlink" title="9. 部署 Dashboard"></a><strong>9. 部署 Dashboard</strong></h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ kubectl apply -f &lt;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;kubernetes&#x2F;dashboard&#x2F;v2.0.0-beta8&#x2F;aio&#x2F;deploy&#x2F;recommended.yaml&gt;</span><br></pre></td></tr></table></figure>

<p>默认 Dashboard 只能集群内部访问，修改 Service 为 NodePort 类型，暴露到外部：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kind: Service</span><br><span class="line">apiVersion: v1</span><br><span class="line">metadata:</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br><span class="line">  name: kubernetes-dashboard</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">    - port: 443</span><br><span class="line">      targetPort: 8443</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: kubernetes-dashboard</span><br></pre></td></tr></table></figure>

<p>访问地址：<a href="http://nodeip:30001/">http://NodeIP:30001</a></p>
<p>创建 service account 并绑定默认 cluster-admin 管理员集群角色：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kubectl create serviceaccount dashboard-admin -n kube-system</span><br><span class="line">kubectl create clusterrolebinding dashboard-admin --clusterrole&#x3D;cluster-admin --serviceaccount&#x3D;kube-system:dashboard-admin</span><br><span class="line">kubectl describe secrets -n kube-system $(kubectl -n kube-system get secret | awk &#39;&#x2F;dashboard-admin&#x2F;&#123;print $1&#125;&#39;)</span><br></pre></td></tr></table></figure>

<p>使用输出的 token 登录 Dashboard。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>Kubernetes</tag>
      </tags>
  </entry>
  <entry>
    <title>Git+Jenkins+Harbor+Docker实现CICD一些记录</title>
    <url>/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>update: ‘2021/8/22’</p>
<h2 id="一-环境准备"><a href="#一-环境准备" class="headerlink" title="一. 环境准备:"></a>一. 环境准备:</h2><p>ctntos8.4  cpu:4 内存: 2048M 硬盘: 256G</p>
<p>192.168.1.102 Harbor</p>
<p>192.168.1.103 Jenkins</p>
<p>192.168.1.104 Docker</p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822021127881-16296441784221.png" alt="image-20210822021127881"></p>
<h2 id="二-一些问题"><a href="#二-一些问题" class="headerlink" title="二. 一些问题:"></a>二. 一些问题:</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sshd</span></span><br><span class="line">systemctl start sshd</span><br><span class="line">ps -e | grep sshd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改hostname</span></span><br><span class="line">vi /etc/hostname</span><br><span class="line">hostnamectl set-hostname appjzw</span><br><span class="line"></span><br><span class="line"><span class="comment"># ping 不通外网</span></span><br><span class="line">vim /etc/resolv.conf</span><br><span class="line"></span><br><span class="line">nameserver 8.8.8.8</span><br><span class="line">nameserver 202.106.0.20</span><br><span class="line"></span><br><span class="line">nmcli c reload enp0s3</span><br><span class="line"></span><br><span class="line"><span class="comment"># centos8 yum 换源</span></span><br><span class="line"><span class="comment"># 1.备份旧的源</span></span><br><span class="line">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class="line"><span class="comment"># 2.下载对应版本的阿里源（wget -O **下载并以指定的文件名保存**）</span></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">yum makecache <span class="comment"># 3.删除yum旧的缓存，生成新的换源后的缓存</span></span><br><span class="line">cat /etc/yum.repos.d/CentOS-Base.repo <span class="comment"># 4.检查是否换源成功</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="三-部署Harbor镜像仓库"><a href="#三-部署Harbor镜像仓库" class="headerlink" title="三. 部署Harbor镜像仓库"></a>三. 部署Harbor镜像仓库</h2><h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget [https://github.com/goharbor/harbor/releases/download/v2.3.1/harbor-offline-installer-v2.3.1.tgz](https://github.com/goharbor/harbor/releases/download/v2.3.1/harbor-offline-installer-v2.3.1.tgz)</span><br><span class="line">yum install lrzsz</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从服务器拉东西</span></span><br><span class="line">scp root@[公网地址]:/root/harbor-fooline-installer-v2.3.1.tgz /usr/yzhou/Desktop</span><br><span class="line"></span><br><span class="line">systemctl start docker</span><br><span class="line">docker -v</span><br><span class="line">docker —version</span><br><span class="line">docker info</span><br><span class="line"></span><br><span class="line">docker images</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">cp harbor.yml.tmpl harbor.yml</span><br><span class="line">vim harbor.yml</span><br><span class="line"></span><br><span class="line">./install.sh</span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> harbor</span><br><span class="line">docker-compose restart</span><br><span class="line">docker-compose down -v</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure>

<h3 id="2-测试Harbor"><a href="#2-测试Harbor" class="headerlink" title="2. 测试Harbor"></a>2. 测试Harbor</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># name</span></span><br><span class="line"><span class="comment"># http登录 </span></span><br><span class="line"><span class="comment"># port</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210821230929660-16296441784233.png" alt="image-20210821230929660"></p>
<h3 id="3-Dockerfile文件"><a href="#3-Dockerfile文件" class="headerlink" title="3. Dockerfile文件"></a>3. Dockerfile文件</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cd /root/jenkins/docker-file/maven-docker-test_war</span></span><br><span class="line"><span class="comment"># vim Dockerfile</span></span><br><span class="line"><span class="comment"># Version 1.0</span></span><br><span class="line"><span class="comment"># Base images.</span></span><br><span class="line"><span class="string">FROM</span> <span class="string">tomcat:8.0.36-alpine</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Author.</span></span><br><span class="line"><span class="string">MAINTAINER</span> <span class="string">yzhou&lt;403708416@qq.com&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Add war.</span></span><br><span class="line"><span class="string">ADD</span> <span class="string">maven-docker.war</span> <span class="string">/usr/local/tomcat/webapps/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define working directory.</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">PATH</span> <span class="string">/usr/local/tomcat/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define environment variavles.</span></span><br><span class="line"><span class="string">ENV</span> <span class="string">PATH</span> <span class="string">/usr/loacl/tomcat/bin:$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Define default command.</span></span><br><span class="line"><span class="string">CMD</span> &#123;<span class="string">&quot;catalina.sh&quot;</span>, <span class="string">&quot;run&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Expose ports.</span></span><br><span class="line"><span class="string">EXPOSE</span> <span class="number">8080</span></span><br></pre></td></tr></table></figure>

<h3 id="4-Harbor权限相关"><a href="#4-Harbor权限相关" class="headerlink" title="4. Harbor权限相关"></a>4. Harbor权限相关</h3><p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210821230456126-16296441784232.png" alt="image-20210821230456126"></p>
<h2 id="四-业务服务器"><a href="#四-业务服务器" class="headerlink" title="四. 业务服务器"></a>四. 业务服务器</h2><h3 id="1-安装软件"><a href="#1-安装软件" class="headerlink" title="1.安装软件"></a>1.安装软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils  device-mapper-persistent-data lvm2</span><br><span class="line">docker -v</span><br><span class="line">yum-config-manager  --add-repo   [https://download.docker.com/linux/centos/docker-ce.repo](https://download.docker.com/linux/centos/docker-ce.repo)</span><br><span class="line">yum install docker-ce docker-ce-cli [containerd.io](http://containerd.io/) --nobest</span><br><span class="line">yum install container-selinux</span><br><span class="line">systemctl start docker</span><br><span class="line">yum install jq -y</span><br></pre></td></tr></table></figure>

<h3 id="2-预先配置"><a href="#2-预先配置" class="headerlink" title="2.预先配置"></a>2.预先配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在业务服务器上配置:(否则没有权限报错)</span></span><br><span class="line">[SSH] executing...</span><br><span class="line">sudo: sorry, you must have a tty to run sudo</span><br><span class="line">docker: invalid reference format.</span><br><span class="line"><span class="comment"># visudo</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Defaults requiretty</span></span><br><span class="line">Defaults:root !requiretty</span><br></pre></td></tr></table></figure>



<h2 id="五-jenkins"><a href="#五-jenkins" class="headerlink" title="五. jenkins"></a>五. jenkins</h2><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1. 问题:"></a>1. 问题:</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 登录harbor遇到问题</span></span><br><span class="line">docker login -u admin -p Harbor12345 reg.mydomain.com</span><br><span class="line">Error response from daemon: Get https://reg.mydomain.com/v2/: unauthorized: authentication required</span><br><span class="line"><span class="comment"># vim /etc/docker/daemon.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;registry-mirrors&quot;</span>: [<span class="string">&quot;http://hub-mirror.c.163.com&quot;</span>],</span><br><span class="line">  <span class="string">&quot;insecure-registries&quot;</span>:[<span class="string">&quot;192.168.1.102:8080&quot;</span>] </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># sudo systemctl restart docker</span></span><br></pre></td></tr></table></figure>

<h3 id="2-安装软件"><a href="#2-安装软件" class="headerlink" title="2. 安装软件"></a>2. 安装软件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo wget -O /etc/yum.repos.d/jenkins.repo \</span><br><span class="line">    https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line">sudo rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line">sudo yum upgrade</span><br><span class="line">sudo yum install jenkins java-1.8.0-openjdk-devel</span><br><span class="line">sudo systemctl daemon-reload</span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@jenkins ~]<span class="comment"># wget -o /etc/yum.repos.d/jenkins.repo [https://pkg.jenkins.io/redhat-stable/jenkins.repo](https://pkg.jenkins.io/redhat-stable/jenkins.repo)</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># rpm --import [https://pkg.jenkins.io/redhat-stable/jenkins.io.key](https://pkg.jenkins.io/redhat-stable/jenkins.io.key)</span></span><br><span class="line">yum install -y jenkins git maven</span><br><span class="line">systemctl start jenkins</span><br><span class="line">[root@jenkins yum.repos.d]<span class="comment"># lsof -i:8080</span></span><br><span class="line">COMMAND    PID    USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">java    277770 jenkins   26u  IPv6 754801      0t0  TCP *:webcache (LISTEN)</span><br><span class="line">ps -ef | grep jenkins</span><br></pre></td></tr></table></figure>

<p>在CentOS 8 上安装Jenkins需要使用<a href="https://links.jianshu.com/go?to=https://linux265.com/news/3782.html">root账号</a>或具有<a href="https://links.jianshu.com/go?to=https://linux265.com/news/3782.html">sudo权限</a>的账号。</p>
<p><strong>第一步、</strong>因为Jenkins是使用Java编写的，所以需要安装Java环境，Jenkins需要Java8或更高版本</p>
<p>这里使用OpenJDK，首先通过一下命令安装OpenJDK.</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">sudo dnf install java-<span class="number">1.8</span>.<span class="number">0</span>-openjdk-devel</span><br></pre></td></tr></table></figure>

<p>如果系统上安装了多个Java版本，请确保Java 8是默认Java版本。</p>
<p>你可能对关于更详细<a href="https://links.jianshu.com/go?to=https://linux265.com/news/3788.html">如何在CentOS上安装Java教程</a>也感兴趣。</p>
<p><strong>第二步、</strong>启用Jenkins存储库。运行以下命令下载并导入GPG密钥：</p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line">sudo wget <span class="operator">-</span><span class="type">O</span> <span class="operator">/</span>etc<span class="operator">/</span>yum.repos.d<span class="operator">/</span>jenkins.repo http:<span class="comment">//pkg.jenkins-ci.org/redhat-stable/jenkins.repo</span></span><br><span class="line">sudo rpm <span class="operator">--</span><span class="keyword">import</span> https:<span class="comment">//jenkins-ci.org/redhat/jenkins-ci.org.key</span></span><br></pre></td></tr></table></figure>

<p>第三步、通过键入以下命令安装最新的Jenkins稳定版本：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sudo dnf install jenkins</span><br></pre></td></tr></table></figure>

<p>安装过程完成后，启动Jenkins服务并启用它以在系统引导时启动：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo systemctl start jenkins</span><br><span class="line">sudo systemctl <span class="built_in">enable</span> jenkins</span><br></pre></td></tr></table></figure>

<p>检查Jenkins是否正在运行，请输入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl status jenkins</span><br></pre></td></tr></table></figure>

<p>输出应类似如下所示：</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">Loaded: loaded (<span class="regexp">/etc/</span>rc.d/init.d/jenkins; generated)</span><br><span class="line">Active: active (running) since Thu <span class="number">2019</span>-<span class="number">11</span>-<span class="number">05</span> <span class="number">21</span>:<span class="number">31</span>:<span class="number">36</span> UTC; 3s ago</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="2-1-配置防火墙"><a href="#2-1-配置防火墙" class="headerlink" title="2.1. 配置防火墙"></a>2.1. 配置防火墙</h4><p>如果要在受防火墙保护的远程CentOS服务器上安装Jenkins，则需要开放<code>8080</code>端口。</p>
<p>使用以下命令打开必要的端口：</p>
<figure class="highlight csharp"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --permanent --zone=<span class="keyword">public</span> --<span class="keyword">add</span>-port=<span class="number">8080</span>/tcp</span><br><span class="line">sudo firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h4 id="2-2-设置Jenkins"><a href="#2-2-设置Jenkins" class="headerlink" title="2.2. 设置Jenkins"></a>2.2. 设置Jenkins</h4><p>安装完成并在防火墙上放开8080端口口，就可以开始Jenkins设置过程。首先，请打开浏览器并键入域或服务器的IP地址，然后键入port <code>8080</code>：</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//your_ip_or_domain:8080</span></span><br></pre></td></tr></table></figure>

<h3 id="3-预先配置"><a href="#3-预先配置" class="headerlink" title="3.预先配置"></a>3.预先配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">由于在Jenkins机器上docker是使用root用户运行的，而Jenkins是使用普通用户jenkins运行的，所以要先配置下jenkins用户可以使用docker命令。</span><br><span class="line">[root@jenkins ~]<span class="comment"># visudo</span></span><br><span class="line">jenkins ALL=(root)      NOPASSWD: /usr/bin/docker</span><br><span class="line"></span><br><span class="line">另外在Jenkins机器上配置：</span><br><span class="line"></span><br><span class="line"><span class="comment"># Disable &quot;ssh hostname sudo &lt;cmd&gt;&quot;, because it will show the password in clear.</span></span><br><span class="line"><span class="comment">#         You have to run &quot;ssh -t hostname sudo &lt;cmd&gt;&quot;.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#Defaults    requiretty</span></span><br><span class="line">Defaults:jenkins !requiretty</span><br><span class="line"></span><br><span class="line">如果不配置这个，在执行下面脚本时，会报错误：</span><br><span class="line">+ cp -f /home/jenkins/.jenkins/workspace/godseyeBranchForNov/godseye-container/target/godseye-container-wisedu.war /home/jenkins/docker-file/godseye_war/godseye.war</span><br><span class="line">+ sudo docker login -u jkzhao -p Wisedu123 -e 01115004@wisedu.com 172.16.206.32</span><br><span class="line">sudo: sorry, you must have a tty to run sudo</span><br></pre></td></tr></table></figure>



<ol>
<li><p>安装git遇到问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装gcc环境</span></span><br><span class="line"><span class="comment"># yum源没有对应版本包匹配</span></span><br><span class="line"></span><br><span class="line">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-8.repo</span><br><span class="line">sed -i  <span class="string">&#x27;s/$releasever/8/g&#x27;</span> /etc/yum.repos.d/CentOS-Base.repo</span><br><span class="line">yum repolist</span><br></pre></td></tr></table></figure>



<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822003946053-16296441784234.png" alt="image-20210822003946053"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822004504559-16296441784235.png" alt="image-20210822004504559"></p>
<p>jenkins配置:</p>
</li>
</ol>
<ul>
<li><p>安装插件: maven intergation 和 ssh agent</p>
</li>
<li><p>配置远程机器</p>
<ul>
<li><p>添加凭据</p>
<ul>
<li></li>
<li><p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822012927566-16296441784236.png" alt="image-20210822012927566"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822013010640-16296441784237.png" alt="image-20210822013010640"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822013323484-16296441784238.png" alt="image-20210822013323484"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822145637999-16296441784239.png" alt="image-20210822145637999"></p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="六-jenkins构建job"><a href="#六-jenkins构建job" class="headerlink" title="六. jenkins构建job"></a>六. jenkins构建job</h2><h3 id="1-构建maven风格的job"><a href="#1-构建maven风格的job" class="headerlink" title="1. 构建maven风格的job"></a>1. 构建maven风格的job</h3><h4 id="1-代码地址"><a href="#1-代码地址" class="headerlink" title="1. 代码地址:"></a>1. 代码地址:</h4><p>​    <a href="https://github.com/yzhou15/maven-docker">https://github.com/yzhou15/maven-docker</a></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822151048548-162964417842310.png" alt="image-20210822151048548"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822151119595-162964417842311.png" alt="image-20210822151119595"></p>
<ul>
<li>Goals and options填写：clean package -Dmaven.test.skip=true</li>
</ul>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822151142800-162964417842312.png" alt="image-20210822151142800"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822151306263-162964417842313.png" alt="image-20210822151306263"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822154617973-162964417842314.png" alt="image-20210822154617973"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822155601445-162964417842315.png" alt="image-20210822155601445"></p>
<h4 id="2-Post-steps"><a href="#2-Post-steps" class="headerlink" title="2. Post steps"></a>2. Post steps</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jenkins机器: 编译完成后,build生成一个新版本的镜像,push到远程docker仓库</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Variables</span></span><br><span class="line">JENKINS_WAR_HOME=<span class="string">&#x27;/var/lib/jenkins/workspace/maven-docker/target&#x27;</span></span><br><span class="line">DOCKERFILE_HOME=<span class="string">&#x27;/var/lib/jenkins/docker-file/maven-docker-test_war&#x27;</span></span><br><span class="line">HARBOR_IP=<span class="string">&#x27;192.168.1.102&#x27;</span></span><br><span class="line">REPOSTITORIES=<span class="string">&#x27;jenkins/maven-docker&#x27;</span></span><br><span class="line">HARBOR_USER=<span class="string">&#x27;yzhou&#x27;</span></span><br><span class="line">HARBOR_USER_PASSWS=<span class="string">&#x27;Harbor12345&#x27;</span></span><br><span class="line">HARBOR_USER_EMAIL=<span class="string">&#x27;403708416@qq.com&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Copy the nevest war to docker-file directory.</span></span><br><span class="line">\cp -f <span class="variable">$&#123;JENKINS_WAR_HOME&#125;</span>/easy-springmvc-maven.war</span><br><span class="line"><span class="variable">$&#123;DOCKERFILE_HOME&#125;</span>/maven-docker.war</span><br><span class="line"></span><br><span class="line"><span class="comment"># Delete image early version</span></span><br><span class="line">sudo docker login -u <span class="variable">$&#123;HARBOR_USER&#125;</span> -p <span class="variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="variable">$&#123;HARBOR_IP&#125;</span>:8080</span><br><span class="line">IMAGE_ID=<span class="string">&#x27;sudo docker images | grep $&#123;REPOSITORIES&#125; | awk &#x27;</span>&#123;<span class="built_in">print</span><span class="variable">$3</span>&#125;<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;&#123;IMAGE_ID&#125;&quot;</span>];<span class="keyword">then</span></span><br><span class="line">	sudo docker rmi <span class="variable">$&#123;IMAGE_ID&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Build image.</span></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$&#123;DOCKERFILE_HOME&#125;</span></span><br><span class="line">TAG=`date +%Y%m%d-%H%M%S`</span><br><span class="line">sudo docker build -t <span class="variable">$&#123;HARBOR_IP&#125;</span>:8080/<span class="variable">$&#123;REPOSITORIES&#125;</span>:<span class="variable">$&#123;TAG&#125;</span> . &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># Push to the harbor registry.</span></span><br><span class="line">sudo docker push <span class="variable">$&#123;HARBOR_IP&#125;</span>:8080/<span class="variable">$&#123;REPOSITORIES&#125;</span>:<span class="variable">$&#123;TAG&#125;</span> &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure>

<h4 id="3-拉取镜像-发布"><a href="#3-拉取镜像-发布" class="headerlink" title="3. 拉取镜像,发布"></a>3. 拉取镜像,发布</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 拉取镜像.发布.</span></span><br><span class="line">HARBOR_IP=<span class="string">&#x27;192.168.1.102&#x27;</span></span><br><span class="line">REPOSITORIES=<span class="string">&#x27;jenkins/maven-docker&#x27;</span></span><br><span class="line">HARBOR_USERS=<span class="string">&#x27;yzhou&#x27;</span></span><br><span class="line">HARBOR_USER_PASSWD=<span class="string">&#x27;Harbor2345&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录harbor</span></span><br><span class="line">docker login -u <span class="variable">$&#123;HARBOR_USER&#125;</span> -p <span class="variable">$&#123;HARBOR_USER_PASSWD&#125;</span> <span class="variable">$&#123;HARBOR_IP&#125;</span>:8080</span><br><span class="line"></span><br><span class="line">Stop container, and delete the container.</span><br><span class="line">CONTAINER_ID=`docker ps | grep <span class="string">&quot;maven-docker&quot;</span> | awk <span class="string">&#x27;&#123;print$1&#125;&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$CONTAINER_ID</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">	docker stop <span class="variable">$CONTAINER_ID</span></span><br><span class="line">	docker rm <span class="variable">$CONTAINER_ID</span></span><br><span class="line"><span class="keyword">else</span> <span class="comment"># 如果容器启动失败,就需要docker ps -a才能找到哪个容器</span></span><br><span class="line">	CONTAINER_ID=`docker ps -a | grep <span class="string">&quot;maven-docker&quot;</span> | awk <span class="string">&#x27;print$1&#x27;</span>`</span><br><span class="line">		<span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$CONTAINER_ID</span>&quot;</span>]; <span class="keyword">then</span> <span class="comment"># 如果是第一次在这台及其上拉取运行容器,那么docker ps -a也是找不到这个容器的</span></span><br><span class="line">			docker rm <span class="variable">$CONTAINER_ID</span></span><br><span class="line">		<span class="keyword">fi</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Deleteeasy-springmvc-maven image early version.</span></span><br><span class="line">IMAGE_ID=`sudo docker images | grep <span class="variable">$&#123;REPOSITORIES&#125;</span> | awk <span class="string">&#x27;print $3&#x27;</span>`</span><br><span class="line"><span class="keyword">if</span> [ -n <span class="string">&quot;<span class="variable">$&#123;IMAGE_ID&#125;</span>&quot;</span>];<span class="keyword">then</span></span><br><span class="line">	docker rmi <span class="variable">$&#123;IMAGE_ID&#125;</span></span><br><span class="line"><span class="keyword">fi</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pull images.</span></span><br><span class="line"><span class="comment"># TAG=`curl -s </span></span><br><span class="line">http://<span class="variable">$&#123;HARBOR_IP&#125;</span>/api/repositories/<span class="variable">$&#123;REPOSITORIES&#125;</span>/tags | jq <span class="string">&#x27;.[-1]&#x27;</span> </span><br><span class="line">| sed <span class="string">&#x27;s/\&quot;//g&#x27;</span>`</span><br><span class="line">TAG=`curl http://192.168.1.102/api/repoditories/jenkins/maven-docker/tags | jq <span class="string">&#x27;.[-1]&#x27;</span> | &#123;name:.name&#125; | awk -F <span class="string">&#x27;&quot;&#x27;</span> <span class="string">&#x27;/name/&#123;print $4&#125;&#x27;</span>`</span><br><span class="line">docker pull <span class="variable">$&#123;HARBOR_IP&#125;</span>:8080/<span class="variable">$&#123;REPOSITORIES&#125;</span>:<span class="variable">$&#123;TAG&#125;</span> &amp;&gt;/dev/null&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># Run.</span></span><br><span class="line">docker run -d --name maven-docker -p 8080:8080</span><br><span class="line"><span class="variable">$&#123;HARBOR_ip&#125;</span>:8080/<span class="variable">$&#123;REPOSITORIES&#125;</span>:<span class="variable">$&#123;TAG&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-项目构建"><a href="#4-项目构建" class="headerlink" title="4. 项目构建"></a>4. 项目构建</h4><p>![Untitled 2](Git+Jenkins+Harbor+Docker实现CICD一些记录/Untitled 2-162964417842316.png)</p>
<h4 id="5-遇到问题"><a href="#5-遇到问题" class="headerlink" title="5. 遇到问题:"></a>5. 遇到问题:</h4><p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822230454622.png" alt="image-20210822230454622"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 查看maven版本</span></span><br><span class="line">sudo dnf install maven</span><br><span class="line">mvn -version</span><br><span class="line"><span class="comment"># 更新maven版本,Maven 3.3+需要安装JDK 1.7 或者更高版本的 JDK。</span></span><br><span class="line">sudo dnf install java-11-openjdk-devel</span><br><span class="line">java -version</span><br><span class="line"><span class="comment"># 下载 Apache Maven http://maven.apache.org/download.cgi</span></span><br><span class="line">wget https://ftp.jaist.ac.jp/pub/apache/maven/maven-3/3.8.1/binaries/apache-maven-3.8.1-bin.tar.gz -P /tmp</span><br><span class="line">sudo tar xf /tmp/apache-maven-3.8.1-bin.tar.gz -C /opt</span><br><span class="line">sudo ln -s /opt/apache-maven-3.8.1 /opt/maven</span><br><span class="line"><span class="comment"># 设置环境变量</span></span><br><span class="line"><span class="comment"># vim /etc/profile.d/maven.sh</span></span><br><span class="line"><span class="built_in">export</span> JAVA_HOME=/usr/lib/jvm/jre-openjdk</span><br><span class="line"><span class="built_in">export</span> M2_HOME=/opt/maven</span><br><span class="line"><span class="built_in">export</span> MAVEN_HOME=/opt/maven</span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$&#123;M2_HOME&#125;</span>/bin:<span class="variable">$&#123;PATH&#125;</span></span><br><span class="line"></span><br><span class="line">sudo chmod +x /etc/profile.d/maven.sh</span><br><span class="line"><span class="built_in">source</span> /etc/profile.d/maven.sh</span><br><span class="line"><span class="comment"># 验证安装</span></span><br><span class="line">[root@jenkins ~]<span class="comment"># mvn -version</span></span><br><span class="line">Apache Maven 3.8.1 (05c21c65bdfed0f71a2f2ada8b84da59348c4c5d)</span><br><span class="line">Maven home: /opt/maven</span><br><span class="line">Java version: 1.8.0_302, vendor: Red Hat, Inc., runtime: /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.302.b08-0.el8_4.x86_64/jre</span><br><span class="line">Default locale: en_US, platform encoding: UTF-8</span><br><span class="line">OS name: <span class="string">&quot;linux&quot;</span>, version: <span class="string">&quot;4.18.0-305.10.2.el8_4.x86_64&quot;</span>, arch: <span class="string">&quot;amd64&quot;</span>, family: <span class="string">&quot;unix&quot;</span></span><br></pre></td></tr></table></figure>

<h4 id="6-控制台输出过程"><a href="#6-控制台输出过程" class="headerlink" title="6. 控制台输出过程"></a>6. 控制台输出过程</h4><p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822230419964.png" alt="image-20210822230419964"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 修改git分支为默认</span></span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822164823295-162964417842320.png" alt="image-20210822164823295"></p>
<p><img src="/2021/08/08/Git+Jenkins+Harbor+Docker%E5%AE%9E%E7%8E%B0CICD%E4%B8%80%E4%BA%9B%E8%AE%B0%E5%BD%95/image-20210822230534472.png" alt="image-20210822230534472"></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jenkins找不到,新增maven</span></span><br><span class="line">mvn -v</span><br><span class="line"><span class="comment"># 配置全路径,清理工作空间</span></span><br><span class="line"><span class="variable">$workspace</span>/pom.xml</span><br></pre></td></tr></table></figure>























<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生命周期</title>
    <url>/2021/04/20/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>生命周期：事物从诞生到消亡的整个过程</p>
<p>debug开发的版本</p>
<p>build:release稳定的版本</p>
<p>Vue生命周期：（钩子函数）</p>
<p>new Vue会执行一系列操作，通过钩子回调函数call hook</p>
<p>created：可以做网络请求</p>
<p>mounted</p>
<p>vbom更新</p>
<p>destroyed</p>
<p><img src="/2021/04/20/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1619080274893.webp"></p>
<p><img src="/2021/04/20/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1-1619074903376-1619080278796.webp"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021/04/20/docker/</url>
    <content><![CDATA[<p>什么是 Docker</p>
<p>◆使用最广泛的开源容器引擎</p>
<p>◆一种操作系统级的虚拟化技术</p>
<p>◆依赖于 Linux内核特性：Namespace和 Groups个简单的应用程序打包工具</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">root@localhost -] docker run -i -t centos/bin/bash</span><br><span class="line">Unable to find image centos: latest locally</span><br><span class="line">Latest: Pulling <span class="keyword">from</span> Library/centos</span><br><span class="line">256b176beaff: Pull complete</span><br><span class="line">Digest: sha256: 5d9lc5535c41fd1bb48d4058la2c8b 53d38fc2eb26df774556b 53c 5a0bd4d44e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos: latest</span><br></pre></td></tr></table></figure>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>dnpicture</title>
    <url>/2021/04/30/dnpicture/</url>
    <content><![CDATA[<h1 id="1-uni-app学习"><a href="#1-uni-app学习" class="headerlink" title="1 uni-app学习"></a>1 uni-app学习</h1><h2 id="1-1-什么是uni-app"><a href="#1-1-什么是uni-app" class="headerlink" title="1.1 什么是uni-app"></a>1.1 什么是uni-app</h2><blockquote>
<p>uni-app是一个使用Vue.js语法来开发所有前端应用的框架（也称之为全端开发框架）<br> 技术栈：JavaScript，vue， 微信小程序， uni-app</p>
</blockquote>
<h2 id="1-2-有哪些uni-app的作品"><a href="#1-2-有哪些uni-app的作品" class="headerlink" title="1.2 有哪些uni-app的作品"></a>1.2 有哪些uni-app的作品</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-2fc52ebbd53a339d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/736/format/webp" alt="img"></p>
<p>线上项目.png</p>
<h2 id="1-3-uni-app的社区规模"><a href="#1-3-uni-app的社区规模" class="headerlink" title="1.3. uni-app的社区规模"></a>1.3. uni-app的社区规模</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-7180ee5e356118f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/322/format/webp" alt="img"></p>
<p>社区规模.png</p>
<h1 id="2-uni-app基础"><a href="#2-uni-app基础" class="headerlink" title="2 uni-app基础"></a>2 uni-app基础</h1><h2 id="2-1-如何创建项目"><a href="#2-1-如何创建项目" class="headerlink" title="2.1 如何创建项目"></a>2.1 如何创建项目</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">脚手架搭建项目</span><br><span class="line"><span class="number">1</span>.全局安装  </span><br><span class="line">    npm install -g <span class="keyword">@vue</span>/cli  </span><br><span class="line"><span class="number">2</span>.创建项目      </span><br><span class="line">    vue create -p dcloudio/uni-preset-vue my-project     </span><br><span class="line"><span class="number">3</span>.启动项目（微信小程序）   </span><br><span class="line">    npm run <span class="attribute">dev</span>:mp-weixin    </span><br><span class="line"><span class="number">4</span>.微信小程序开发者工具导入项目         </span><br></pre></td></tr></table></figure>

<p>（搭建过程中可能会遇到的问题）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-9da64783adf69fea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/839/format/webp" alt="img"></p>
<p>脚手架搭建版本不一致.png</p>
<h2 id="2-2-如何编写代码"><a href="#2-2-如何编写代码" class="headerlink" title="2.2 如何编写代码"></a>2.2 如何编写代码</h2><h2 id="2-3-uni-app初体验"><a href="#2-3-uni-app初体验" class="headerlink" title="2.3 uni-app初体验"></a>2.3 uni-app初体验</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-4af44e5f0de56ddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>初始界面.png</p>
<h2 id="2-4-项目结构介绍"><a href="#2-4-项目结构介绍" class="headerlink" title="2.4 项目结构介绍"></a>2.4 项目结构介绍</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-ed390f395e18208a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/747/format/webp" alt="img"></p>
<p>项目目录.png</p>
<h2 id="2-5-样式和sass"><a href="#2-5-样式和sass" class="headerlink" title="2.5 样式和sass"></a>2.5 样式和sass</h2><ul>
<li>支持小程序的rpx 和 h5的vw，vh。<br> <code>rpx 小程序中的单位 750rpx = 屏幕宽度 vw h5单位 100vw = 屏幕的宽度， 100vh = 屏幕的高度</code></li>
<li>内置sass的配置， 只需要安装对应的依赖即可  <code>npm install sass-loader node-sass</code></li>
<li>vue组件中，在style标签上加入属性<code>&lt;style lang= &#39;scss&#39;&gt;</code>即可</li>
</ul>
<h2 id="2-6-基本语法"><a href="#2-6-基本语法" class="headerlink" title="2.6 基本语法"></a>2.6 基本语法</h2><p>学过vue的同学应该很容易上手,大胆去尝试吧</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;dataObj.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;dataObj.age&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;dataObj.boolean&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;item in filterList&quot;</span> <span class="attr">:key</span>= <span class="string">&#x27;item.id&#x27;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                dataObj: &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;Davidsofter&#x27;</span>,</span></span><br><span class="line">                    age: 23,</span><br><span class="line"><span class="javascript">                    boolean: <span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                fruitList: [&#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;🍎&#x27;</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;🍌&#x27;</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;🍇&#x27;</span>&#125;]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">filterList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.fruitList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.id&lt;=<span class="number">0</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19729056-42f5f95a4bceb39f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/403/format/webp" alt="img"></p>
<p>基本语法显示.png</p>
<h2 id="2-7-事件"><a href="#2-7-事件" class="headerlink" title="2.7 事件"></a>2.7 事件</h2><p>添加点击事件，自定义参数和传参</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-item</span>=<span class="string">&quot;123&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btclick(1,$event)&quot;</span>&gt;</span>点击我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">btclick</span>(<span class="params">data,event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;我不想努力了😘&quot;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看打印出的结果：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-3c0d4e0b2ed9808c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/406/format/webp" alt="img"></p>
<p>点击事件.png</p>
<h2 id="2-8-组件"><a href="#2-8-组件" class="headerlink" title="2.8 组件"></a>2.8 组件</h2><h3 id="1-组件的定义-引入-注册-使用"><a href="#1-组件的定义-引入-注册-使用" class="headerlink" title="1 组件的定义/引入/注册/使用"></a>1 组件的定义/引入/注册/使用</h3><blockquote>
<p>重点章节，组件化思想是前端必备思想之一，灵活的使用组件可以提高网页开发效率，提高代码复用率，降低块与块之间的耦合性。</p>
</blockquote>
<h4 id="1-1-组件的定义"><a href="#1-1-组件的定义" class="headerlink" title="1.1 组件的定义"></a>1.1 组件的定义</h4><ul>
<li>在src目录下新建文件夹components用来存放组件</li>
<li>在components目录下直接新建vue文件</li>
</ul>
<h4 id="1-2-组件的引入"><a href="#1-2-组件的引入" class="headerlink" title="1.2 组件的引入"></a>1.2 组件的引入</h4><ul>
<li>在页面中引入组件 “import 组件名 from ‘组件路径’”</li>
</ul>
<h4 id="1-3-组件的注册"><a href="#1-3-组件的注册" class="headerlink" title="1.3 组件的注册"></a>1.3 组件的注册</h4><ul>
<li>在页面的实例中，新增属性 components</li>
<li>属性components是一个对象， 在里面添加要注册的组件</li>
</ul>
<h4 id="1-4-组件的使用"><a href="#1-4-组件的使用" class="headerlink" title="1.4 组件的使用"></a>1.4 组件的使用</h4><p>+在页面的template中添加组件标签 “&lt;组件&gt;&lt;组件/&gt;”</p>
<h4 id="1-5-全局数据传递"><a href="#1-5-全局数据传递" class="headerlink" title="1.5 全局数据传递"></a>1.5 全局数据传递</h4><ul>
<li>通过prototype在vue的原型上添加属性</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-766fd5caa2499a5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/362/format/webp" alt="img"></p>
<p>全局数据传递.png</p>
<ul>
<li><p>在App.vue文件中向外暴露一个全局对象</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-31c83f46a6e86b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/418/format/webp" alt="img"></p>
<p>globalData数据传递.png</p>
</li>
<li><p>以上两种方法的拿值</p>
</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-fa3ecd57d30964b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/301/format/webp" alt="img"></p>
<p>拿全局数据方法.png</p>
<h4 id="1-6-使用插槽实现动态更新组件"><a href="#1-6-使用插槽实现动态更新组件" class="headerlink" title="1.6 使用插槽实现动态更新组件"></a>1.6 使用插槽实现动态更新组件</h4><p><img src="https://upload-images.jianshu.io/upload_images/19729056-68f1138d3744e626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/853/format/webp" alt="img"></p>
<p>插槽.png</p>
<h2 id="2-9-生命周期"><a href="#2-9-生命周期" class="headerlink" title="2.9 生命周期"></a>2.9 生命周期</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h4><ul>
<li>uni-app框架的生命周期结合了vue和微信小程序的生命周期</li>
<li>全局APP中使用 onLaunch 表示应用启动时</li>
<li>页面中使用 onLoad 或者 onShow 分别表示页面加载完成 和 页面显示时</li>
<li>组件中使用mounted 表示组件挂载完毕时</li>
</ul>
<h4 id="2-完整生命周期"><a href="#2-完整生命周期" class="headerlink" title="2 完整生命周期"></a>2 完整生命周期</h4><ul>
<li><a href="https://links.jianshu.com/go?to=https://uniapp.dcloud.io/frame?id=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">uni-app生命周期</a></li>
<li><a href="https://links.jianshu.com/go?to=https://cn.vuejs.org/v2/guide/instance.html%23%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">vue生命周期图示</a></li>
<li><a href="https://links.jianshu.com/go?to=https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html">微信小程序生命周期</a></li>
</ul>
<h1 id="3-uni-app项目"><a href="#3-uni-app项目" class="headerlink" title="3.uni-app项目"></a>3.uni-app项目</h1><ul>
<li>懂你找图</li>
</ul>
<blockquote>
<p>本文结合黑马程序员教学视频，部分截图来自原视频<br> 黑马视频链接： <a href="https://links.jianshu.com/go?to=https://www.bilibili.com/video/BV1Sc41187nZ?p=1">https://www.bilibili.com/video/BV1Sc41187nZ?p=1</a></p>
</blockquote>
<blockquote>
<p>作者：VinSmokeW<br>链接：<a href="https://www.jianshu.com/p/3dec2cc2e30b">https://www.jianshu.com/p/3dec2cc2e30b</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h4 id="1-脚手架搭建项目"><a href="#1-脚手架搭建项目" class="headerlink" title="1.脚手架搭建项目"></a>1.脚手架搭建项目</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 全局安装</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">//2. 创建项目</span></span><br><span class="line">vue create -p dcloudio/uni-preset-vue my-project</span><br><span class="line"><span class="comment">//3. 启动项目（微信小程序）</span></span><br><span class="line">npm run dev:mp-weixin</span><br><span class="line"><span class="comment">//4. 微信小程序开发者工具导入项目</span></span><br></pre></td></tr></table></figure>

<h4 id="2-项目目录"><a href="#2-项目目录" class="headerlink" title="2.项目目录"></a>2.项目目录</h4><p><img src="/2021/04/30/dnpicture/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.jpg" alt="项目目录"></p>
<h5 id="2-1-样式和sass"><a href="#2-1-样式和sass" class="headerlink" title="2.1.样式和sass"></a>2.1.样式和sass</h5><p><img src="/2021/04/30/dnpicture/Snipaste_2021-05-01_00-35-52.jpg" alt="Snipaste_2021-05-01_00-35-52"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i sass-loader@<span class="number">4.13</span><span class="number">.0</span> node-sass@<span class="number">8.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-uni-ui和接口使用"><a href="#2-2-uni-ui和接口使用" class="headerlink" title="2.2.uni-ui和接口使用"></a>2.2.uni-ui和接口使用</h5><blockquote>
<p>unu-ui :<a href="https://www.npmjs.com/package/@dcloudio/uni-ui">https://www.npmjs.com/package/@dcloudio/uni-ui</a></p>
<p>接口文档：<a href="https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602">https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602</a></p>
<p>比如 <a href="http://157.122.54.189:9088/image/v3/homepage/vertical">http://157.122.54.189:9088/image/v3/homepage/vertical</a> 这个接口不能用，带上参数之后<br><a href="http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2">http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2</a><br>就可以用了</p>
</blockquote>
<p>index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;首页</span><br><span class="line">    &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;iconfont iconvideocamera&quot;</span>&gt;&lt;/text&gt;</span><br><span class="line">    &lt;uni-badge text=<span class="string">&quot;1&quot;</span>&gt;&lt;<span class="regexp">/uni-badge&gt;&lt;uni-badge text=&quot;2&quot; type=&quot;success&quot; &gt;&lt;/u</span>ni-badge&gt;</span><br><span class="line">    &lt;uni-badge text=<span class="string">&quot;3&quot;</span> type=<span class="string">&quot;primary&quot;</span> :inverted=<span class="string">&quot;true&quot;</span>&gt;&lt;/uni-badge&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;uniBadge&#125; <span class="keyword">from</span> <span class="string">&#x27;@dcloudio/uni-ui&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    uniBadge</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// http://157.122.54.189:9088/image/v3/homepage/vertical</span></span><br><span class="line">    <span class="comment">// 1.原生的微信小程序的api</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url:<span class="string">&quot;http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2&quot;</span>,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. uni-api</span></span><br><span class="line">    uni.request(&#123;</span><br><span class="line">      uni:<span class="string">&quot;http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>





<h5 id="2-2-首页模块"><a href="#2-2-首页模块" class="headerlink" title="2.2. 首页模块"></a>2.2. 首页模块</h5><ul>
<li><p>功能分析</p>
<ul>
<li>修改导航栏的外观</li>
<li>使用分段器组件搭建子页面</li>
<li>封装自己异步请求</li>
</ul>
</li>
<li><p>搭建子页面</p>
<ul>
<li>首页模块分为4个部分,分别是推荐、分类、最新、专辑</li>
<li>新建自定义组件来代替上述的4个页面<ul>
<li>home-recommend</li>
<li>home-category</li>
<li>home-new</li>
<li>home-album</li>
</ul>
</li>
<li>分段器介绍<ul>
<li>分段器指的是uni-ui中的一个组件,其实就是我们俗称的标签页,tab栏</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=54">https://ext.dcloud.net.cn/plugin?id=54</a></li>
</ul>
</li>
</ul>
</li>
<li><p>封装自己的异步请求</p>
<ul>
<li>封装的原因<ul>
<li>原生的请求不支持 promise</li>
<li>unl-apl的请求不能够方便的添加请求中效果</li>
<li>uni-api的请求返回值是个数组,不方便</li>
</ul>
</li>
<li>封装的思路<ul>
<li>基于原生的 promise来封装</li>
<li>挂载到vue的原型上</li>
<li>通过 this request的方式来使用</li>
</ul>
</li>
</ul>
<h5 id="2-3-首页模块-推荐模块"><a href="#2-3-首页模块-推荐模块" class="headerlink" title="2.3.首页模块-推荐模块"></a>2.3.首页模块-推荐模块</h5><ul>
<li><p>接口文档<br><a href="https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602">https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602</a></p>
</li>
<li><p>数据动态渲染</p>
</li>
<li><p>moment. Js的使用</p>
</li>
<li><p>“热门”列表的基于 scroll-view的分页加载</p>
</li>
</ul>
</li>
<li><p>页面</p>
</li>
</ul>
<h5 id="2-4-首页模块-专辑模块"><a href="#2-4-首页模块-专辑模块" class="headerlink" title="2.4.首页模块-专辑模块"></a>2.4.首页模块-专辑模块</h5><ul>
<li>专辑列表</li>
<li>专辑详情</li>
</ul>
<p>1.专辑列表</p>
<p>1.1功能分析</p>
<ul>
<li>使用 setNavigation BarTitle修改页面标题</li>
<li>发送请求获取数据</li>
<li>使用 swiper轮播图组件</li>
<li>使用 scroll-view组件实现分页</li>
<li>点击跳转到专辑详情页</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序 vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本配置</title>
    <url>/2021/01/17/git/</url>
    <content><![CDATA[<p>1.全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name **</span><br><span class="line">git config --global user.email ***@**.com</span><br><span class="line">git config --global push.default matching</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;vim&quot;</span><br><span class="line">git config -l;</span><br></pre></td></tr></table></figure>

<p>2.密钥生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C ***@qq.com</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<p>3.远程仓库连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add github git@github.com:****&#x2F;learngit.git</span><br><span class="line">git remote add gitee git@gitee.com:*****&#x2F;learngit.git</span><br><span class="line">git remote -v</span><br><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/17/git/git.png"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo install</title>
    <url>/2021/01/13/hexo%20install/</url>
    <content><![CDATA[<p>1、安装之前可以先设置一下淘宝镜像加速器<br>    <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>2、全局安装框架<br>    <code>npm install hexo-cli -g</code><br>1、创建你的博客目录<br>     <code>hexo init 你博客的文件夹名字</code><br>2、进入你博客的目录<br>    <code>cd 你博客的文件夹名字</code><br>3、复制文件到你博客的目录<br>    <code>npm install</code><br>4、安装Hexo部署插件<br>5、请在你博客的目录下启动cmd，再执行以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>6、打开你博客根目录的 _config.yml 文件，将以下信息添加到里面去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:yzhou15&#x2F;yzhou15.git</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span><br><span class="line">  # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>

<p>7、hexo cl&amp;hexo g&amp; hexo s<br>8、hexo d<br>每次部署完git pages要点更新</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay3</title>
    <url>/2021/02/05/vueDay3/</url>
    <content><![CDATA[<h3 id="一-组件化开发"><a href="#一-组件化开发" class="headerlink" title="一. 组件化开发"></a>一. 组件化开发</h3><h4 id="1-1-父子组件的访问"><a href="#1-1-父子组件的访问" class="headerlink" title="1.1. 父子组件的访问"></a>1.1. 父子组件的访问</h4><ul>
<li>children/refs</li>
<li>parent/root</li>
</ul>
<h4 id="1-2-slot的使用"><a href="#1-2-slot的使用" class="headerlink" title="1.2. slot的使用"></a>1.2. slot的使用</h4><ul>
<li>基本使用</li>
<li>具名插槽</li>
<li>编译的作用域</li>
<li>作用域插槽</li>
</ul>
<h3 id="二-前端模块化"><a href="#二-前端模块化" class="headerlink" title="二. 前端模块化"></a>二. 前端模块化</h3><h4 id="2-1-为什么要使用模块化"><a href="#2-1-为什么要使用模块化" class="headerlink" title="2.1 为什么要使用模块化"></a>2.1 为什么要使用模块化</h4><ul>
<li>解决命名重复、代码不可复用性等问题</li>
<li>简单写js代码带来的问题</li>
<li>闭包引起代码不可复用</li>
<li>自己实现了简单的模块化</li>
<li>AMD/CMD/CommonJS</li>
</ul>
<h4 id="2-2-模块化规范"><a href="#2-2-模块化规范" class="headerlink" title="2.2 模块化规范"></a>2.2 模块化规范</h4><ul>
<li>CommonJS</li>
<li>AMD</li>
<li>CMD</li>
<li>ES6的Modules</li>
</ul>
<h4 id="2-3-模块化核心，ES6中模块化的使用"><a href="#2-3-模块化核心，ES6中模块化的使用" class="headerlink" title="2.3 模块化核心，ES6中模块化的使用"></a>2.3 模块化核心，ES6中模块化的使用</h4><ul>
<li>导出  <ul>
<li>CommonJS: model.export{}</li>
<li>ES6: export{}</li>
</ul>
</li>
<li>导入 <ul>
<li> CommonJS: let{} = require(‘’)</li>
<li>ES6: import {…} from “…”</li>
</ul>
</li>
</ul>
<h3 id="三-webpack"><a href="#三-webpack" class="headerlink" title="三. webpack"></a>三. webpack</h3><h4 id="3-1-认识webpack"><a href="#3-1-认识webpack" class="headerlink" title="3.1. 认识webpack"></a>3.1. 认识webpack</h4><ul>
<li>模块化打包工具</li>
</ul>
<h5 id="3-1-1-和grunt-gulp的区别"><a href="#3-1-1-和grunt-gulp的区别" class="headerlink" title="3.1.1. 和grunt/gulp的区别"></a>3.1.1. 和grunt/gulp的区别</h5><ul>
<li>grunt/gulp更强调任务处理，自动化任务管理工具</li>
<li>webpack更强调模块化</li>
</ul>
<h4 id="3-2-webpck的安装"><a href="#3-2-webpck的安装" class="headerlink" title="3.2. webpck的安装"></a>3.2. webpck的安装</h4><p>依赖环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> -g</span><br><span class="line">cd 对应目录</span><br><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="3-3-webpack的起步"><a href="#3-3-webpack的起步" class="headerlink" title="3.3. webpack的起步"></a>3.3. webpack的起步</h4><ul>
<li>src(开发)</li>
<li>dist-&gt;distribution(发布)</li>
</ul>
<p>webpack命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack ./src/main.js ./dist/bundle.js</span><br></pre></td></tr></table></figure>
<h4 id="3-4-webpck的配置"><a href="#3-4-webpck的配置" class="headerlink" title="3.4. webpck的配置"></a>3.4. webpck的配置</h4><ul>
<li>入口和出口的配置<ul>
<li>webpack.config.js</li>
<li>   配置时注意绝对路径path<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// path: &#x27;./dist&#x27;,</span></span><br><span class="line">    <span class="comment">// 动态获取路径</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>package.jason</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<ul>
<li>局部安装webpack<ul>
<li>开发时依赖</li>
<li>运行时依赖<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="3-5-loaderd-使用"><a href="#3-5-loaderd-使用" class="headerlink" title="3.5. loaderd 使用"></a>3.5. loaderd 使用</h4></li>
</ul>
</li>
</ul>
<p>webpack官网查询：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p>
<h5 id="3-5-1-安装css-loader"><a href="#3-5-1-安装css-loader" class="headerlink" title="3.5.1 安装css-loader"></a>3.5.1 安装css-loader</h5><p>首先，你需要先安装 <code>css-loader</code> ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader@<span class="number">2.0</span><span class="number">.2</span></span><br><span class="line">npm install --save-dev style-loader@<span class="number">0.23</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>然后把 loader 引用到你 <code>webpack</code> 的配置中。如下所示：</p>
<p><strong>file.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">&quot;file.css&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-2-安装less-loader"><a href="#3-5-2-安装less-loader" class="headerlink" title="3.5.2. 安装less-loader"></a>3.5.2. 安装less-loader</h5><p>安装 <code>less</code> 和 <code>less-loader</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install less@<span class="number">3.9</span><span class="number">.0</span> less-loader@<span class="number">4.1</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>

<p>将该 loader 添加到 webpack 的配置中去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        loader: [ <span class="comment">// compiles Less to CSS</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-3-安装图片文件url-loader"><a href="#3-5-3-安装图片文件url-loader" class="headerlink" title="3.5.3 安装图片文件url-loader"></a>3.5.3 安装图片文件url-loader</h5><p>首先，你需要安装 <code>url-loader</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install url-loader@<span class="number">1.1</span><span class="number">.2</span> --save-dev</span><br></pre></td></tr></table></figure>

<p><code>url-loader</code> 功能类似于 <a href="https://webpack.docschina.org/loaders/file-loader/"><code>file-loader</code></a>, 但是在文件大小（单位为字节）低于指定的限制时，可以返回一个 DataURL。</p>
<p><strong>index.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;./image.png&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// 当加载的图片小于limit8kb时会将图片编译成base64字符串形式</span></span><br><span class="line">              <span class="comment">// 当加载的图片大于limit8kb时，要使用file-loader模块进行加载</span></span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line">              <span class="comment">// 统一命名</span></span><br><span class="line">              name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后通过你的首选方法运行 <code>webpack</code>。</p>
<h5 id="3-5-4-加载file-loader模块"><a href="#3-5-4-加载file-loader模块" class="headerlink" title="3.5.4. 加载file-loader模块,"></a>3.5.4. 加载file-loader模块,</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install file-loader@<span class="number">3.0</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure>

<p>加载后由于发布到dist文件夹中，注意修改webpack中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">	publicPath: <span class="string">&#x27;dist/&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure>

<h5 id="3-5-5-babel-loader-gt-ES6语法处理"><a href="#3-5-5-babel-loader-gt-ES6语法处理" class="headerlink" title="3.5.5.  babel-loader-&gt;ES6语法处理"></a>3.5.5.  babel-loader-&gt;ES6语法处理</h5><p>env:environment环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-loader@<span class="number">7</span> babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class="line">          presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-6-webpack中配置vue"><a href="#3-6-webpack中配置vue" class="headerlink" title="3.6 webpack中配置vue"></a>3.6 webpack中配置vue</h4><p>下载vue的方式：</p>
<ul>
<li>直接下载应用</li>
<li>CDN引入</li>
<li>npm安装</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue@<span class="number">2.5</span><span class="number">.21</span> --save</span><br></pre></td></tr></table></figure>

<p>版本：</p>
<ul>
<li>runtime-only -&gt;代码中不可以有任何template</li>
<li>runtime-compiler -&gt;代码中可以有template,因为有compiler可以用于编译template</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">	alias: &#123;</span><br><span class="line">		<span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SPA(simple page web applocation)单页面复应用 -&gt; 多页面时vue-router(前端路由)跳转</p>
<p>.vue文件封装处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue-loader@<span class="number">15.4</span><span class="number">.2</span> vue-template-compiler@<span class="number">2.5</span><span class="number">.21</span> --save-dev</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略扩展名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-webpack的plugin的使用"><a href="#3-7-webpack的plugin的使用" class="headerlink" title="3.7. webpack的plugin的使用"></a>3.7. webpack的plugin的使用</h4><p>插件–&gt;框架扩充</p>
<ul>
<li>添加版权</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终版权归yzhou所有&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>打包html的plugin<ul>
<li>自动生成一个index.html文件（可以指定模板来生成）</li>
<li>将打包的js文件，自动通过script标签插入到body中<ul>
<li>修改webpack.config.js文件中plugin部分<ul>
<li>要删除之前在output中添加的publicPath属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin@<span class="number">3.2</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line">plugins: [</span><br><span class="line">	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">		template: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">	&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<ul>
<li>js压缩的Plugin</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@<span class="number">1.1</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	plugins: [</span><br><span class="line">		<span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-8-搭建服务器"><a href="#3-8-搭建服务器" class="headerlink" title="3.8. 搭建服务器"></a>3.8. 搭建服务器</h4><p>基于node.js搭建，内部使用express框架，让浏览器自动刷新，从内存读取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@<span class="number">2.9</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">		contentBase: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">		inline: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.jason中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-9-webpack配置分离"><a href="#3-9-webpack配置分离" class="headerlink" title="3.9. webpack配置分离"></a>3.9. webpack配置分离</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack-merge@<span class="number">4.1</span><span class="number">.5</span> --save-dev</span><br></pre></td></tr></table></figure>



<h3 id="四-Vue-CLI"><a href="#四-Vue-CLI" class="headerlink" title="四. Vue CLI"></a>四. Vue CLI</h3><p>cli-&gt;command-line interface</p>
<h4 id="4-1-认识Vue-CLI"><a href="#4-1-认识Vue-CLI" class="headerlink" title="4.1. 认识Vue CLI"></a>4.1. 认识Vue CLI</h4><ul>
<li>脚手架是什么东西</li>
<li>CLI依赖webpack，node，npm</li>
<li>安装CLI3-&gt;拉取CLI2模块</li>
</ul>
<p>开发大型项目时，需要考虑代码目录结构，项目结构和部署、热加载、代码单元测试等事情，手动完成效率低</p>
<ul>
<li>快速搭建vue开发环境</li>
<li>生成对应webpack配置</li>
</ul>
<h4 id="4-2-使用前提"><a href="#4-2-使用前提" class="headerlink" title="4.2.使用前提"></a>4.2.使用前提</h4><ul>
<li>Node<ul>
<li>C++</li>
<li>V8引擎–跳过字节码直接编译成二进制代码</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>npm: Node Package Manager</p>
<ul>
<li>Nodejs包管理和分发工具</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g cnmp --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<ul>
<li>webpack</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>

<h4 id="4-3-使用和安装"><a href="#4-3-使用和安装" class="headerlink" title="4.3. 使用和安装"></a>4.3. 使用和安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">C:\Users\yzhou&gt;vue --version</span><br><span class="line">@vue/cli <span class="number">4.5</span><span class="number">.12</span></span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>拉取Vue CLI2的模板：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>



<h4 id="4-4-CLI2初始化项目的过程"><a href="#4-4-CLI2初始化项目的过程" class="headerlink" title="4.4 CLI2初始化项目的过程"></a>4.4 CLI2初始化项目的过程</h4><h4 id="4-5-CLI2生产的目录结构解析"><a href="#4-5-CLI2生产的目录结构解析" class="headerlink" title="4.5 CLI2生产的目录结构解析"></a>4.5 CLI2生产的目录结构解析</h4><p>ES(js)-Lint</p>
<p>e2e-&gt; end to end(端到端测试)-&gt; selenium</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay2</title>
    <url>/2021/01/16/vueDay2/</url>
    <content><![CDATA[<p>一. 计算属性</p>
<h4 id="1-1-计算属性的本质"><a href="#1-1-计算属性的本质" class="headerlink" title="1.1. 计算属性的本质"></a>1.1. 计算属性的本质</h4><ul>
<li>fullname:(set(), get())</li>
</ul>
<h4 id="1-2-计算属性和methods对比"><a href="#1-2-计算属性和methods对比" class="headerlink" title="1.2. 计算属性和methods对比"></a>1.2. 计算属性和methods对比</h4><ul>
<li>计算属性在多次使用时，只会调用一次</li>
<li>它是有缓存的</li>
</ul>
<h3 id="二-事件监听"><a href="#二-事件监听" class="headerlink" title="二. 事件监听"></a>二. 事件监听</h3><h4 id="2-1-事件监听基本使用"><a href="#2-1-事件监听基本使用" class="headerlink" title="2.1. 事件监听基本使用"></a>2.1. 事件监听基本使用</h4><ul>
<li>btnClick</li>
<li>btnClick(enent)</li>
<li>btnCLick(abc, event) -&gt; $event</li>
</ul>
<h4 id="2-3-修饰符"><a href="#2-3-修饰符" class="headerlink" title="2.3. 修饰符"></a>2.3. 修饰符</h4><ul>
<li>stop</li>
<li>prevent</li>
<li>.enter</li>
<li>.once</li>
<li>.native</li>
</ul>
<h3 id="三-条件判断"><a href="#三-条件判断" class="headerlink" title="三. 条件判断"></a>三. 条件判断</h3><h4 id="3-1-v-if-v-else-if-v-else"><a href="#3-1-v-if-v-else-if-v-else" class="headerlink" title="3.1. v-if/v-else-if/v-else"></a>3.1. v-if/v-else-if/v-else</h4><h4 id="3-2-登陆小案例"><a href="#3-2-登陆小案例" class="headerlink" title="3.2. 登陆小案例"></a>3.2. 登陆小案例</h4><h4 id="3-3-v-show"><a href="#3-3-v-show" class="headerlink" title="3.3. v-show"></a>3.3. v-show</h4><ul>
<li>v-show 和 v-if的区别</li>
</ul>
<h3 id="四-循环遍历"><a href="#四-循环遍历" class="headerlink" title="四. 循环遍历"></a>四. 循环遍历</h3><h4 id="4-1-遍历数组"><a href="#4-1-遍历数组" class="headerlink" title="4.1. 遍历数组"></a>4.1. 遍历数组</h4><h4 id="4-2-遍历对象"><a href="#4-2-遍历对象" class="headerlink" title="4.2 遍历对象"></a>4.2 遍历对象</h4><ul>
<li>value</li>
<li>value, key</li>
<li>value, key, index</li>
</ul>
<h4 id="4-3-数组哪些方法是响应式的"><a href="#4-3-数组哪些方法是响应式的" class="headerlink" title="4.3. 数组哪些方法是响应式的"></a>4.3. 数组哪些方法是响应式的</h4><h4 id="4-4-作业完成"><a href="#4-4-作业完成" class="headerlink" title="4.4. 作业完成"></a>4.4. 作业完成</h4><h3 id="五-书籍案例"><a href="#五-书籍案例" class="headerlink" title="五. 书籍案例"></a>五. 书籍案例</h3><h3 id="六-v-model的使用"><a href="#六-v-model的使用" class="headerlink" title="六. v-model的使用"></a>六. v-model的使用</h3><h4 id="6-1-v-model的基本使用"><a href="#6-1-v-model的基本使用" class="headerlink" title="6.1. v-model的基本使用"></a>6.1. v-model的基本使用</h4><ul>
<li>v-model=&gt;v-bind:value v-on:input</li>
</ul>
<h4 id="6-2-v-model和radio-checkbox-select"><a href="#6-2-v-model和radio-checkbox-select" class="headerlink" title="6.2 v-model和radio/checkbox/select"></a>6.2 v-model和radio/checkbox/select</h4><h4 id="6-3-修饰符"><a href="#6-3-修饰符" class="headerlink" title="6.3. 修饰符"></a>6.3. 修饰符</h4><ul>
<li>lazy</li>
<li>number</li>
<li>trim</li>
</ul>
<h3 id="七-组件化开发"><a href="#七-组件化开发" class="headerlink" title="七. 组件化开发"></a>七. 组件化开发</h3><h4 id="7-1-认识组件化"><a href="#7-1-认识组件化" class="headerlink" title="7.1. 认识组件化"></a>7.1. 认识组件化</h4><h4 id="7-2-组件的基本使用"><a href="#7-2-组件的基本使用" class="headerlink" title="7.2. 组件的基本使用"></a>7.2. 组件的基本使用</h4><h4 id="7-3-全局组件和局部组件"><a href="#7-3-全局组件和局部组件" class="headerlink" title="7.3. 全局组件和局部组件"></a>7.3. 全局组件和局部组件</h4><h4 id="7-4-父组件和子组件"><a href="#7-4-父组件和子组件" class="headerlink" title="7.4. 父组件和子组件"></a>7.4. 父组件和子组件</h4><h4 id="7-5-注册的语法糖"><a href="#7-5-注册的语法糖" class="headerlink" title="7.5. 注册的语法糖"></a>7.5. 注册的语法糖</h4><h4 id="7-6-模板的分离写法"><a href="#7-6-模板的分离写法" class="headerlink" title="7.6. 模板的分离写法"></a>7.6. 模板的分离写法</h4><ul>
<li>script</li>
<li>template</li>
</ul>
<h4 id="7-7-数据的存放"><a href="#7-7-数据的存放" class="headerlink" title="7.7. 数据的存放"></a>7.7. 数据的存放</h4><ul>
<li>子组件不能直接访问父组件</li>
<li>子组件中有自己的data ,而且必须是一个函数</li>
<li>为什么必须是一个函数</li>
</ul>
<h4 id="7-8-父子间组件的通信"><a href="#7-8-父子间组件的通信" class="headerlink" title="7.8. 父子间组件的通信"></a>7.8. 父子间组件的通信</h4><ul>
<li>父传子：props</li>
<li>子传父：$emit</li>
</ul>
<h4 id="7-9-项目"><a href="#7-9-项目" class="headerlink" title="7.9. 项目"></a>7.9. 项目</h4><ul>
<li>npm install</li>
<li>npm run serve</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>next配置</title>
    <url>/2021/04/10/next%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>转载自：<a href="https://blog.csdn.net/qq_35396510/article/details/105953460">https://blog.csdn.net/qq_35396510/article/details/105953460</a></p>
<p>hexo 主题 next7.8 版本配置美化</p>
<p>转载自：<a href="https://www.jianshu.com/p/6f9e732b1f9f">https://www.jianshu.com/p/6f9e732b1f9f</a></p>
<p>Hexo的Next主题详细配置</p>
<p>72017.11.29 16:21:02字数 1,902阅读 53,047</p>
<p>经过一番不懈的努力，我们终于按照<a href="https://www.jianshu.com/p/51617690f8ca">Hexo免费搭建一个属于自己的博客</a>搭建好了一个属于自己的博客，并且还安装了一个Next主题，但是我们的博客一开始还是很简陋的，我们需要把她装修一下。</p>
<blockquote>
<ul>
<li>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为**<em>站点配置文件*<strong>， 后者称为</strong></em>主题配置文件***。</li>
<li>以下所有终端执行的命令都在你的Hexo根目录下</li>
</ul>
</blockquote>
<h2 id="1、基本信息配置"><a href="#1、基本信息配置" class="headerlink" title="1、基本信息配置"></a>1、基本信息配置</h2><blockquote>
<p>基本信息包括：博客标题、作者、描述、语言等等。</p>
</blockquote>
<p>打开 *<strong>站点配置文件*</strong> ，找到Site模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">author: 作者</span><br><span class="line">language: 语言（简体中文是zh-Hans）</span><br><span class="line">timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</span><br></pre></td></tr></table></figure>

<p>关于 *<strong>站点配置文件*</strong> 中的其他配置可参考<a href="https://links.jianshu.com/go?to=https://hexo.io/zh-cn/docs/configuration.html">站点配置</a></p>
<h2 id="2、菜单设置"><a href="#2、菜单设置" class="headerlink" title="2、菜单设置"></a>2、菜单设置</h2><blockquote>
<p>菜单包括：首页、归档、分类、标签、关于等等</p>
</blockquote>
<p>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 *<strong>主题配置文件*</strong> 找到<code>Menu Settings</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                          <span class="comment">//首页</span></span><br><span class="line">  archives: /archives/ || archive          <span class="comment">//归档</span></span><br><span class="line">  categories: /categories/ || th           <span class="comment">//分类</span></span><br><span class="line">  tags: /tags/ || tags                     <span class="comment">//标签</span></span><br><span class="line">  about: /about/ || user                   <span class="comment">//关于</span></span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar        <span class="comment">//日程表</span></span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap        <span class="comment">//站点地图</span></span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat          <span class="comment">//公益404</span></span></span><br></pre></td></tr></table></figure>

<p>看看你需要哪个菜单就把哪个取消注释打开就行了；<br>关于后面的格式，以<code>archives: /archives/ || archive</code>为例：<br><code>||</code> 之前的<code>/archives/</code>表示标题“归档”，关于标题的格式可以去<code>themes/next/languages/zh-Hans.yml</code>中参考或修改<br><code>||</code>之后的<code>archive</code>表示图标，可以去<a href="https://links.jianshu.com/go?to=http://fontawesome.io/icons/">Font Awesome</a>中查看或修改，Next主题所有的图标都来自Font Awesome。</p>
<h2 id="3、Next主题样式设置"><a href="#3、Next主题样式设置" class="headerlink" title="3、Next主题样式设置"></a>3、Next主题样式设置</h2><p>我们百里挑一选择了Next主题，不过Next主题还有4种风格供我们选择，打开 *<strong>主题配置文件*</strong> 找到<code>Scheme Settings</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>4种风格大同小异，本人用的是<a href="https://links.jianshu.com/go?to=https://youngerli.github.io">Gemini</a>风格，你们可以选择自己喜欢的风格。</p>
<h2 id="4、侧栏设置"><a href="#4、侧栏设置" class="headerlink" title="4、侧栏设置"></a>4、侧栏设置</h2><blockquote>
<p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p>
</blockquote>
<p>打开 *<strong>主题配置文件*</strong> 找到<code>sidebar</code>字段</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        <span class="comment">//靠左放置</span></span><br><span class="line">  <span class="meta">#position: right      <span class="comment">//靠右放置</span></span></span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  <span class="meta">#display: post        <span class="comment">//默认行为，在文章页面（拥有目录列表）时显示</span></span></span><br><span class="line">  display: always       <span class="comment">//在所有页面中都显示</span></span><br><span class="line">  <span class="meta">#display: hide        <span class="comment">//在所有页面中都隐藏（可以手动展开）</span></span></span><br><span class="line">  <span class="meta">#display: remove      <span class="comment">//完全移除</span></span></span><br><span class="line"></span><br><span class="line">  offset: <span class="number">12</span>            <span class="comment">//文章间距（只对Pisces | Gemini两种风格有效）</span></span><br><span class="line"></span><br><span class="line">  b2t: <span class="literal">false</span>            <span class="comment">//返回顶部按钮（只对Pisces | Gemini两种风格有效）</span></span><br><span class="line"></span><br><span class="line">  scrollpercent: <span class="literal">true</span>   <span class="comment">//返回顶部按钮的百分比</span></span><br></pre></td></tr></table></figure>

<h2 id="5、头像设置"><a href="#5、头像设置" class="headerlink" title="5、头像设置"></a>5、头像设置</h2><p>打开 *<strong>主题配置文件*</strong> 找到<code>Sidebar Avatar</code>字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar: /images/header.jpg</span><br></pre></td></tr></table></figure>

<p>这是头像的路径，只需把你的头像命名为<code>header.jpg</code>（随便命名）放入<code>themes/next/source/images</code>中，将<code>avatar</code>的路径名改成你的头像名就OK啦！</p>
<h2 id="6、设置RSS"><a href="#6、设置RSS" class="headerlink" title="6、设置RSS"></a>6、设置RSS</h2><p>1、先安装 <a href="https://links.jianshu.com/go?to=https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 插件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>2、打开 *<strong>站点配置文件*</strong> 找到<code>Extensions</code>在下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RSS订阅</span></span><br><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>

<p>3、打开 *<strong>主题配置文件*</strong> 找到<code>rss</code>，设置为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rss: &#x2F;atom.xml</span><br></pre></td></tr></table></figure>

<h2 id="7、添加分类模块"><a href="#7、添加分类模块" class="headerlink" title="7、添加分类模块"></a>7、添加分类模块</h2><p>1、新建一个分类页面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure>

<p>2、你会发现你的<code>source</code>文件夹下有了<code>categorcies/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 分类</code><br>3、打开 *<strong>主题配置文件*</strong> 找到<code>menu</code>，将categorcies取消注释<br>4、把文章归入分类只需在文章的顶部标题下方添加<code>categories</code>字段，即可自动创建分类名并加入对应的分类中<br>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类测试文章标题</span><br><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure>

<h2 id="8、添加标签模块"><a href="#8、添加标签模块" class="headerlink" title="8、添加标签模块"></a>8、添加标签模块</h2><p>1、新建一个标签页面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure>

<p>2、你会发现你的<code>source</code>文件夹下有了<code>tags/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 标签</code><br>3、打开 *<strong>主题配置文件*</strong> 找到<code>menu</code>，将tags取消注释<br>4、把文章添加标签只需在文章的顶部标题下方添加<code>tags</code>字段，即可自动创建标签名并归入对应的标签中<br>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签测试文章标题</span><br><span class="line">tags: </span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h2 id="9、添加关于模块"><a href="#9、添加关于模块" class="headerlink" title="9、添加关于模块"></a>9、添加关于模块</h2><p>1、新建一个关于页面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page about</span><br></pre></td></tr></table></figure>

<p>2、你会发现你的<code>source</code>文件夹下有了<code>about/index.md</code>，打开<code>index.md</code>文件即可编辑关于你的信息，可以随便编辑。<br>3、打开 *<strong>主题配置文件*</strong> 找到<code>menu</code>，将about取消注释</p>
<h2 id="10、添加搜索功能"><a href="#10、添加搜索功能" class="headerlink" title="10、添加搜索功能"></a>10、添加搜索功能</h2><p>1、安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2、打开 *<strong>站点配置文件*</strong> 找到<code>Extensions</code>在下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>

<p>3、打开 *<strong>主题配置文件*</strong> 找到<code>Local search</code>，将<code>enable</code>设置为<code>true</code></p>
<h2 id="11、添加阅读全文按钮"><a href="#11、添加阅读全文按钮" class="headerlink" title="11、添加阅读全文按钮"></a>11、添加阅读全文按钮</h2><p>因为在你的博客主页会有多篇文章，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<p>其后面的部分就不会显示了，只能点击阅读全文才能看</p>
<h2 id="12、修改文章内链接文本样式"><a href="#12、修改文章内链接文本样式" class="headerlink" title="12、修改文章内链接文本样式"></a>12、修改文章内链接文本样式</h2><p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-9cd87c2cc2d0c78f.gif" alt="img"></p>
<p>效果图</p>
<p>打开文件 <code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">  <span class="symbol">color:</span> <span class="comment">#0593d3;</span></span><br><span class="line">  border-<span class="symbol">bottom:</span> none;</span><br><span class="line">  border-<span class="symbol">bottom:</span> 1px solid <span class="comment">#0593d3;</span></span><br><span class="line">  &amp;<span class="symbol">:hover</span> &#123;</span><br><span class="line">    <span class="symbol">color:</span> <span class="comment">#fc6423;</span></span><br><span class="line">    border-<span class="symbol">bottom:</span> none;</span><br><span class="line">    border-<span class="symbol">bottom:</span> 1px solid <span class="comment">#fc6423;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<h2 id="13、设置网站缩略图标"><a href="#13、设置网站缩略图标" class="headerlink" title="13、设置网站缩略图标"></a>13、设置网站缩略图标</h2><blockquote>
<p>从网上看了很多设置方法都是说把favicon.ico放到站点目录的source目录下就可以了，可是我试了好多遍，并不行。</p>
</blockquote>
<p>我的设置方法是这样的：把你的图片（png或jpg格式，不是favicon.ico）放在<code>themes/next/source/images</code>里，然后打开 *<strong>主题配置文件*</strong> 找到<code>favicon</code>，将<code>small、medium、apple_touch_icon</code>三个字段的值都设置成<code>/images/图片名.jpg</code>就可以了，其他字段都注释掉。</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-61a0cc555a25548e.png" alt="img"></p>
<h2 id="14、设置文章字体的颜色、大小"><a href="#14、设置文章字体的颜色、大小" class="headerlink" title="14、设置文章字体的颜色、大小"></a>14、设置文章字体的颜色、大小</h2><p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-e471abbb2b1f459f.png" alt="img"></p>
<p>效果图</p>
<p>如果想设置某一句的颜色或大小，只需用html语法写出来就行了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">接下来就是见证奇迹的时刻</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span>&gt;</span> 我可以设置这一句的颜色哈哈 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span> 我还可以设置这一句的大小嘻嘻 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span>&gt;</span> 我甚至可以设置这一句的颜色和大小呵呵<span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="15、设置文字居中"><a href="#15、设置文字居中" class="headerlink" title="15、设置文字居中"></a>15、设置文字居中</h2><p>设置方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>这一行需要居中<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：简书中此方法无效</p>
</blockquote>
<h2 id="16、添加评论系统"><a href="#16、添加评论系统" class="headerlink" title="16、添加评论系统"></a>16、添加评论系统</h2><blockquote>
<p>目前国内比较有名的多说、网易云跟帖评论系统都已停止服务了，国外的Disqus评论系统还得需要翻墙，所以不推荐使用，剩下的还有搜狐畅言、友言、来必力等。<br>本来想使用畅言的，结果注册完之后还得要求备案，我只想说F开头的那个单词，果断放弃。<br>后来选择了友言</p>
</blockquote>
<p>1、进入<a href="https://links.jianshu.com/go?to=http://www.uyan.cc">友言官网</a>注册、登录步骤我就不介绍了<br>2、登录完成之后，点击获取代码，你会发现出来了一段代码，里面有你的<code>uid=1234567</code><br>3、打开 *<strong>主题配置文件*</strong> 找到<code>youyan_uid</code>将值设置为上面的uid就可以了</p>
<h2 id="17、添加站点访问计数"><a href="#17、添加站点访问计数" class="headerlink" title="17、添加站点访问计数"></a>17、添加站点访问计数</h2><p>站点访问计数有名的就是<a href="https://links.jianshu.com/go?to=http://busuanzi.ibruce.info">不蒜子</a>，使用起来非常方便<br>1、安装脚本<br>打开 <strong>themes/next/layout/_partial/footer.swig</strong>，将下面这段代码添加到里面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">    本站总访问量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 次</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">    有<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人看过我的博客啦</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加的位置如下图，可自行根据个人喜好更换位置</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-690e9b69d7901c54.png" alt="img"></p>
<p>2、以上只是显示站点的访问次数，如果想显示每篇文章的访问次数，打开 <strong>themes/next/layout/_macro/post.swig</strong>，在第一行增加<code>is_pv</code>字段</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">macro</span> render(post, is_index, is_pv, post_extra_class) %&#125;</span><br></pre></td></tr></table></figure>

<p>然后将这段代码插入到里面</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> is_pv %&#125;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">  &lt;span id=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;&lt;/span&gt;次阅读</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>插入的位置</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-bdbc90ff2c4285a0.png" alt="img"></p>
<p>然后再打开 <strong>themes/next/layout/post.swig</strong>，这个文件是文章的模板，给render方法传入参数（对应刚才添加的<code>is_pv</code>字段）</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-8418d415c31ff529.png" alt="img"></p>
<p>最后再打开 <strong>themes/next/layout/index.swig</strong>，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段）</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-5d89c00ea392bf01.png" alt="img"></p>
<p>OK！设置完毕。</p>
<h2 id="18、去掉文章目录标题的自动编号"><a href="#18、去掉文章目录标题的自动编号" class="headerlink" title="18、去掉文章目录标题的自动编号"></a>18、去掉文章目录标题的自动编号</h2><p>我们自己写文章的时候一般都会自己带上标题编号，但是默认的主题会给我们带上编号，很是别扭，如何去掉呢？<br>打开***主题配置文件***，找到</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-dcd17d644851e21f.png" alt="img"></p>
<p>将<code>number</code>改为<code>false</code>即可</p>
<h2 id="18、更多"><a href="#18、更多" class="headerlink" title="18、更多"></a>18、更多</h2><p>1、还有其他更多的主题配置，请查看<a href="https://links.jianshu.com/go?to=http://theme-next.iissnan.com/theme-settings.html">主题配置</a><br>2、还有其他更多的插件，请查看<a href="https://links.jianshu.com/go?to=https://hexo.io/plugins/">Hexo插件</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay4</title>
    <url>/2021/03/20/vueDay4/</url>
    <content><![CDATA[<p>一、Vue CLI</p>
<p>安装脚手架遇到问题可以尝试清空这个文件夹</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">C:\Users\yzhou\AppData\Roaming\npm-cache</span><br></pre></td></tr></table></figure>

<p>parse解析</p>
<h4 id="1-1-runtime-compiler和runtime-only的区别"><a href="#1-1-runtime-compiler和runtime-only的区别" class="headerlink" title="1.1. runtime+compiler和runtime-only的区别"></a>1.1. runtime+compiler和runtime-only的区别</h4><ul>
<li> **runtime+compile:**template -&gt; ast -&gt; render -&gt; virtual dom -&gt; 真实DOM</li>
<li><strong>runtime-only:</strong> virtual dom -&gt; 真实DOM<ul>
<li>性能更高</li>
<li>代码量更少</li>
</ul>
</li>
<li>箭头函数render: (h) =&gt; h, -&gt;本质上是creatElement</li>
<li>ESlint</li>
</ul>
<p>render -&gt; vdom -&gt; UI</p>
<h4 id="1-2-认识Vue-CLI3"><a href="#1-2-认识Vue-CLI3" class="headerlink" title="1.2. 认识Vue CLI3"></a>1.2. 认识Vue CLI3</h4><p>vue2.5.21 -&gt; vue2.x -&gt; flow-type(facebook)</p>
<p>vue3.x -&gt; TypeScript(microsoft)</p>
<ol>
<li>webpack4 （v2webpack3）</li>
<li>设计原则0配置</li>
<li>vue ui 可视化配置，更加人性化</li>
<li>移除static，新增public，将index.html移动到public中</li>
</ol>
<p>preset配置</p>
<p>feature特性</p>
<p>rc-&gt;run command</p>
<p>vcs-&gt;version control system(版本控制git/svn)</p>
<ul>
<li>如何通过CLI3创建项目</li>
<li>CLI3的目录结构</li>
<li>vue配置文件的查看和修改<ol>
<li>vue ui</li>
<li>去找隐藏的配置文件</li>
<li>自定义vue.config.js</li>
</ol>
</li>
</ul>
<h3 id="二、Vue-Router"><a href="#二、Vue-Router" class="headerlink" title="二、Vue-Router"></a>二、Vue-Router</h3><h4 id="2-1-认识路由"><a href="#2-1-认识路由" class="headerlink" title="2.1 认识路由"></a>2.1 认识路由</h4><ul>
<li>后端渲染\后端渲染</li>
<li>前后端分离</li>
<li>SPA\前端路由</li>
</ul>
<p>路由（routing）：通过互联的网络把信息从源地址传输到目的地址的活动</p>
<p>映射关系：ip地址：mac地址</p>
<h5 id="2-1-1-前端渲染和后端渲染："><a href="#2-1-1-前端渲染和后端渲染：" class="headerlink" title="2.1.1 前端渲染和后端渲染："></a>2.1.1 前端渲染和后端渲染：</h5><p>历史阶段：</p>
<ol>
<li>后端渲染阶段<br>后端路由阶段<br>■早期的网站开发整个HTML页面是由服务器来渲染的<br>口服务器直接生产渲染好对应的HTML页面,返回给客户端进行展示<br>■但是,一个网站,这么多页面服务器如何处理呢?<br>口一个页面有自己对应的网址,也就是URL<br>口URL会发送到服务器,服务器会通过正则对该URL进行匹配并且最后交给一个 Controller进行处理<br>口 Controller进行各种处理,最终生成HTML或者数据,返回给前端<br>口这就完成了一个1O操作<br>■上面的这种操作就是后端路由.<br>口当我们页面中需要请求不同的路径内容时,交给服务器来进行处理,服务器渲染好整个页面,并且将页面返回给客户顿<br>口这种情况下渲染好的页面,不需要单独加载任何的s和cs,可以直接交给浏览器展示,这样也有利于SEO的优化<br>后端路由的缺点<br>口一种情况是整个页面的模块由后端人员来编写和维护的<br>口另一种情况是前端开发人员如果要开发页面,需要通过PHP和Java等语言来编写页面代码.<br>口而且通常情况下HTML代码和数据以及对应的逻辑会混在一起,编写和维护都是非常糟糕的事情.</li>
</ol>
<p><img src="/2021/03/20/vueDay4/01-%E5%90%8E%E7%AB%AF%E6%B8%B2%E6%9F%93-1619053611560-1619053625495-1619053695181.jpg"></p>
<ol start="2">
<li>前后端分离阶段<br>口随着Ajax的出现有了前后端分离的开发模式<br>口后端只提供AP来返回数据,前端通过Ajax获取数据并且可以通过 JavaScript将数据渲染到页面中<br>口这样做最大的优点就是前后端责任的清晰,后端专注于数据上前端专注于交互和可视化上.<br>口并且当移动端(ioS/ Android)出现后,后端不需要进行任何处理依然使用之前的一套API即可.<br>口目前很多的网站依然采用这种模式开发</li>
</ol>
<img src="/2021/03/20/vueDay4/02-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%98%B6%E6%AE%B5-1619053735149.jpg" alt="02-前后端分离阶段" style="zoom:200%;">



<ol start="3">
<li><p>前端渲染阶段</p>
<p>■单页面富应用阶段:<br>口其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由<br>口也就是前端来维护一套路由规则.</p>
</li>
</ol>
<img src="/2021/03/20/vueDay4/03-SPA%E9%A1%B5%E9%9D%A2%E9%98%B6%E6%AE%B5-1619053748463.jpg" alt="03-SPA页面阶段" style="zoom:50%;">

<h5 id="2-1-2-前端路由中url和组件的关系"><a href="#2-1-2-前端路由中url和组件的关系" class="headerlink" title="2.1.2.前端路由中url和组件的关系"></a>2.1.2.前端路由中url和组件的关系</h5><img src="/2021/03/20/vueDay4/04-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E4%B8%ADurl%E5%92%8C%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB-1619053762212.jpg" alt="04-前端路由中url和组件的关系" style="zoom:50%;">

<h5 id="2-1-3-前端路由的核心"><a href="#2-1-3-前端路由的核心" class="headerlink" title="2.1.3. 前端路由的核心"></a>2.1.3. 前端路由的核心</h5><ul>
<li><p>改变URL,但是页画不进行整体的刷新</p>
</li>
<li><p>改变URL的hash</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.hash = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML5的history模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;home&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>href-&gt;hyper reference</p>
<p>数据结构：</p>
<p>栈结构：先进后出</p>
<p>push入栈</p>
<p><img src="/2021/03/20/vueDay4/%E6%A0%88%E7%BB%93%E6%9E%84-1619053772511.jpg" alt="栈结构"></p>
<ul>
<li>HTML5的history模式：replaceState</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.replaceState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;home&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>history.go()</li>
<li>因为 history. back0等价于 history. go(-1)<br>history forward0则等价于 history. go(1)<br>这三个接口等同于浏览器界面的前进后退。</li>
</ul>
<p>三大框架路由实现：</p>
<ul>
<li>Angular-&gt;ngRouter</li>
<li>React-&gt;ReactRouter</li>
<li>Vue-&gt;vue-router</li>
</ul>
<h4 id="2-2-vue-router基本使用"><a href="#2-2-vue-router基本使用" class="headerlink" title="2.2. vue-router基本使用"></a>2.2. vue-router基本使用</h4><h5 id="2-2-1-安装步骤"><a href="#2-2-1-安装步骤" class="headerlink" title="2.2.1. 安装步骤"></a>2.2.1. 安装步骤</h5><ol>
<li>安装</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在模块化工程中使用,搭建路由框架<ol>
<li>导入路由对象，并且调用Vue.use(VueRouter)</li>
<li>创建路由实例，并且传入路由映射配置</li>
<li>在Vue实例中挂载创建的路由实例</li>
</ol>
</li>
</ol>
<p>router=&gt;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关信息</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 通过VUe.use(插件)，安装插件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建VueRouter对象</span></span><br><span class="line"><span class="comment">// 3. 将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>main.js中挂载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置路由映射关系步骤：<ol>
<li> 创建路由组件</li>
<li> 配置路由映射：组件和路径映射关系</li>
<li> 使用路由：通过<router-link>和<router-view></router-view></router-link></li>
</ol>
</li>
</ol>
<p>router=&gt;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;../components/About&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的映射关系</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      component: About</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>App.vue中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 渲染成a标签，改变hash</span></span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/home&quot;</span>&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/about&quot;</span>&gt;关于&lt;/router-link&gt;</span><br><span class="line">		<span class="comment">// 栈位，动态渲染不同的组件</span></span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<h5 id="2-2-2-配置默认路径"><a href="#2-2-2-配置默认路径" class="headerlink" title="2.2.2. 配置默认路径"></a>2.2.2. 配置默认路径</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123; </span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="comment">// redirect重定向</span></span><br><span class="line">      redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"> 	]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-添加history在index-js中可以消除地址栏中‘-’"><a href="#2-2-3-添加history在index-js中可以消除地址栏中‘-’" class="headerlink" title="2.2.3. 添加history在index.js中可以消除地址栏中‘#’"></a>2.2.3. 添加history在index.js中可以消除地址栏中‘#’</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123; </span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-4-router-link补充"><a href="#2-2-4-router-link补充" class="headerlink" title="2.2.4. router-link补充"></a>2.2.4. router-link补充</h5><ul>
<li>tag: tag可以指定渲染成什么组件,比如下面的代码会渲染成一个<button>,而不是<a></a></button></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/home&quot;</span> tag=<span class="string">&quot;button&quot;</span>&gt;首页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>replace: 不会留下history记录，后退键不能返回到上一个界面中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/home&quot;</span> tag=<span class="string">&quot;button&quot;</span> replace&gt;首页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>active-class:修改默认的类名称</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123; </span><br><span class="line">  linkActiveClass: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-5-路由代码跳转"><a href="#2-2-5-路由代码跳转" class="headerlink" title="2.2.5. 路由代码跳转"></a>2.2.5. 路由代码跳转</h5><p>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;homeClick&quot;</span>&gt;首页&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;aboutClick&quot;</span>&gt;关于&lt;/button&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">homeClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="comment">// 路由代码跳转</span></span><br><span class="line">      <span class="comment">// this.$router.push(&#x27;/home&#x27;)</span></span><br><span class="line">      <span class="built_in">this</span>.$router.replace(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;homeClick&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">aboutClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/about&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;aboutClick&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-6-动态路由的使用"><a href="#2-2-6-动态路由的使用" class="headerlink" title="2.2.6. 动态路由的使用"></a>2.2.6. 动态路由的使用</h5><ul>
<li>/user/:id</li>
<li>params-&gt;parameters参数<ul>
<li>this.$route.params.id</li>
</ul>
</li>
</ul>
<h5 id="2-2-7-认识路由的懒加载-打包文件的解析"><a href="#2-2-7-认识路由的懒加载-打包文件的解析" class="headerlink" title="2.2.7. 认识路由的懒加载-打包文件的解析"></a>2.2.7. 认识路由的懒加载-打包文件的解析</h5><p>用到时再加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">懒加载的方式</span><br><span class="line">■方式一:结合Wue的异步组件和 Webpack的代码分析</span><br><span class="line"><span class="keyword">const</span> Home resolve =&gt;i <span class="built_in">require</span> ensure([ ./components /Home. vue],<span class="function"><span class="params">O</span>=&gt;</span></span><br><span class="line">I resolve(<span class="built_in">require</span> (./components/Home. vue ))))</span><br><span class="line">■方式二:AMD写法</span><br><span class="line"><span class="keyword">const</span> About resolve = <span class="built_in">require</span>([ ./components/About. vue<span class="string">&#x27;l, resolve)</span></span><br><span class="line"><span class="string">方式三:在ES6中我们可以有更加简单的写法来组织vue异步组件和 Webpack的代码分割</span></span><br><span class="line"><span class="string">const Home = ON&gt; import(./components/Home. vue &#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-vue-router嵌套路由"><a href="#2-3-vue-router嵌套路由" class="headerlink" title="2.3. vue-router嵌套路由"></a>2.3. vue-router嵌套路由</h4><ul>
<li>children:[]</li>
</ul>
<p><img src="/2021/03/20/vueDay4/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-1619053788569.jpg"></p>
<p>index.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          redirect: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          component: HomeNews</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          component: HomeMessage</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="2-4-vue-router参数传递"><a href="#2-4-vue-router参数传递" class="headerlink" title="2.4. vue-router参数传递"></a>2.4. vue-router参数传递</h4><p>profile -&gt; 档案（用于‘我的’的用户界面）</p>
<p>准备工作：</p>
<ol>
<li>创建新的组件Profile.vue</li>
<li>配置路由映射</li>
<li>添加跳转的<router-link></router-link></li>
</ol>
<p>传递参数类型：</p>
<ol>
<li><p>params的类型</p>
<ol>
<li>配置动态路由：/router/:id</li>
<li>传递的方式：在path后面跟上对应的值</li>
<li>传递后形成的路径：/router/123,/router/abc</li>
</ol>
</li>
<li><p>query</p>
<ol>
<li>配置路由/router普通配置</li>
<li>传递的方式：对象中使用query的key作为传递方式</li>
<li>传递后形成的路径：/router?id=123, /router?id=abc</li>
</ol>
</li>
<li><p>URL:</p>
<ul>
<li><p>协议://主机:端口/路径?查询#片段哈希值</p>
</li>
<li><p>scheme://localhost:portt/path?query#fragment</p>
</li>
</ul>
<p>所有的组件都继承着vue类的原型</p>
</li>
</ol>
<img src="/2021/03/20/vueDay4/$route%E5%92%8C$router%E6%98%AF%E6%9C%89%E5%8C%BA%E5%88%AB%E7%9A%84-1619053796692.jpg" alt="$route和$router是有区别的">

<h4 id="2-5-vue-router导航守卫"><a href="#2-5-vue-router导航守卫" class="headerlink" title="2.5. vue-router导航守卫"></a>2.5. vue-router导航守卫</h4><ul>
<li>全局导航守卫</li>
<li>路由独享守卫</li>
<li>组件类守卫</li>
</ul>
<img src="/2021/03/20/vueDay4/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1619053800628.webp">

<p>生命周期函数：</p>
<ul>
<li>init lifecycle</li>
<li>beforeCreates如果有的话回调</li>
<li>init 响应式等其他东西</li>
<li>created(){}-&gt;创建组件时</li>
<li>挂载el、template</li>
<li>beforemounted 创建vm替换el</li>
<li>mounter(){} -&gt;template挂载到组件时<ul>
<li>做响应式检测回调beforeUpdate</li>
<li>重新渲染vdom,然后patch打补丁</li>
</ul>
</li>
<li>updated(){} -&gt;界面刷新时</li>
<li>beforeDestory后做一些回收的操作</li>
<li>destroyed(){}-&gt;销毁</li>
</ul>
<p>meta：元数据-&gt;描述数据的数据</p>
<p>metaclass元类可以创建类对象，接着创建实例对象</p>
<img src="/2021/03/20/vueDay4/%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB%E7%9A%84%E4%BD%BF%E7%94%A8-1619053814326.jpg">

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关信息</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import Home from &#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">// import About from &quot;../components/About&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HomeNews = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HomeNews&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HomeMessage = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HomeMessage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/About&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Profile = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Profile&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 通过VUe.use(插件)，安装插件</span></span><br><span class="line"><span class="comment">// 2. 创建VueRouter对象</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">// 配置路由和组件之间的映射关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// redirect重定向</span></span><br><span class="line">    redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        component: HomeNews</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        component: HomeMessage</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    component: User,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;用户&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    component: Profile,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;档案&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 3. 将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  linkActiveClass: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导航守卫</span></span><br><span class="line"><span class="comment">// 全局导航</span></span><br><span class="line"><span class="comment">// 前置守卫(guard)</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 从from跳转到to</span></span><br><span class="line">  <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;++++&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 后置钩子(hook)</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



<h4 id="2-6-keep-alive"><a href="#2-6-keep-alive" class="headerlink" title="2.6. keep-alive"></a>2.6. keep-alive</h4><ul>
<li>keep-alie是Wue内置的一个组件,可以使被包含的组件保留状态,或避免重新渲染<ul>
<li>它们有两个非常重要的属性:<ul>
<li>include-字符串或正则表达,只有匹配的组件会被缓存</li>
<li>exclude-字符串或正则表达式,任问匹配的组件都不会被缓存</li>
</ul>
</li>
</ul>
</li>
<li>router-view也是一个组件,如果直接被包在keep-aive里面,所有路径匹配到的视图组件都会被缓存</li>
<li>在keep-alive下才能使用activated/deactived这两个函数</li>
<li>(不常用)首页中使用path属性记录离开时的路径，在beforeRouteLeave中记录</li>
</ul>
<p>App.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">   &lt;router-view&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;你好啊&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#39;home created&#39;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&#39;home destroyed&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  activated()&#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(&#39;activated&#39;)</span><br><span class="line">    this.$router.push(this.path);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">    console.log(this.$router.path);</span><br><span class="line">    this.path &#x3D; this.$route.path;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-TabBar的封装过程"><a href="#2-9-TabBar的封装过程" class="headerlink" title="2.9. TabBar的封装过程"></a>2.9. TabBar的封装过程</h4><ol>
<li><p>如果在下方有一个单独的 TabBar组件,你如何封装</p>
<ul>
<li>自定义 Tabbar组件,在APP中使用</li>
<li>让 TabBar出于底部,并且设置相关的样式</li>
</ul>
</li>
<li><p>TabBar中显示的内容由外界决定</p>
</li>
</ol>
<ul>
<li>定义插槽</li>
<li>fex布局平分 TabBar</li>
</ul>
<ol start="3">
<li>自定义 TabBarlten,可以传入图片和文字</li>
</ol>
<ul>
<li>定义 TabBarltem,并且定义两个插槽:图片、文字。</li>
<li>给两个插槽外层包装div,用于设置样式</li>
<li>填充插槽,实现底部 TabBar的效果</li>
</ul>
<ol start="4">
<li>传入高亮图片</li>
</ol>
<ul>
<li>定义另外一个插槽,插入 active-icon的数据</li>
<li>定义一个变量 inActive,通过 v-show来决定是否显示对应的icon</li>
</ul>
<ol start="5">
<li>TabBarlten绑定路由数据</li>
</ol>
<ul>
<li>安装路由 T npm install vue-router-save</li>
<li>完成 router/ ndex jsf的内容,以及创建对应的组件</li>
<li> main s中注册 router</li>
<li>APP中加入&lt; router-view&gt;组件</li>
</ul>
<ol start="6">
<li>点击item跳转到对应路由,并且动态决定 inActive</li>
</ol>
<ul>
<li>监听tem的点击,通过this. Router. replace0替换路由路径</li>
<li>通过this. Route path. indexof( this link!==-1来判断是否是 active</li>
</ul>
<ol start="7">
<li>动态计算 active样式</li>
</ol>
<ul>
<li>封装新的计算属性: this inActive? color:’red}:</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo使用技巧</title>
    <url>/2021/02/22/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>切换主题报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">extends</span> <span class="string">&#x27;_layout.swig&#x27;</span> %&#125; &#123;% <span class="keyword">import</span> <span class="string">&#x27;_macro/post.swig&#x27;</span> <span class="keyword">as</span> post_template %&#125; &#123;% <span class="keyword">import</span> <span class="string">&#x27;_macro/sidebar.swig&#x27;</span> <span class="keyword">as</span> sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% <span class="keyword">if</span> theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125; &#123;% <span class="keyword">if</span> is_home() %&#125;page-home&#123;% endif -%&#125; &#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> page.posts %&#125; &#123;&#123; post_template.render(post, <span class="literal">true</span>) &#125;&#125; &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% include <span class="string">&#x27;_partials/pagination.swig&#x27;</span> %&#125; &#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(<span class="literal">false</span>) &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>





<p>转载自： <a href="https://inertia42.com/tips/tipsofhexo/">https://inertia42.com/tips/tipsofhexo/</a></p>
<h2 id="Hexo添加阅读全文标签"><a href="#Hexo添加阅读全文标签" class="headerlink" title="Hexo添加阅读全文标签"></a>Hexo添加阅读全文标签</h2><p>在文章中添加<code>&lt;!--more--&gt;</code>标签可以使文章显示摘要和阅读全文按钮</p>
<h2 id="Hexo中的Markdown"><a href="#Hexo中的Markdown" class="headerlink" title="Hexo中的Markdown"></a>Hexo中的Markdown</h2><p>Hexo支持GitHub Flavored Markdown语法</p>
<h2 id="在首页隐藏某些特定文章"><a href="#在首页隐藏某些特定文章" class="headerlink" title="在首页隐藏某些特定文章"></a>在首页隐藏某些特定文章</h2><p>该方法取自<a href="https://www.jianshu.com/p/79fe9fb9dfa0">淡之梦的文章</a></p>
<p>在hexo安装目录下找到\theme\next\layout\index.swig,打开后会看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;_layout.swig&#39; %&#125;</span><br><span class="line">&#123;% import &#39;_macro&#x2F;post.swig&#39; as post_template %&#125;</span><br><span class="line">&#123;% import &#39;_macro&#x2F;sidebar.swig&#39; as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;% if theme.index_with_subtitle and subtitle %&#125; – &#123;&#123; subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id&#x3D;&quot;posts&quot; class&#x3D;&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">	&#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>将其中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id&#x3D;&quot;posts&quot; class&#x3D;&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">        &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id&#x3D;&quot;posts&quot; class&#x3D;&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">        &#123;% if post.notshow !&#x3D; true %&#125;</span><br><span class="line">            &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>之后在博文头部使用<code>notshow</code>参数隐藏文章，加入<code>notshow: true</code>即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: title</span><br><span class="line">date: 2018-06-12 11:45:43</span><br><span class="line">tags: </span><br><span class="line">notshow: true</span><br></pre></td></tr></table></figure>



<h2 id="在文章底部显示copyright信息"><a href="#在文章底部显示copyright信息" class="headerlink" title="在文章底部显示copyright信息"></a>在文章底部显示copyright信息</h2><p>以<code>next</code>主题为例，在<strong>主题</strong>配置文件中找到以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: false</span><br><span class="line">  license: &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;&quot; rel&#x3D;&quot;external nofollow&quot; target&#x3D;&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>



<p>将其中的<code>false</code>改为<code>true</code>，然后在<strong>博客</strong>配置文件中找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;yoursite.com</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意，如果你的博客使用了https加密，请把url改为<code>https://yoursite.com</code><br>将其中的地址改为自己的博客地址即可。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>品优购</title>
    <url>/2021/04/20/xiangmu/</url>
    <content><![CDATA[<p>项目名称：品优购</p>
<p>项目描述：品优购是一个电商网站，主要完成PC端首页、列表页、注册页面的制作</p>
<p>开发工具：VScode、Photoshop(fw)、主流浏览器(以Chrome浏览器为主)</p>
<p>技术栈：</p>
<ul>
<li>利用HTML5 + CSS3手动布局，大量使用H5新增标签和样式</li>
<li>采取结构与样式相分离，模块化开发</li>
<li>代码规范</li>
</ul>
<p>模块化开发：</p>
<ul>
<li>样式和结构重复出现，单独做成一个模块</li>
<li>例如common.css</li>
<li>重复使用、修改方便</li>
</ul>
<p>项目名称：黑马面面布局开发</p>
<p>项目描述：移动端页面开发流程、掌握移动端常见布局思路</p>
<p>技术栈：</p>
<ul>
<li>弹性盒子 + rem + LESS </li>
<li>flex + rem + + flexible.js +  LESS </li>
</ul>
<ol start="4">
<li>最小适配设备为iphone5 320px  最大设配设备为iphone8plus</li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>html css</category>
      </categories>
      <tags>
        <tag>html css</tag>
      </tags>
  </entry>
  <entry>
    <title>组件化思想</title>
    <url>/2021/01/14/zujianhua/</url>
    <content><![CDATA[<h5 id="数据结构：数组、堆、栈、链表、树结构"><a href="#数据结构：数组、堆、栈、链表、树结构" class="headerlink" title="数据结构：数组、堆、栈、链表、树结构"></a>数据结构：数组、堆、栈、链表、树结构</h5><h5 id="组件化思想："><a href="#组件化思想：" class="headerlink" title="组件化思想："></a>组件化思想：</h5><ul>
<li>提供了一种抽象，让我们可以开发出独立可复用的小组件来构造我们的应用</li>
<li>任何应用都会被抽象成一颗组件树</li>
</ul>
<h5 id="注册组件的基本步骤："><a href="#注册组件的基本步骤：" class="headerlink" title="注册组件的基本步骤："></a>注册组件的基本步骤：</h5><ul>
<li>创建组件构造器</li>
<li>注册组件</li>
<li>使用组件</li>
</ul>
<p>Vue CLI 3.x(构造Vue的项目)</p>
<p>Vue 2.5.21 -&gt;v2.6.12</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Day 01</title>
    <url>/2021/01/14/vueDay1/</url>
    <content><![CDATA[<p>Vue Day 01</p>
<hr>
<h3 id="一、邂逅Vuejs"><a href="#一、邂逅Vuejs" class="headerlink" title="一、邂逅Vuejs"></a>一、邂逅Vuejs</h3><h4 id="1-1-认识Vuejs"><a href="#1-1-认识Vuejs" class="headerlink" title="1.1. 认识Vuejs"></a>1.1. 认识Vuejs</h4><ul>
<li>为什么要学习Vuejs</li>
<li>Vue的读音</li>
<li>Vue的渐进式</li>
<li>Vue的特点</li>
</ul>
<h4 id="1-2-安装Vue"><a href="#1-2-安装Vue" class="headerlink" title="1.2. 安装Vue"></a>1.2. 安装Vue</h4><ul>
<li>CDN引入</li>
<li>下载引入</li>
<li>npm安装</li>
</ul>
<h4 id="1-3-Vue的初体验"><a href="#1-3-Vue的初体验" class="headerlink" title="1.3. Vue的初体验"></a>1.3. Vue的初体验</h4><ul>
<li>Hello Vuejs<ul>
<li>mustache-体验vue响应式</li>
</ul>
</li>
<li>Vue列表展示<ul>
<li>v-for</li>
<li>后面给数组追加元素的时候，新的元素也可以在界面中渲染出来</li>
</ul>
</li>
<li>Vue计数器小案例<ul>
<li>事件监听：click-methods</li>
</ul>
</li>
</ul>
<h4 id="1-4-Vue-中的MVVM"><a href="#1-4-Vue-中的MVVM" class="headerlink" title="1.4. Vue 中的MVVM"></a>1.4. Vue 中的MVVM</h4><h4 id="1-5-创建Vue-时，-options-可以放哪些东西"><a href="#1-5-创建Vue-时，-options-可以放哪些东西" class="headerlink" title="1.5. 创建Vue 时， options 可以放哪些东西"></a>1.5. 创建Vue 时， options 可以放哪些东西</h4><ul>
<li>el:</li>
<li>data:</li>
<li>methods:</li>
<li>生命周期函数</li>
</ul>
<h2 id="二、-插值语法"><a href="#二、-插值语法" class="headerlink" title="二、 插值语法"></a>二、 插值语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mustache语法</span><br><span class="line">v- once</span><br><span class="line">v-html</span><br><span class="line">v-text</span><br><span class="line">v-pre:&#123;&#123;&#125;&#125;</span><br><span class="line">v-cloak: 斗篷</span><br></pre></td></tr></table></figure>

<h2 id="三、v-bind"><a href="#三、v-bind" class="headerlink" title="三、v-bind"></a>三、v-bind</h2><h3 id="3-1-v-bind绑定基本属性"><a href="#3-1-v-bind绑定基本属性" class="headerlink" title="3.1. v-bind绑定基本属性"></a>3.1. v-bind绑定基本属性</h3><ul>
<li>v-bind:src</li>
<li>:href</li>
</ul>
<h3 id="3-2-v-bind动态绑定class"><a href="#3-2-v-bind动态绑定class" class="headerlink" title="3.2. v-bind动态绑定class"></a>3.2. v-bind动态绑定class</h3><ul>
<li>对象语法：作业：class=’{类名: boolean}’</li>
<li>数组语法：</li>
</ul>
<h3 id="3-3-v-bind动态绑定style"><a href="#3-3-v-bind动态绑定style" class="headerlink" title="3.3. v-bind动态绑定style"></a>3.3. v-bind动态绑定style</h3><ul>
<li>对象属性：</li>
<li>数组语法：</li>
</ul>
<h2 id="四、计算属性"><a href="#四、计算属性" class="headerlink" title="四、计算属性"></a>四、计算属性</h2><ul>
<li>案例一：firstName + lastName</li>
<li>案例二： books -&gt;price</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用技巧</title>
    <url>/2021/02/22/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>转载自： <a href="https://inertia42.com/tips/pythontips/">https://inertia42.com/tips/pythontips/</a></p>
<h2 id="在没有GUI的情况下使用matplotlib"><a href="#在没有GUI的情况下使用matplotlib" class="headerlink" title="在没有GUI的情况下使用matplotlib"></a>在没有GUI的情况下使用matplotlib</h2><p>在vps上运行调用matplotlib的python脚本时需在<code>import matplotlib.pyplot</code>前加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib as mpl</span><br><span class="line">mpl.use(&#39;Agg&#39;)</span><br></pre></td></tr></table></figure>



<p>一定要加在<code>import matplotlib.pyplot</code>前</p>
<h2 id="给pip更换源"><a href="#给pip更换源" class="headerlink" title="给pip更换源"></a>给pip更换源</h2><p>将windows下的pip源换为清华的源</p>
<p>只需要在user文件夹下新建pip文件夹，并在其中新建<code>pip.ini</code>文件，并写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>



<p>即可</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖项目</title>
    <url>/2021/04/20/%E5%A4%96%E5%8D%96%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<p>1.基于 Vue 的最新版本； </p>
<p>2.项目是关于外卖业务的前后台分离Web App，功能模块包含商家, 商品, 购物车, 用户管理等多个模块； </p>
<p>3.后台应用技术架构为: Node + Express + Mongodb + Mongoose；</p>
<p>4.前台应用技术架构为: vue + vuex + vue-router + webpack + ES6； 5.采用模块化、组件化、工程化的模式开发；</p>
<p>项目描述：一个外卖Web App(SPA)前后台分离项目，包括商家，商品，购物车，用户等多个子模块；使用Vue全家桶+ES6+Webpack等，采用模块化、组件化、工程化的模式开发</p>
<p>技术选型：</p>
<ul>
<li>前台数据处理、交互、组件化：<ul>
<li>vue全家桶、技术栈：<ul>
<li>vue</li>
<li>vue-router(路由)</li>
<li>vuex(管理状态)</li>
<li>mint-ui(ui组件库)</li>
<li>vue-lazyload(懒家，实现图片惰加载)</li>
</ul>
</li>
<li>滑动库：<ul>
<li>vue-scroller(插件)</li>
<li>better-scroll</li>
</ul>
</li>
<li>日期处理<ul>
<li>swiper(滑动，做轮播)</li>
<li>monent</li>
<li>date-fns</li>
</ul>
</li>
</ul>
</li>
<li>前后台交互<ul>
<li>mock数据：mockjs(模拟)</li>
<li>接口测试：postman</li>
<li>ajax请求<ul>
<li>vue-resource</li>
<li>axios</li>
</ul>
</li>
</ul>
</li>
<li>模块化<ul>
<li>ES6</li>
<li>babel</li>
</ul>
</li>
<li>项目构建、工程化<ul>
<li>webpack(项目构建)</li>
<li>vue-cli(创建工程化项目)</li>
<li>eslint(检查语法是否规范)</li>
</ul>
</li>
<li>css预编译器<ul>
<li>stylus</li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>heimamm</title>
    <url>/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="黑马面面布局开发"><a href="#黑马面面布局开发" class="headerlink" title="黑马面面布局开发"></a>黑马面面布局开发</h2><h3 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h3><ol>
<li>了解移动端页面开发流程</li>
<li>掌握移动端常见布局思路</li>
</ol>
<h4 id="1-1-技术方案"><a href="#1-1-技术方案" class="headerlink" title="1.1  技术方案"></a>1.1  技术方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 弹性盒子 + rem + LESS </span><br><span class="line"><span class="number">4</span>. 最小适配设备为iphone5 <span class="number">320px</span>  最大设配设备为iphone8plus(ipad能正常查看内容即可)</span><br></pre></td></tr></table></figure>

<h4 id="1-2-代码规范"><a href="#1-2-代码规范" class="headerlink" title="1.2 代码规范"></a>1.2 代码规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 类名语义化,尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用下划线“_” 连接</span><br><span class="line"><span class="number">2</span>. 类名嵌套层次尽量不超过三层</span><br><span class="line"><span class="number">3</span>. 尽量避免直接使用元素选择器</span><br><span class="line"><span class="number">4</span>. 属性书写顺序</span><br><span class="line">   布局定位属性：<span class="attribute">display</span> / <span class="attribute">position</span> / <span class="attribute">float</span> / <span class="attribute">clear</span> / <span class="attribute">visibility</span> / <span class="attribute">overflow</span></span><br><span class="line">   尺寸属性：<span class="attribute">width</span> / <span class="attribute">height</span> / <span class="attribute">margin</span> / <span class="attribute">padding</span> / <span class="attribute">border</span> / <span class="attribute">background</span></span><br><span class="line">   文本属性：<span class="attribute">color</span> / <span class="attribute">font</span> / <span class="attribute">text-decoration</span> / <span class="attribute">text-align</span> / <span class="attribute">vertical-align</span></span><br><span class="line">   其他属性（CSS3）：<span class="attribute">content</span> / <span class="attribute">cursor</span> / <span class="attribute">border-radius</span> / <span class="attribute">box-shadow</span> / <span class="attribute">text-shadow</span></span><br><span class="line"><span class="number">5</span>. 避免使用id选择器</span><br><span class="line"><span class="number">6</span>. 避免使用通配符*和!important</span><br></pre></td></tr></table></figure>

<h4 id="1-2-目录规范"><a href="#1-2-目录规范" class="headerlink" title="1.2 目录规范"></a>1.2 目录规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">项目文件夹：heimamm</span><br><span class="line">	样式文件夹：css</span><br><span class="line">	业务类图片文件夹：images</span><br><span class="line">	样式类图片文件夹： icons</span><br><span class="line">	字体类文件夹： fonts</span><br></pre></td></tr></table></figure>

<h3 id="二、流程开发"><a href="#二、流程开发" class="headerlink" title="二、流程开发"></a>二、流程开发</h3><h4 id="2-1-蓝湖-摹客协作平台"><a href="#2-1-蓝湖-摹客协作平台" class="headerlink" title="2.1 蓝湖/摹客协作平台"></a>2.1 蓝湖/摹客协作平台</h4><ul>
<li>UI设计师 psd效果图完成后，会上传到蓝湖//摹客里面，同时会拉前端工程师进入开发</li>
<li>大部分情况下，UI会把图片按照前端设计要求给切好</li>
<li>UI设计师 上传蓝湖到或者/摹客（了解）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. /摹客官网地址： https://www.mockplus.cn/  注册一个账号</span><br><span class="line"><span class="number">2</span>. 下载moke  ps插件 </span><br><span class="line"><span class="number">3</span>. PS 安装/摹客/蓝湖插件</span><br><span class="line"><span class="number">3</span>. 打开PS/摹客/蓝湖插件</span><br><span class="line"><span class="number">4</span>. 上传（需要切图，需要先标注切图）</span><br><span class="line"><span class="number">5</span>. 查看项目</span><br><span class="line"><span class="number">6</span>. 邀请成员进入（分享按钮，链接地址）</span><br></pre></td></tr></table></figure>

<ul>
<li>前端设计师可以直接/摹客/蓝湖测量取值</li>
</ul>
<h4 id="2-2-适配方案"><a href="#2-2-适配方案" class="headerlink" title="2.2 适配方案"></a>2.2 适配方案</h4><ul>
<li>flex 布局  </li>
<li>百分比布局</li>
<li>rem布局</li>
<li>vw/vh布局</li>
<li>响应式布局</li>
<li>本次案例  flex + rem + + flexible.js +  LESS   </li>
</ul>
<h4 id="2-3-初始化文件"><a href="#2-3-初始化文件" class="headerlink" title="2.3  初始化文件"></a>2.3  初始化文件</h4><ul>
<li><p>引入  normalize.css</p>
</li>
<li><p>less 中 初始化body样式</p>
</li>
<li><p>约束范围</p>
</li>
<li><p>~~~css<br>@media screen and (min-width: 750px) {<br>  html {</p>
<pre><code>font-size: 37.5px !important;
</code></pre>
<p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2.4 布局模块</span><br><span class="line"></span><br><span class="line">1. 头部模块  .header    高度为 80px </span><br><span class="line"></span><br><span class="line">2. nav 模块制作  多用 flex</span><br><span class="line"></span><br><span class="line">3. 充电学习 阴影</span><br><span class="line"></span><br><span class="line">   ~~~css</span><br><span class="line">   box-shadow: 0 0px 10px rgba(0, 0, 0, 0.1)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-5-swiper-插件使用"><a href="#2-5-swiper-插件使用" class="headerlink" title="2.5 swiper 插件使用"></a>2.5 swiper 插件使用</h4><p>官网地址：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p>
<ul>
<li>下载需要的css和js文件  html页面中 引入相关文件</li>
<li>官网找到类似案例，复制html结构，css样式  js 语法</li>
<li> 根据需求定制修改模块</li>
</ul>
<h4 id="2-6-图标字体上传下载"><a href="#2-6-图标字体上传下载" class="headerlink" title="2.6 图标字体上传下载"></a>2.6 图标字体上传下载</h4><p>上传步骤：</p>
<ol>
<li><p>让UI美工准备好 图标字体（必须是svg格式）</p>
</li>
<li><p>点上传按钮（保留颜色并提交）</p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593317258207.png" alt="59331725820"></p>
</li>
<li><p>生成之后加入购物车即可</p>
</li>
<li><p>点击下载 — 下载代码</p>
</li>
</ol>
<p>小技巧：  如何批量下载全部字体图标呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.icon-cover&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = span.length; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(span[i].querySelector(<span class="string">&#x27;span&#x27;</span>).click());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-7-上传码云并发布部署静态网站"><a href="#2-7-上传码云并发布部署静态网站" class="headerlink" title="2.7  上传码云并发布部署静态网站"></a>2.7  上传码云并发布部署静态网站</h4><p>准备工作：  需要下载git软件    需要码云注册账号</p>
<p>git 可以把我们的本地网站提交上传到远程仓库（码云 gitee）里面    类似以前的   ftp  </p>
<p>码云  就是远程仓库， 类似服务器 </p>
<ol>
<li><p>码云创建新的仓库。   heimamm  </p>
</li>
<li><p>利用git 提交 把本地网站提交到 码云新建的仓库里面</p>
<ul>
<li><p>在网站根目录右键– Git Bash Here</p>
</li>
<li><p>如果是第一次利用git提交，请配置好全局选项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&quot;你的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始化仓库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li><p>把本地文件放到暂存区</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li>
<li><p>把本地文件放到本地仓库里面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;提交黑马面面网站&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>链接远程仓库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote add origin 你新建的仓库地址</span><br></pre></td></tr></table></figure></li>
<li><p>把本地仓库的文件推送到远程仓库 push</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>码云部署发布静态网站</p>
<ul>
<li><p>在当前仓库中，点击  “服务”   菜单 </p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336007530.png" alt="59333600753"></p>
</li>
<li><p>选择 Gitee Pages</p>
<p> <img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336043016.png" alt="59333604301"></p>
</li>
<li><p>选择 “启动” 按钮</p>
<p> <img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336091814.png" alt="59333609181"></p>
</li>
<li><p>稍等之后，会拿到地址，就可以利用这个地址来预览网页了<img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336164295.png" alt="59333616429"></p>
</li>
<li><p>当然你也可以利用  草料二维码 生成二维码    <a href="https://cli.im/">https://cli.im/</a></p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336349811.png" alt="59333634981"></p>
</li>
</ul>
</li>
</ol>
<p>最后： 如果提交网站，你不愿意用git 提交， 可以直接找到仓库，里面有文件，选择上传本地文件即可。</p>
<p> <img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336426566.png" alt="59333642656"></p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336450481.png" alt="59333645048"></p>
<p>但是，1个小时内，只能上传 20个以内的文件， 前端人员，git必备技能</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>html css</category>
      </categories>
      <tags>
        <tag>flex rem less</tag>
      </tags>
  </entry>
  <entry>
    <title>Immutable.js了解一下？(转载)</title>
    <url>/2021/08/06/Immutable.js%E4%BA%86%E8%A7%A3%E4%B8%80%E4%B8%8B%EF%BC%9F(%E8%BD%AC%E8%BD%BD)/</url>
    <content><![CDATA[<h1 id><a href="#" class="headerlink" title></a></h1><p><img src="https://cdn2.jianshu.io/assets/default_avatar/10-e691107df16746d4a9f3fe9496fd1848.jpg" alt="https://cdn2.jianshu.io/assets/default_avatar/10-e691107df16746d4a9f3fe9496fd1848.jpg"></p>
<p>**<a href="https://www.jianshu.com/u/4f2ac11cee5f">桂圆_noble</a>**关注</p>
<p>4March 29, 2018 4:36 PM字数 3,214阅读 43,215</p>
<p>本篇只是对Immutable.js的简单介绍，后续会继续分享其具体实践应用。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2165169-34b1e9d1e9c03fe3.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1050/format/webp" alt="https://upload-images.jianshu.io/upload_images/2165169-34b1e9d1e9c03fe3.jpeg?imageMogr2/auto-orient/strip|imageView2/2/w/1050/format/webp"></p>
<p>immutable.jpeg</p>
<h1 id="什么是Immutable-Data？"><a href="#什么是Immutable-Data？" class="headerlink" title="什么是Immutable Data？"></a><strong>什么是Immutable Data？</strong></h1><blockquote>
<p>Immutable data encourages pure functions (data-in, data-out) and lends itself to much simpler application development and enabling techniques from functional programming such as lazy evaluation.– 官方文档对其描述</p>
</blockquote>
<p>Immutable Data 就是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。Immutable 实现的原理是 <strong>Persistent Data Structure（持久化数据结构）</strong>，也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变。同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了<a href="https://link.jianshu.com/?t=https://zhuanlan.zhihu.com/p/27133830?group_id=851585269567213568">Structural Sharing（结构共享）</a>，即如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享。请看下面动画：</p>
<p><a href="https://upload-images.jianshu.io/upload_images/2165169-cebb05bca02f1772?imageMogr2/auto-orient/strip%7CimageView2/2/w/613/format/webp">https://upload-images.jianshu.io/upload_images/2165169-cebb05bca02f1772?imageMogr2/auto-orient/strip|imageView2/2/w/613/format/webp</a></p>
<p>结构共享</p>
<h1 id="Immutable的优缺点一览"><a href="#Immutable的优缺点一览" class="headerlink" title="Immutable的优缺点一览"></a><strong>Immutable的优缺点一览</strong></h1><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a><strong>优点</strong></h3><h3 id="1-降低-Mutable-带来的复杂度"><a href="#1-降低-Mutable-带来的复杂度" class="headerlink" title="1. 降低 Mutable 带来的复杂度"></a><strong>1. 降低 Mutable 带来的复杂度</strong></h3><p>共享的可变状态是万恶之源，举个简单的例子就是js中的引用赋值：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var obj &#x3D; &#123; a: 1 &#125;; var copy_obj &#x3D; obj; copy_obj.a &#x3D; 2; console.log(obj.a); &#x2F;&#x2F; 2</span><br></pre></td></tr></table></figure>

<p>引用赋值虽然可以节省内存，但当应用复杂之后，可变状态往往会变成噩梦，通常一般的做法是使用shallowCopy或者deepCopy来避免被修改，但这样造成了CPU和内存的消耗，不过Immulate可以很好地解决这些问题。</p>
<h3 id="2-节省内存空间"><a href="#2-节省内存空间" class="headerlink" title="2. 节省内存空间"></a><strong>2. 节省内存空间</strong></h3><p>上面提到了结构共享，Immutable.js 使用这种方式会尽量复用内存，甚至以前使用的对象也可以再次被复用。没有被引用的对象会被垃圾回收。</p>
<p>`import { Map } from ‘immutable’; let a = Map({ select: ‘users’, filter: Map({ name: ‘Cam’ }) }) let b = a.set(‘select’, ‘people’);</p>
<p>a === b; // false a.get(‘filter’) === b.get(‘filter’); // true`</p>
<p>上面 a 和 b 共享了没有变化的 filter 节点。</p>
<h3 id="3-Undo-Redo，Copy-Paste，随意穿越！"><a href="#3-Undo-Redo，Copy-Paste，随意穿越！" class="headerlink" title="3. Undo/Redo，Copy/Paste，随意穿越！"></a><strong>3. Undo/Redo，Copy/Paste，随意穿越！</strong></h3><p>因为每次数据都是不一样的，只要把这些数据放到一个数组里储存起来，想回退到哪里就拿出对应数据即可，很容易开发出撤销重做这种功能。</p>
<h3 id="4-拥抱函数式编程"><a href="#4-拥抱函数式编程" class="headerlink" title="4. 拥抱函数式编程"></a><strong>4. 拥抱函数式编程</strong></h3><p>Immutable（持久化数据结构）本身就是函数式编程中的概念。<a href="https://link.jianshu.com/?t=http://www.ruanyifeng.com/blog/2012/04/functional_programming.html">函数式编程</a>关心数据的映射，命令式编程关心解决问题的步骤，纯函数式编程比面向对象更适用于前端开发。因为只要输入一致，输出必然一致，这样开发的组件更易于调试和组装。</p>
<h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a><strong>缺点</strong></h3><p>抛开学习成本和额外引入的资源文件这些不说，我们来看看使用过程中有哪些不爽的地方。</p>
<h3 id="1-容易与原生对象混"><a href="#1-容易与原生对象混" class="headerlink" title="1. 容易与原生对象混"></a><strong>1. 容易与原生对象混</strong></h3><p>主要是Immutable的API设计的和原生对象类似，容易混淆操作。例如其中Map和List的操作：</p>
<p>`// Immutable const map = Map({ a: 1, b: 2 }); const list = List([1,2,3]);</p>
<p>// 原生js const obj = { a: 1, b: 2 }; const arry = [1,2,3];</p>
<p>// 取值方式对比 console.log(map.get(‘a’)); console.log(list.get(0)); console.log(obj.a); console.log(arry[0]);`</p>
<h1 id="Immutable-js简介"><a href="#Immutable-js简介" class="headerlink" title="Immutable.js简介"></a><strong>Immutable.js简介</strong></h1><p>Facebook 工程师 Lee Byron 花费 3 年时间打造，与 React 同期出现，但没有被默认放到 React 工具集里（React 提供了简化的 Helper）。它内部实现了一套完整的 Persistent Data Structure，还有很多易用的数据类型。像 Collection、List、Map、Set、Record、Seq。有非常全面的map、filter、groupBy、reduce``find函数式操作方法。同时 API 也尽量与 Object 或 Array 类似。</p>
<p><img src="https://upload-images.jianshu.io/upload_images/2165169-1fe7e3f2d6def902.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/615/format/webp" alt="https://upload-images.jianshu.io/upload_images/2165169-1fe7e3f2d6def902.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/615/format/webp"></p>
<p>immutablejs-getters-and-setters-everywhere.jpg</p>
<h1 id="Immutable-js-的几种数据类型"><a href="#Immutable-js-的几种数据类型" class="headerlink" title="Immutable.js 的几种数据类型"></a><strong>Immutable.js 的几种数据类型</strong></h1><blockquote>
<p>List: 有序索引集，类似JavaScript中的Array。Map: 无序索引集，类似JavaScript中的Object。OrderedMap: 有序的Map，根据数据的set()进行排序。Set: 没有重复值的集合。OrderedSet: 有序的Set，根据数据的add进行排序。Stack: 有序集合，支持使用unshift()和shift()添加和删除。Record: 一个用于生成Record实例的类。类似于JavaScript的Object，但是只接收特定字符串为key，具有默认值。Seq: 序列，但是可能不能由具体的数据结构支持。Collection: 是构建所有数据结构的基类，不可以直接构建。</p>
</blockquote>
<p>用的最多就是List和Map，所以在这里主要介绍这两种数据类型的API。</p>
<h1 id="Immutable-js-的常用API"><a href="#Immutable-js-的常用API" class="headerlink" title="Immutable.js 的常用API"></a><strong>Immutable.js 的常用API</strong></h1><h3 id="fromJS"><a href="#fromJS" class="headerlink" title="fromJS()"></a><strong>fromJS()</strong></h3><p>作用：将一个js数据转换为Immutable类型的数据用法：<code>fromJS(value, converter)</code>简介：value是要转变的数据，converter是要做的操作。第二个参数可不填，默认情况会将数组准换为List类型，将对象转换为Map类型，其余不做操作</p>
<p>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;const obj &#x3D; Immutable.fromJS(&#123;a:&#39;123&#39;,b:&#39;234&#39;&#125;,function (key, value, path) &#123;</span><br><span class="line">    console.log(key, value, path)</span><br><span class="line">    return isIndexed(value) ? value.toList() : value.toOrderedMap())</span><br><span class="line">&#125;)&#96;</span><br></pre></td></tr></table></figure>

<h3 id="toJS"><a href="#toJS" class="headerlink" title="toJS()"></a><strong>toJS()</strong></h3><p>作用：将一个Immutable数据转换为JS类型的数据用法：<code>value.toJS()</code></p>
<h3 id="is"><a href="#is" class="headerlink" title="is()"></a><strong>is()</strong></h3><p>作用：对两个对象进行比较用法：<code>is(map1,map2)</code>简介：和js中对象的比较不同，在js中比较两个对象比较的是地址，但是在Immutable中比较的是这个对象hashCode和valueOf，只要两个对象的hashCode相等，值就是相同的，避免了深度遍历，提高了性能</p>
<p>代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import &#123; Map, is &#125; from &#39;immutable&#39; const map1 &#x3D; Map(&#123; a: 1, b: 1, c: 1 &#125;) const map2 &#x3D; Map(&#123; a: 1, b: 1, c: 1 &#125;) map1 &#x3D;&#x3D;&#x3D; map2 &#x2F;&#x2F;false Object.is(map1, map2) &#x2F;&#x2F; false is(map1, map2) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h3 id="List-和-Map"><a href="#List-和-Map" class="headerlink" title="List() 和 Map()"></a><strong>List() 和 Map()</strong></h3><p>作用：用来创建一个新的List/Map对象用法:</p>
<p>`//List Immutable.List(); // 空List Immutable.List([1, 2]);</p>
<p>//Map Immutable.Map(); // 空Map Immutable.Map({ a: ‘1’, b: ‘2’ });`</p>
<h3 id="List-isList-和-Map-isMap"><a href="#List-isList-和-Map-isMap" class="headerlink" title="List.isList() 和 Map.isMap()"></a><strong>List.isList() 和 Map.isMap()</strong></h3><p>作用：判断一个数据结构是不是List/Map类型用法：</p>
<p>`List.isList([]); // false List.isList(List()); // true</p>
<p>Map.isMap({}) // false Map.isMap(Map()) // true`</p>
<h3 id="size"><a href="#size" class="headerlink" title="size"></a><strong>size</strong></h3><p>作用：属性，获取List/Map的长度，等同于ImmutableData.count();</p>
<h3 id="get-、-getIn"><a href="#get-、-getIn" class="headerlink" title="get() 、 getIn()"></a><strong>get() 、 getIn()</strong></h3><p>作用：获取数据结构中的数据</p>
<p>`//获取List索引的元素 ImmutableData.get(0);</p>
<p>// 获取Map对应key的value ImmutableData.get(‘a’);</p>
<p>// 获取嵌套数组中的数据 ImmutableData.getIn([1, 2]);</p>
<p>// 获取嵌套map的数据 ImmutableData.getIn([‘a’, ‘b’]);`</p>
<h3 id="has-、-hasIn"><a href="#has-、-hasIn" class="headerlink" title="has() 、 hasIn()"></a><strong>has() 、 hasIn()</strong></h3><p>作用：判断是否存在某一个key用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).has(&#39;0&#39;); &#x2F;&#x2F;true Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).has(&#39;0&#39;); &#x2F;&#x2F;true Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).hasIn([3,&#39;b&#39;]) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>

<h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a><strong>includes()</strong></h3><p>作用：判断是否存在某一个value用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).includes(2); &#x2F;&#x2F;true Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).includes(&#39;2&#39;); &#x2F;&#x2F;false 不包含字符2 Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).includes(5); &#x2F;&#x2F;false Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).includes(&#123;a:4,b:5&#125;) &#x2F;&#x2F;false Immutable.fromJS([1,2,3,&#123;a:4,b:5&#125;]).includes(Immutable.fromJS(&#123;a:4,b:5&#125;)) &#x2F;&#x2F;true</span><br></pre></td></tr></table></figure>

<h3 id="first-、-last"><a href="#first-、-last" class="headerlink" title="first() 、 last()"></a><strong>first() 、 last()</strong></h3><p>作用：用来获取第一个元素或者最后一个元素，若没有则返回undefined代码：</p>
<p>`Immutable.fromJS([1,2,3,{a:4,b:5}]).first()//1 Immutable.fromJS([1,2,3,{a:4,b:5}]).last()//{a:4,b:5}</p>
<p>Immutable.fromJS({a:1,b:2,c:{d:3,e:4}}).first() //1 Immutable.fromJS({a:1,b:2,c:{d:3,e:4}}).first() //{d:3,e:4}`</p>
<p>数据修改注：这里对于数据的修改，是对原数据进行操作后的值赋值给一个新的数据，并不会对原数据进行修改，因为Immutable是不可变的数据类型。</p>
<h3 id="设置-set"><a href="#设置-set" class="headerlink" title="设置 set()"></a><strong>设置 set()</strong></h3><p>作用：设置第一层key、index的值用法：</p>
<p>`const originalList = List([ 0 ]); // List [ 0 ] originalList.set(1, 1); // List [ 0, 1 ] originalList.set(0, ‘overwritten’); // List [ “overwritten” ] originalList.set(2, 2); // List [ 0, undefined, 2 ]</p>
<p>List().set(50000, ‘value’).size; // 50001</p>
<p>const originalMap = Map() const newerMap = originalMap.set(‘key’, ‘value’) const newestMap = newerMap.set(‘key’, ‘newer value’)</p>
<p>originalMap // Map {} newerMap // Map { “key”: “value” } newestMap // Map { “key”: “newer value” }`</p>
<p>List在使用的时候，将index为number值设置为value。Map在使用的时候，将key的值设置为value。</p>
<p>在List中使用时，若传入的number为负数，则将index为size+index的值设置为value，例，若传入-1，则将size-1的值设为value。若传入的number的值超过了List的长度，则将List自动补全为传入的number的值，将number设置为value，其余用undefined补全。<strong>注：跟js中不同，List中不存在空位，[,,,],List中若没有值，则为undefined。</strong></p>
<h3 id="setIn"><a href="#setIn" class="headerlink" title="setIn()"></a><strong>setIn()</strong></h3><p>作用：设置深层结构中某属性的值用法：</p>
<p>`const originalMap = Map({ subObject: Map({ subKey: ‘subvalue’, subSubObject: Map({ subSubKey: ‘subSubValue’ }) }) })</p>
<p>const newMap = originalMap.setIn([‘subObject’, ‘subKey’], ‘ha ha!’) // Map { //   “subObject”: Map { //     “subKey”: “ha ha!”, //     “subSubObject”: Map { “subSubKey”: “subSubValue” } //   } // }</p>
<p>const newerMap = originalMap.setIn( [‘subObject’, ‘subSubObject’, ‘subSubKey’], ‘ha ha ha!’ ) // Map { //   “subObject”: Map { //     “subKey”: “subvalue”, //     “subSubObject”: Map { “subSubKey”: “ha ha ha!” } //   } // }`</p>
<p>用法与set()一样，只是第一个参数是一个数组，代表要设置的属性所在的位置</p>
<h3 id="删除-delete"><a href="#删除-delete" class="headerlink" title="删除 delete"></a><strong>删除 delete</strong></h3><p>作用：用来删除第一层结构中的属性用法：</p>
<p>`// List List([ 0, 1, 2, 3, 4 ]).delete(0); // List [ 1, 2, 3, 4 ]</p>
<p>// Map const originalMap = Map({ key: ‘value’, otherKey: ‘other value’ }) // Map { “key”: “value”, “otherKey”: “other value” } originalMap.delete(‘otherKey’) // Map { “key”: “value” }`</p>
<h3 id="deleteIn"><a href="#deleteIn" class="headerlink" title="deleteIn()"></a><strong>deleteIn()</strong></h3><p>用来删除深层数据，用法参考setIn</p>
<h3 id="deleteAll-Map独有，List没有"><a href="#deleteAll-Map独有，List没有" class="headerlink" title="deleteAll() (Map独有，List没有)"></a><strong>deleteAll() (Map独有，List没有)</strong></h3><p>作用：用来删除Map中的多个key用法：deleteAll(keys: Iterable<K>): this代码示例：</K></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const names &#x3D; Map(&#123; a: &quot;Aaron&quot;, b: &quot;Barry&quot;, c: &quot;Connor&quot; &#125;) names.deleteAll([ &#39;a&#39;, &#39;c&#39; ]) &#x2F;&#x2F; Map &#123; &quot;b&quot;: &quot;Barry&quot; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="更新-update"><a href="#更新-update" class="headerlink" title="更新 update()"></a><strong>更新 update()</strong></h3><p>作用：对对象中的某个属性进行更新，可对原数据进行相关操作用法：</p>
<p>`////List const list = List([ ‘a’, ‘b’, ‘c’ ]) const result = list.update(2, val =&gt; val.toUpperCase())</p>
<p>///Map const aMap = Map({ key: ‘value’ }) const newMap = aMap.update(‘key’, value =&gt; value + value)`</p>
<h3 id="updateIn"><a href="#updateIn" class="headerlink" title="updateIn()"></a><strong>updateIn()</strong></h3><p>用法参考setIn</p>
<h3 id="清除-clear"><a href="#清除-clear" class="headerlink" title="清除 clear()"></a><strong>清除 clear()</strong></h3><p>作用：清除所有数据用法：<code>clear(): this</code>代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map(&#123; key: &#39;value&#39; &#125;).clear() &#x2F;&#x2F;Map List([ 1, 2, 3, 4 ]).clear() &#x2F;&#x2F; List List中的各种删除与插入 List对应的数据结构是js中的数组，所以数组的一些方法在Immutable中也是通用的，比如push，pop,shift， unshift，insert。</span><br></pre></td></tr></table></figure>

<h3 id="push"><a href="#push" class="headerlink" title="push()"></a><strong>push()</strong></h3><p>在List末尾插入一个元素</p>
<h3 id="pop"><a href="#pop" class="headerlink" title="pop()"></a><strong>pop()</strong></h3><p>在List末尾删除一个元素</p>
<h3 id="unshift"><a href="#unshift" class="headerlink" title="unshift"></a><strong>unshift</strong></h3><p>在List首部插入一个元素</p>
<h3 id="shift"><a href="#shift" class="headerlink" title="shift"></a><strong>shift</strong></h3><p>在List首部删除一个元素</p>
<h3 id="insert"><a href="#insert" class="headerlink" title="insert"></a><strong>insert</strong></h3><p>在List的index处插入元素代码实现：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List([ 0, 1, 2, 3, 4 ]).insert(6, 5) &#x2F;&#x2F;List [ 0, 1, 2, 3, 4, 5 ] List([ 1, 2, 3, 4 ]).push(5) &#x2F;&#x2F; List [ 1, 2, 3, 4, 5 ] List([ 1, 2, 3, 4 ]).pop() &#x2F;&#x2F; List[ 1, 2, 3 ] List([ 2, 3, 4]).unshift(1); &#x2F;&#x2F; List [ 1, 2, 3, 4 ] List([ 0, 1, 2, 3, 4 ]).shift(); &#x2F;&#x2F; List [ 1, 2, 3, 4 ]</span><br></pre></td></tr></table></figure>

<p>List中还有一个特有的方法用法设置List的长度，setSize()</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">List([]).setSize(2).toJS() &#x2F;&#x2F;[undefined,undefined]</span><br></pre></td></tr></table></figure>

<p>关于merge</p>
<h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a><strong>merge</strong></h3><p>作用：浅合并，新数据与旧数据对比，旧数据中不存在的属性直接添加，就数据中已存在的属性用新数据中的覆盖</p>
<h3 id="mergrWith"><a href="#mergrWith" class="headerlink" title="mergrWith"></a><strong>mergrWith</strong></h3><p>作用：自定义浅合并，可自行设置某些属性的值</p>
<h3 id="mergeIn"><a href="#mergeIn" class="headerlink" title="mergeIn"></a><strong>mergeIn</strong></h3><p>作用：对深层数据进行浅合并</p>
<h3 id="mergeDeep"><a href="#mergeDeep" class="headerlink" title="mergeDeep"></a><strong>mergeDeep</strong></h3><p>作用：深合并，新旧数据中同时存在的的属性为新旧数据合并之后的数据</p>
<h3 id="mergeDeepIn"><a href="#mergeDeepIn" class="headerlink" title="mergeDeepIn"></a><strong>mergeDeepIn</strong></h3><p>作用：对深层数据进行深合并</p>
<h3 id="mergrDeepWith"><a href="#mergrDeepWith" class="headerlink" title="mergrDeepWith"></a><strong>mergrDeepWith</strong></h3><p>作用：自定义深合并，可自行设置某些属性的值</p>
<p>这里用一段示例彻底搞懂merge，此示例为Map结构，List与Map原理相同</p>
<p>`const Map1 = Immutable.fromJS({a:111,b:222,c:{d:333,e:444}}); const Map2 = Immutable.fromJS({a:111,b:222,c:{e:444,f:555}});</p>
<p>const Map3 = Map1.merge(Map2); //Map {a:111,b:222,c:{e:444,f:555}} const Map4 = Map1.mergeDeep(Map2); //Map {a:111,b:222,c:{d:333,e:444,f:555}} const Map5 = Map1.mergeWith((oldData,newData,key)=&gt;{ if(key === ‘a’){ return 666; }else{ return newData } },Map2); //Map {a:666,b:222,c:{e:444,f:555}}`</p>
<p>序列算法</p>
<h3 id="concat"><a href="#concat" class="headerlink" title="concat()"></a><strong>concat()</strong></h3><p>作用：对象的拼接，用法与js数组中的concat()相同，返回一个新的对象。用法：<code>const List = list1.concat(list2)</code></p>
<h3 id="map"><a href="#map" class="headerlink" title="map()"></a><strong>map()</strong></h3><p>作用：遍历整个对象，对Map/List元素进行操作，返回一个新的对象。用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map(&#123;a:1,b:2&#125;).map(val&#x3D;&gt;10*val) &#x2F;&#x2F;Map&#123;a:10,b:20&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map特有的mapKey"><a href="#Map特有的mapKey" class="headerlink" title="Map特有的mapKey()"></a><strong>Map特有的mapKey()</strong></h3><p>作用：遍历整个对象，对Map元素的key进行操作，返回一个新的对象。用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map(&#123;a:1,b:2&#125;).mapKey(val&#x3D;&gt;val+&#39;l&#39;) &#x2F;&#x2F;Map&#123;al:10,bl:20&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map特有的mapEntries"><a href="#Map特有的mapEntries" class="headerlink" title="Map特有的mapEntries()"></a><strong>Map特有的mapEntries()</strong></h3><p>作用：遍历整个对象，对Map元素的key和value同时进行操作，返回一个新的对象。Map的map()也可实现此功能。用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map(&#123;a:1,b:2&#125;).map((key,val)&#x3D;&gt;&#123; return [key+&#39;l&#39;,val*10] &#125;) &#x2F;&#x2F;Map&#123;al:10,bl:20&#125;</span><br></pre></td></tr></table></figure>

<h3 id="过滤-filter"><a href="#过滤-filter" class="headerlink" title="过滤 filter"></a><strong>过滤 filter</strong></h3><p>作用：返回一个新的对象，包括所有满足过滤条件的元素用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Map(&#123;a:1,b:2&#125;).filter((key,val)&#x3D;&gt;&#123; return val &#x3D;&#x3D; 2 &#125;) &#x2F;&#x2F;Map&#123;b:2&#125;</span><br></pre></td></tr></table></figure>

<p>还有一个filterNot()方法，与此方法正好相反。</p>
<h3 id="反转-reverse"><a href="#反转-reverse" class="headerlink" title="反转 reverse"></a><strong>反转 reverse</strong></h3><p>作用：将数据的结构进行反转代码示例：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4, 5]).reverse(); &#x2F;&#x2F; List [5,4,3,2,1] Immutable.fromJS(&#123;a:1,b:&#123;c:2,d:3&#125;,e:4&#125;).recerse(); &#x2F;&#x2F;Map &#123;e:4,b:&#123;c:2,d:3&#125;,a:1&#125;</span><br></pre></td></tr></table></figure>

<h3 id="排序-sort-amp-sortBy"><a href="#排序-sort-amp-sortBy" class="headerlink" title="排序 sort &amp; sortBy"></a><strong>排序 sort &amp; sortBy</strong></h3><p>作用：对数据结构进行排序代码示例：</p>
<p>`///List Immutable.fromJS([4,3,5,2,6,1]).sort() // List [1,2,3,4,5,6] Immutable.fromJS([4,3,5,2,6,1]).sort((a,b)=&gt;{ if (a &lt; b) { return -1; } if (a &gt; b) { return 1; } if (a === b) { return 0; } }) // List [1,2,3,4,5,6] Immutable.fromJS([{a:3},{a:2},{a:4},{a:1}]).sortBy((val,index,obj)=&gt;{ return val.get(‘a’) },(a,b)=&gt;{ if (a &lt; b) { return -1; } if (a &gt; b) { return 1; } if (a === b) { return 0; } }) //List  [ {a:3}, {a:2}, {a:4}, {a:1} ]</p>
<p>//Map</p>
<p>Immutable.fromJS( {b:1, a: 3, c: 2, d:5} ).sort() //Map {b: 1, c: 2, a: 3, d: 5} Immutable.fromJS( {b:1, a: 3, c: 2, d:5} ).sort((a,b)=&gt;{ if (a &lt; b) { return -1; } if (a &gt; b) { return 1; } if (a === b) { return 0; } }) //Map {b: 1, c: 2, a: 3, d: 5} Immutable.fromJS( {b:1, a: 3, c: 2, d:5} ).sortBy((value, key, obj)=&gt; { return value }) //Map {b: 1, c: 2, a: 3, d: 5}`</p>
<h3 id="分组-groupBy"><a href="#分组-groupBy" class="headerlink" title="分组 groupBy"></a><strong>分组 groupBy</strong></h3><p>作用：对数据进行分组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const listOfMaps &#x3D; List([ Map(&#123; v: 0 &#125;), Map(&#123; v: 1 &#125;), Map(&#123; v: 1 &#125;), Map(&#123; v: 0 &#125;), Map(&#123; v: 2 &#125;) ]) const groupsOfMaps &#x3D; listOfMaps.groupBy(x &#x3D;&gt; x.get(&#39;v&#39;)) &#x2F;&#x2F; Map &#123; &#x2F;&#x2F; 0: List [ Map&#123; &quot;v&quot;: 0 &#125;, Map &#123; &quot;v&quot;: 0 &#125; ], &#x2F;&#x2F; 1: List [ Map&#123; &quot;v&quot;: 1 &#125;, Map &#123; &quot;v&quot;: 1 &#125; ], &#x2F;&#x2F; 2: List [ Map&#123; &quot;v&quot;: 2 &#125; ], &#x2F;&#x2F; &#125;</span><br></pre></td></tr></table></figure>

<h3 id="查找数据"><a href="#查找数据" class="headerlink" title="查找数据"></a><strong>查找数据</strong></h3><p>indexOf() 、 lastIndexOf Map不存在此方法作用：和js数组中的方法相同，查找第一个或者最后一个value的index值，找不到则返回-1用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).indexof(3) &#x2F;&#x2F;2 Immutable.fromJS([1,2,3,4]).lastIndexof(3) &#x2F;&#x2F;2</span><br></pre></td></tr></table></figure>

<h3 id="findIndex-、-findLastIndex-Map不存在此方法"><a href="#findIndex-、-findLastIndex-Map不存在此方法" class="headerlink" title="findIndex() 、 findLastIndex() Map不存在此方法"></a><strong>findIndex() 、 findLastIndex() Map不存在此方法</strong></h3><p>作用：查找满足要求的元素的index值用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).findIndex((value,index,array)&#x3D;&gt;&#123; return value%2 &#x3D;&#x3D;&#x3D; 0; &#125;) &#x2F;&#x2F; 1 Immutable.fromJS([1,2,3,4]).findLastIndex((value,index,array)&#x3D;&gt;&#123; return index%2 &#x3D;&#x3D;&#x3D; 0; &#125;) &#x2F;&#x2F; 3</span><br></pre></td></tr></table></figure>

<h3 id="find-、-findLast"><a href="#find-、-findLast" class="headerlink" title="find() 、 findLast()"></a><strong>find() 、 findLast()</strong></h3><p>作用：查找满足条件的元素的value值用法：</p>
<p>`Immutable.fromJS([1,2,3,4]).find((value,index,array)=&gt;{ return value%2 === 0; })  // 2</p>
<p>Immutable.fromJS([1,2,3,4]).findLast((value,index,array)=&gt;{ return value%2 === 0; })  // 4`</p>
<h3 id="findKey-、-findLastKey"><a href="#findKey-、-findLastKey" class="headerlink" title="findKey() 、 findLastKey()"></a><strong>findKey() 、 findLastKey()</strong></h3><p>作用：查找满足条件的元素的key值用法：</p>
<p>`Immutable.fromJS([1,2,3,4]).findKey((value,index,array)=&gt;{ return value%2 === 0; })  // 1</p>
<p>Immutable.fromJS([1,2,3,4]).findLastKey((value,index,array)=&gt;{ return value%2 === 0; })  // 3`</p>
<h3 id="findEntry-、-findLastEntry"><a href="#findEntry-、-findLastEntry" class="headerlink" title="findEntry() 、 findLastEntry()"></a><strong>findEntry() 、 findLastEntry()</strong></h3><p>作用：查找满足条件的元素的键值对 key:value用法：</p>
<p>`Immutable.fromJS([1,2,3,4]).findEntry((value,index,array)=&gt;{ return value%2 === 0; })  // [1,2]</p>
<p>Immutable.fromJS([1,2,3,4]).findLastEntry((value,index,array)=&gt;{ return value%2 === 0; })  // [3,4]`</p>
<h3 id="keyOf-lastKeyOf"><a href="#keyOf-lastKeyOf" class="headerlink" title="keyOf() lastKeyOf()"></a><strong>keyOf() lastKeyOf()</strong></h3><p>作用：查找某一个value对应的key值用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).keyOf(2) &#x2F;&#x2F;1 Immutable.fromJS([1,2,3,4]).lastKeyOf(2) &#x2F;&#x2F;1</span><br></pre></td></tr></table></figure>

<h3 id="max-、-maxBy"><a href="#max-、-maxBy" class="headerlink" title="max() 、 maxBy()"></a><strong>max() 、 maxBy()</strong></h3><p>作用：查找最大值用法:</p>
<p>`Immutable.fromJS([1, 2, 3, 4]).max() //4</p>
<p>Immutable.fromJS([{a;1},{a:2},{a: 3},{a:4}]).maxBy((value,index,array)=&gt;{ return value.get(‘a’) })  //{a:4}`</p>
<h3 id="min-、-minBy"><a href="#min-、-minBy" class="headerlink" title="min() 、 minBy()"></a><strong>min() 、 minBy()</strong></h3><p>作用：查找最小值用法:</p>
<p>`Immutable.fromJS([1, 2, 3, 4]).min() //1</p>
<p>Immutable.fromJS([{a;1},{a:2},{a: 3},{a:4}]).minBy((value,index,array)=&gt;{ return value.get(‘a’) })  //{a:1}`</p>
<p>创建子集</p>
<h3 id="slice"><a href="#slice" class="headerlink" title="slice()"></a><strong>slice()</strong></h3><p>作用： 和原生js中数组的slice数组一样，包含两个参数，start和end，start代表开始截取的位置，end代表结束的位置，不包括第end的元素。若不包括end，则返回整个对象，若end为负数，则返回（start，length-end）对应的数据。若start只有一个并且为负数，则返回最后的end个元素。用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).slice(0); &#x2F;&#x2F;[1,2,3,4] Immutable.fromJS([1, 2, 3, 4]).slice(0,2); &#x2F;&#x2F;[1,2] Immutable.fromJS([1, 2, 3, 4]).slice(-2); &#x2F;&#x2F;[3,4] Immutable.fromJS([1, 2, 3, 4]).slice(0,-2); &#x2F;&#x2F;[1,2]</span><br></pre></td></tr></table></figure>

<h3 id="rest"><a href="#rest" class="headerlink" title="rest()"></a><strong>rest()</strong></h3><p>作用：返回除第一个元素之外的所有元素用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).rest()&#x2F;&#x2F;[2,3,4]</span><br></pre></td></tr></table></figure>

<h3 id="butLast"><a href="#butLast" class="headerlink" title="butLast()"></a><strong>butLast()</strong></h3><p>作用：返回除最后一个元素之外的所有元素用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).rest()&#x2F;&#x2F;[1,2,3]</span><br></pre></td></tr></table></figure>

<h3 id="skip"><a href="#skip" class="headerlink" title="skip()"></a><strong>skip()</strong></h3><p>作用：有一个参数n, 返回截掉前n个元素之后剩下的所有元素用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).skip(1)&#x2F;&#x2F;[2,3,4]\\</span><br></pre></td></tr></table></figure>

<h3 id="skipLast"><a href="#skipLast" class="headerlink" title="skipLast()"></a><strong>skipLast()</strong></h3><p>作用：有一个参数n, 返回截掉最后n个元素之后剩下的所有元素用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).skip(1)&#x2F;&#x2F;[1,2,3]</span><br></pre></td></tr></table></figure>

<h3 id="skipWhile"><a href="#skipWhile" class="headerlink" title="skipWhile()"></a><strong>skipWhile()</strong></h3><p>作用：返回从第一次返回false之后的所有元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).skipWhile(list.skipWhile((value,index,list)&#x3D;&gt;&#123; return value &gt; 2; &#125;))&#x2F;&#x2F; [1,2,3,4] skipUntil()</span><br></pre></td></tr></table></figure>

<p>作用：返回从第一次返回true之后的所有元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).skipUntil(list.skipWhile((value,index,list)&#x3D;&gt;&#123; return value &gt; 2; &#125;))&#x2F;&#x2F; [3,4]</span><br></pre></td></tr></table></figure>

<h3 id="take"><a href="#take" class="headerlink" title="take()"></a><strong>take()</strong></h3><p>作用：有一个参数n, 返回前n个元素用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).take(2)&#x2F;&#x2F;[1,2]</span><br></pre></td></tr></table></figure>

<h3 id="takeLast"><a href="#takeLast" class="headerlink" title="takeLast()"></a><strong>takeLast()</strong></h3><p>作用：有一个参数n, 返回最后n个元素用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).takeLast(2)&#x2F;&#x2F;[3,4]</span><br></pre></td></tr></table></figure>

<h3 id="takeWhile"><a href="#takeWhile" class="headerlink" title="takeWhile()"></a><strong>takeWhile()</strong></h3><p>作用：返回从第一次返回false之前的所有元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).skipWhile(list.takeWhile((value,index,list)&#x3D;&gt;&#123; return value &gt; 2; &#125;))&#x2F;&#x2F; []</span><br></pre></td></tr></table></figure>

<h3 id="takeUntil"><a href="#takeUntil" class="headerlink" title="takeUntil()"></a><strong>takeUntil()</strong></h3><p>作用：返回从第一次返回true之前的所有元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1, 2, 3, 4]).skipUntil(list.takeUntil((value,index,list)&#x3D;&gt;&#123; return value &gt; 2; &#125;))&#x2F;&#x2F; [1,2]</span><br></pre></td></tr></table></figure>

<p>处理数据</p>
<h3 id="reduce"><a href="#reduce" class="headerlink" title="reduce()"></a><strong>reduce()</strong></h3><p>作用：和js中数组中的reduce相同,按索引升序的顺序处理元素用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).reduce((pre,next,index,arr)&#x3D;&gt;&#123; console.log(pre+next) return pre+next; &#125;) &#x2F;&#x2F; 3 6 10</span><br></pre></td></tr></table></figure>

<h3 id="reduceRight"><a href="#reduceRight" class="headerlink" title="reduceRight()"></a><strong>reduceRight()</strong></h3><p>作用：和js中数组中的reduce相同,按索引降序的顺序处理元素用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).reduceRight((pre,next,index,arr)&#x3D;&gt;&#123; console.log(pre+next) return pre+next; &#125;) &#x2F;&#x2F; 7 9 10</span><br></pre></td></tr></table></figure>

<h3 id="every"><a href="#every" class="headerlink" title="every()"></a><strong>every()</strong></h3><p>作用：判断整个对象总中所有的元素是不是都满足某一个条件，都满足返回true，反之返回false。</p>
<p>代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).every((value,index,arr)&#x3D;&gt;&#123; return value &gt; 2 &#125;) &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>

<h3 id="some"><a href="#some" class="headerlink" title="some()"></a><strong>some()</strong></h3><p>作用：判断整个对象总中所有的元素是不是存在满足某一个条件的元素，若存在返回true，反之返回false。代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).some((value,index,arr)&#x3D;&gt;&#123; return value &gt; 2 &#125;) &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h3 id="join"><a href="#join" class="headerlink" title="join()"></a><strong>join()</strong></h3><p>作用：同js中数组的join方法。把准换为字符串用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([1,2,3,4]).join(&#39;,&#39;) &#x2F;&#x2F;1,2,3,4</span><br></pre></td></tr></table></figure>

<h3 id="isEmpty"><a href="#isEmpty" class="headerlink" title="isEmpty()"></a><strong>isEmpty()</strong></h3><p>作用：判断是否为空用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Immutable.fromJS([]).isEmpty(); &#x2F;&#x2F; true Immutable.fromJS(&#123;&#125;).isEmpty(); &#x2F;&#x2F; true</span><br></pre></td></tr></table></figure>

<h3 id="count"><a href="#count" class="headerlink" title="count()"></a><strong>count()</strong></h3><p>作用：返回元素个数，可自定义条件，返回满足条件的个数用法：</p>
<p>`const list = Immutable.fromJS([1,2,3,4]); const map = Immutable.fromJS({a:1,b:2,c:3,d:4});</p>
<p>list.count((value,index,list)=&gt;{ return value &gt; 2; })    //2</p>
<p>map.count((value,index,list)=&gt;{ return value &gt; 2; })    //2`</p>
<h3 id="countBy"><a href="#countBy" class="headerlink" title="countBy()"></a><strong>countBy()</strong></h3><p>作用：与count不同的是，countBy返回一个对象用法：</p>
<p>`const list = Immutable.fromJS([1,2,3,4]); const map = Immutable.fromJS({a:1,b:2,c:3,d:4});</p>
<p>list.countBy((value,index,list)=&gt;{ return value &gt; 2; } //{false: 2, true: 2}</p>
<p>map.countBy((value,index,list)=&gt;{ return value &gt; 2; } //{false: 2, true: 2}`</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>Immutable.js</category>
      </categories>
      <tags>
        <tag>Immutable.js</tag>
      </tags>
  </entry>
  <entry>
    <title>React</title>
    <url>/2021/07/11/React/</url>
    <content><![CDATA[<hr>
<h1 id="一-React"><a href="#一-React" class="headerlink" title="一. React"></a>一. React</h1><h2 id="1-React-概述"><a href="#1-React-概述" class="headerlink" title="1.React 概述"></a>1.React 概述</h2><h3 id="1-1-什么是React"><a href="#1-1-什么是React" class="headerlink" title="1.1 什么是React"></a>1.1 什么是React</h3><p>用于构建用户界面的JavaScript库</p>
<p>用户界面: HTML页面(前端)</p>
<p>React主要用来写HTML页面,或者构建Web应用</p>
<p>如果从MVC的角度来看,React仅仅是视图层(V), 也就是只负责试图的渲染,而非提供了完整的M和C功能</p>
<h3 id="1-2-React的特点"><a href="#1-2-React的特点" class="headerlink" title="1.2 React的特点"></a>1.2 React的特点</h3><ul>
<li>声明式 (只需要描述UI看起来是什么样,都跟写HTML一样)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React! 动态变化数据: &#123;count&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>基于组件<ul>
<li>组件是Reat最重要的内容</li>
<li>组件表示页面中的部分内容</li>
<li>组合、复用多个组件,可以实现完整的页面功能</li>
</ul>
</li>
<li>学习一次,随处使用<ul>
<li>使用 React可以开发Web应用</li>
<li>使用 React可以开发移动端原生应用( react- native)</li>
<li>使用 React可以开发VR(虚拟现实)应用( react360)</li>
</ul>
</li>
</ul>
<h2 id="2-React-的基本使用"><a href="#2-React-的基本使用" class="headerlink" title="2. React 的基本使用"></a>2. React 的基本使用</h2><h3 id="2-1-React的安装"><a href="#2-1-React的安装" class="headerlink" title="2.1 React的安装"></a>2.1 React的安装</h3><p>安装命令: <code>npm i react react-dom</code></p>
<ul>
<li>react 包是核心,提供创建元素,组件等功能</li>
<li>react-dom包提供DOM相关功能等</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入react和react-dom两个js文件</span></span><br><span class="line">&lt;script src=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">// 2. 创建React元素</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">// 参数一: 元素名称</span></span><br><span class="line">	<span class="comment">// 参数二: 元素属性</span></span><br><span class="line">	<span class="comment">// 参数三: 元素的子节点</span></span><br><span class="line">	<span class="keyword">const</span> title = React.createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br><span class="line">&lt;/script&gt; </span><br><span class="line"><span class="comment">// 3. 渲染React元素到页面中</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/创建id属性为root的元素</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	const title = React.createElement(&#x27;h1&#x27;, null, &#x27;Hello React&#x27;)</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数一: 要渲染的react元素</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数二: 挂载点</span></span><br><span class="line"><span class="regexp">	ReactDOM.render(title, document.getElementById(&#x27;root&#x27;))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-方法说明"><a href="#2-2-方法说明" class="headerlink" title="2.2 方法说明"></a>2.2 方法说明</h3><ul>
<li>React.creatElement()说明(知道)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/创建id属性为root的元素</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数一: 要渲染的react元素</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数二: 挂载点</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 第三个及其后面的参数: 元素的子节点</span></span><br><span class="line"><span class="regexp">	const title = React.createElement(</span></span><br><span class="line"><span class="regexp">		&#x27;p&#x27;, </span></span><br><span class="line"><span class="regexp">		&#123; title: &#x27;我是标题&#x27;, id: &#x27;p1&#x27; &#125;,</span></span><br><span class="line"><span class="regexp">	  &#x27;Hello React&#x27;,</span></span><br><span class="line"><span class="regexp">		React.createElement(&#x27;span&#x27;, null, &#x27;我是span节点&#x27;)</span></span><br><span class="line"><span class="regexp">		)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数一: 要渲染的react元素</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数二: 挂载点</span></span><br><span class="line"><span class="regexp">	ReactDOM.render(title, document.getElementById(&#x27;root&#x27;))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ReactDOM.render()说明</strong></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数: 要渲染的React元素</span></span><br><span class="line"><span class="comment">// 第二个参数: DOM对象, 用于指定渲染到页面中的位置</span></span><br><span class="line">ReactDOM.render(el, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="3-React脚手架的使用"><a href="#3-React脚手架的使用" class="headerlink" title="3. React脚手架的使用"></a>3. React脚手架的使用</h2><h3 id="3-1-React脚手架意义"><a href="#3-1-React脚手架意义" class="headerlink" title="3.1 React脚手架意义"></a>3.1 React脚手架意义</h3><ol>
<li>脚手架是开发现代Web应用的必备</li>
<li>充分利用Webpack, Babel, ESlint等工具辅助项目开发</li>
<li>零配置,无需手动配置繁琐的工具即可使用</li>
<li>关注业务而不是工具配置</li>
</ol>
<h3 id="3-2-使用React脚手架初始化项目"><a href="#3-2-使用React脚手架初始化项目" class="headerlink" title="3.2 使用React脚手架初始化项目"></a>3.2 使用React脚手架初始化项目</h3><ol>
<li>初始化项目,命令: <code>npx create-react-app my-app</code></li>
<li>启动项目,在项目根目录执行 <code>npm start</code></li>
</ol>
<h3 id="3-3-在脚手架中使用React"><a href="#3-3-在脚手架中使用React" class="headerlink" title="3.3 在脚手架中使用React"></a>3.3 在脚手架中使用React</h3><ol>
<li>导入react 和react-dom两个包</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">imoort React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>调用React.createElement()方法来创建React元素</li>
<li>调用ReactDOM.render()方法渲染react元素到页面中</li>
</ol>
<h3 id="3-4-React基础总结"><a href="#3-4-React基础总结" class="headerlink" title="3.4 React基础总结"></a>3.4 React基础总结</h3><ol>
<li>Reat是构建用户界面的 JavaScript库</li>
<li>使用 react时,推荐使用脚手架方式</li>
<li>初始化项目命令: npx create- react- app my-app</li>
<li>启动项目命令: yarn start(或 npm start)</li>
<li>React. createElement0方法用于创建 react元素(知道)</li>
<li>ReactDoM. render0方法负责渲染 react元素到页面中</li>
</ol>
<h1 id="二-JSX"><a href="#二-JSX" class="headerlink" title="二. JSX"></a>二. JSX</h1><p>目标:</p>
<ul>
<li>能够知道什么是JSX</li>
<li>能够使用JSX创建 React元素</li>
<li>能够在JsX中使用 JavaScript表达式</li>
<li>能够使用JSX的条件渲染和列表渲染</li>
<li>能够给JsX添加样式</li>
<li>JSX的基本使用</li>
<li>JSX中使用 JavaScript表达式</li>
<li>JSX的条件渲染</li>
<li>JSX的列表渲染</li>
<li>JSX的样式处理</li>
</ul>
<h2 id="1-JSX的基本使用"><a href="#1-JSX的基本使用" class="headerlink" title="1. JSX的基本使用"></a>1. JSX的基本使用</h2><h3 id="1-1-creatElement-的问题"><a href="#1-1-creatElement-的问题" class="headerlink" title="1.1 creatElement()的问题"></a>1.1 creatElement()的问题</h3><ul>
<li>繁琐不简洁</li>
<li>不直观,无法一眼看出所描述的结构</li>
<li>不优雅,用户体验不爽</li>
</ul>
<h3 id="1-2-JSX简介"><a href="#1-2-JSX简介" class="headerlink" title="1.2 JSX简介"></a>1.2 JSX简介</h3><p>JsX是 JavaScript XML的简写,表示在 JavaScript代码中写XML(HTML)格式的代码 优势:声明式语法更加直观、与HTM结构相同,降低了学习成本、提升开发效率</p>
<p>JSX的React的核心内容</p>
<ul>
<li>推荐使用JSX语法创建 React元素</li>
<li>写JSX就跟写HTML一样,更加直观、友好</li>
<li>JSX语法更能体现 React的声明式特点(描述U长什么样子)</li>
<li>使用步骤</li>
</ul>
<ol>
<li>使用JSX语法创建React元素</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用JSX语法,创建React元素</span></span><br><span class="line"><span class="keyword">const</span> tltle = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li>使用ReactDOM.render()方法渲染react元素到页面中</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染创建好的React元素</span></span><br><span class="line">ReactDOM.render(title,root)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-思考"><a href="#1-3-思考" class="headerlink" title="1.3 思考"></a>1.3 思考</h3><p>为什么脚手架中可以使用JSX语法? 1.J5X不是标准的 ECMAScript语法,它是 ECMAScript的语法扩展 2.需要使用 babel编译处理后,才能在浏览器环境中使用。 3. create-react-app脚手架中已经默认有该配置,无需手动配置 4.编译SX语法的包为:@ babel/preset-react</p>
<h3 id="1-4-注意点"><a href="#1-4-注意点" class="headerlink" title="1.4 注意点"></a>1.4 注意点</h3><ol>
<li>React元素的属性名使用驼峰命名法</li>
<li>特殊属性名: class-&gt; <strong>className</strong>、for-&gt; htmlFor、 tabindex-&gt; tabIndex</li>
<li>没有子节点的Reac元素可以用**/&gt;**结束</li>
<li>推荐:使用<strong>小括号包裹JSX</strong>,从而避免JS中的自动插入分号陷阱</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello JSX <span class="tag">&lt;<span class="name">span</span> /&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用小括号包裹JSX</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">	&lt;div&gt;Hello JSX&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">	&lt;h1 className=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">	Hello JSX </span><br><span class="line">	&lt;span /&gt;</span><br><span class="line">	&lt;/h1&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="2-JSX中使用JavaScript表达式"><a href="#2-JSX中使用JavaScript表达式" class="headerlink" title="2. JSX中使用JavaScript表达式"></a>2. JSX中使用JavaScript表达式</h2><h3 id="嵌入JS表达式"><a href="#嵌入JS表达式" class="headerlink" title="嵌入JS表达式"></a>嵌入JS表达式</h3><ul>
<li>数据存储在JS中</li>
<li>语法: <strong>{JavaScript表达式}</strong></li>
<li>注意:语法中是单大括号,不是双大括号</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">	&lt;div&gt;你好,我叫: &#123;name&#125;&lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h3><ol>
<li>单大括号中可以使用任意的 JavaScript表达式</li>
<li>JSX自身也是JS表达式</li>
<li>注意:JS中的对象是一个例外,一般只会出现在stye属性中</li>
<li>注意:不能在中出现语句(比如:if/for等</li>
</ol>
<h2 id="3-JSX的条件渲染"><a href="#3-JSX的条件渲染" class="headerlink" title="3. JSX的条件渲染"></a>3. JSX的条件渲染</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件渲染</span></span><br><span class="line"><span class="comment">// if-else</span></span><br><span class="line"><span class="keyword">const</span> isloading = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成,此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> isloading ? (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>) : (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成,此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑与运算符</span></span><br><span class="line"><span class="keyword">const</span> loadData = () +&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> isLoading &amp;&amp; (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">	&lt;h1&gt;</span><br><span class="line">	条件渲染:</span><br><span class="line">	&#123;loadData()&#125;</span><br><span class="line">	&lt;/h1&gt;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 渲染react元素</span></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="4-JSX的列表渲染"><a href="#4-JSX的列表渲染" class="headerlink" title="4. JSX的列表渲染"></a>4. JSX的列表渲染</h2><ul>
<li>如果要渲染一组数据,应该使用数组的map0方法</li>
<li>注意:渲染列表时应该添加key属性,key属性的值要保证唯一</li>
<li>原则:map0遍历谁,就给谁添加key属性</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;痴心绝对&#x27;&#125;</span></span><br><span class="line"><span class="string">	&#123;id:2,name:·像我这样的人&#x27;&#125;,</span></span><br><span class="line"><span class="string">	&#123;id:3,name:&quot;</span>南山南<span class="string">&#x27;&#125;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">const list = (</span></span><br><span class="line"><span class="string">	&lt;ul&gt;</span></span><br><span class="line"><span class="string">	  &#123;songs. map(item =&gt;&lt;li key=&#123;item id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;)&#125;</span></span><br><span class="line"><span class="string">	&lt;/u1&gt;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure>

<h2 id="5-JSX的样式处理"><a href="#5-JSX的样式处理" class="headerlink" title="5. JSX的样式处理"></a>5. JSX的样式处理</h2><h3 id="1-行内样式-style"><a href="#1-行内样式-style" class="headerlink" title="1. 行内样式 - style"></a>1. 行内样式 - style</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">backgroundColor</span>: <span class="string">&#x27;skyblue&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">	JSX的样式处理</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-类名-className-推荐"><a href="#2-类名-className-推荐" class="headerlink" title="2. 类名 - className(推荐)"></a>2. 类名 - className(推荐)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h1 className = <span class="string">&#x27;title&#x27;</span>&gt;</span><br><span class="line">	JSX的样式处理</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>JSX</p>
<ol>
<li>JSX是React的核心内容</li>
<li>JSX表示在J5代码中写HTML结构,是React声明式的体现</li>
<li>使用J5X配合嵌入的J5表达式、条件渲染、列表渲染,可以描述任意UI结构</li>
<li>推荐使用[lassName的方式给JSX添加样式</li>
<li>React完全利用J语言自身的能力来编写圈,而不是造轮子增强HTML功能</li>
</ol>
<h2 id="三-React组件基础"><a href="#三-React组件基础" class="headerlink" title="三. React组件基础"></a>三. React组件基础</h2><h3 id="1-React组件介绍"><a href="#1-React组件介绍" class="headerlink" title="1. React组件介绍"></a>1. React组件介绍</h3><ul>
<li>组件是Reat的一等公民,使用 React就是在用组件</li>
<li>组件表示页面中的部分功能</li>
<li>组合多个组件实现完整的页面功能</li>
<li>特点:可复用、独立、可组合</li>
</ul>
<h3 id="2-React组件的两种创建方式"><a href="#2-React组件的两种创建方式" class="headerlink" title="2. React组件的两种创建方式"></a>2. React组件的两种创建方式</h3><ul>
<li>使用函数创建组件</li>
<li>使用类创建组件</li>
</ul>
<h3 id="2-1-使用函数创建组件"><a href="#2-1-使用函数创建组件" class="headerlink" title="2.1 使用函数创建组件"></a>2.1 使用函数创建组件</h3><ul>
<li>函数组件:使用js的函数(或箭头函数)创建的组件叫做:函数组件</li>
<li>约定1:函数名称必须以大写字母开头,React据此区分组件和普通的 React元素</li>
<li>约定2: 函数组件必须有返回值,表示该组件的结构</li>
<li>如果返回值为null, 表示不渲染任何内容</li>
<li>渲染函数组件:  用函数名作为组件标签名</li>
<li>组件标签可以是单标签也可以是双标签</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;这是我的第一个函数组件!&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是我的第一个函数组件!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用类创建组件"><a href="#2-2-使用类创建组件" class="headerlink" title="2.2 使用类创建组件"></a>2.2 使用类创建组件</h3><ul>
<li>类组件: 使用ES6的class创建的组</li>
<li>约定1: 类名称也必须以大写字母开头</li>
<li>约定2: 类组件应该继承React.Component父类,从而可以使用父类中提供的方法或属性</li>
<li>约定3: 类组件必须提供 render0方法</li>
<li>约定4: render0方法必须有返回值,表示该组件的结构</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Compontent</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">reder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Class Component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-3-抽离为独立JS文件"><a href="#2-3-抽离为独立JS文件" class="headerlink" title="2.3 抽离为独立JS文件"></a>2.3 抽离为独立JS文件</h3><p>组件作为一个独立的个体,一般都会放到一个单独的JS文件中</p>
<ol>
<li>创建 Hello.js</li>
<li>在 Hello.js中导入 React</li>
<li>创建组件(函数或类)</li>
<li>在 Hello.js中导出该组件</li>
<li>在 index.js中导入Hllo组件</li>
<li>渲染组件</li>
</ol>
<h2 id="3-React事件处理"><a href="#3-React事件处理" class="headerlink" title="3. React事件处理"></a>3. React事件处理</h2><h3 id="3-1-事件绑定"><a href="#3-1-事件绑定" class="headerlink" title="3.1 事件绑定"></a>3.1 事件绑定</h3><ul>
<li>React事件绑定语法与DOM事件语法相似</li>
<li>语法: on+事件名称={事件处理程序}, 比如: onClick={() = &gt; {}}</li>
<li>注意: React事件采用<strong>驼峰命名法</strong>, 比如: onMouseEnter, onFocus</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类组件事件绑定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Compontent</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;单击事件触发了&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">reder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;button onClick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;点我&lt;/buttom&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件事件绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">handClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;函数组件中的事件绑定,单击事件触发了&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;button onClick=&#123;handleClick&#125;&gt;点我&lt;<span class="regexp">/buttom&gt; /</span><span class="regexp">/函数组件中没有this</span></span><br><span class="line"><span class="regexp">	)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 渲染组件</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Hello /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-2-事件对象"><a href="#3-2-事件对象" class="headerlink" title="3.2 事件对象"></a>3.2 事件对象</h3><ul>
<li>可以通过事件处理程序的参数获取到事件对象</li>
<li>React中的事件对象叫做: 合成事件(对象)</li>
<li>合成事件: 兼容所有浏览器, 无需担心跨浏览器兼容的问题</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* React事件对象 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 阻止浏览器的默认行为</span></span><br><span class="line">		e.preventDefault()</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;a标签的单机事件触发了&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;a href=<span class="string">&quot;&lt;https://www.baidu.com/&gt;&quot;</span> onCLick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;baidu&lt;/a&gt;&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="4-有状态组件和无状态组件"><a href="#4-有状态组件和无状态组件" class="headerlink" title="4. 有状态组件和无状态组件"></a>4. 有状态组件和无状态组件</h2><ul>
<li>函数组件又叫做无状态组件,类组件又叫做有状态组件</li>
<li>状态( state)即数据</li>
<li>函数组件没有自己的状态,只负责数据展示(静)</li>
<li>类组件有自己的状态,负责更新UI,让页面“动”起来</li>
</ul>
<h2 id="5-组件中的state-和setState"><a href="#5-组件中的state-和setState" class="headerlink" title="5. 组件中的state 和setState"></a>5. 组件中的state 和setState</h2><h3 id="5-1-state的基本使用"><a href="#5-1-state的基本使用" class="headerlink" title="5.1 state的基本使用"></a>5.1 state的基本使用</h3><ul>
<li>状态( state)即数据,是组件内部的私有数据,只能在组件内部使用</li>
<li>state的值是对象,表示一个组件中可以有多个数据</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>()</span><br><span class="line">		<span class="comment">// 初始化state</span></span><br><span class="line">		<span class="built_in">this</span>.state = &#123;</span><br><span class="line">			count: <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 简化语法初始化state</span></span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="5-2-setState-修改状态"><a href="#5-2-setState-修改状态" class="headerlink" title="5.2 setState()修改状态"></a>5.2 setState()修改状态</h3><ul>
<li>状态是可变的</li>
<li>语法: this setstate((要修改的数据</li>
<li>注意:不要直接修改 state中的值,这是错误的!!</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">					count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>setState()作用: 1.修改state 2.更新UI</li>
<li>思想: 数据驱动视图</li>
</ul>
<h2 id="6-事件绑定this指向"><a href="#6-事件绑定this指向" class="headerlink" title="6. 事件绑定this指向"></a>6. 事件绑定this指向</h2><h3 id="6-1-从JSX中抽离事件处理程序"><a href="#6-1-从JSX中抽离事件处理程序" class="headerlink" title="6.1 从JSX中抽离事件处理程序"></a>6.1 从JSX中抽离事件处理程序</h3><ul>
<li>JSX中掺杂过多的JS逻辑代码,会显得非常混乱</li>
<li>推荐: 将逻辑抽离到单独的方法中,保证JSX结构清晰</li>
</ul>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2b35525-3f95-4f8d-b980-937bd84d1a13/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2b35525-3f95-4f8d-b980-937bd84d1a13/Untitled.png"></p>
<ul>
<li>原因: 事件处理程序中this的值为undefined</li>
<li>希望: this指向组件实例(render方法中的this即为组件实例)</li>
</ul>
<h3 id="6-2-如何处理事件绑定this指向的问题"><a href="#6-2-如何处理事件绑定this指向的问题" class="headerlink" title="6.2 如何处理事件绑定this指向的问题"></a>6.2 如何处理事件绑定this指向的问题</h3><ol>
<li><p>箭头函数</p>
<ol>
<li>利用箭头函数自身不绑定this的特点</li>
<li>render()方法中的this为组件实例,可以获取到setState()</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	<span class="function"><span class="title">onIncrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;事件处理程序中的this:&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">			count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.onIncrement()&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">			<span class="comment">// &lt;button onClick=&#123;this.onIncrement&#125;&gt;+1&lt;/button&gt;</span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>Function.prototype.bind()</p>
<ol>
<li>利用ES5中的bind方法,将事件处理程序中的this与组件实例绑定到一起</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>()</span><br><span class="line">		<span class="built_in">this</span>.state = &#123;</span><br><span class="line">			count: <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">this</span>.onIncrement = <span class="built_in">this</span>.onIncrement.bind(<span class="built_in">this</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	<span class="function"><span class="title">onIncrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;事件处理程序中的this:&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">			count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="built_in">this</span>.onIncrement&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>class的实例方法</p>
<ol>
<li>利用箭头函数形式的实例方法</li>
<li>注意: 该语法是实验性语法,但是,由于babel的存在可以直接使用</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	onIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;事件处理程序中的this:&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">			count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="built_in">this</span>.onIncrement&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">			<span class="comment">// &lt;button onClick=&#123;this.onIncrement&#125;&gt;+1&lt;/button&gt;</span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="6-3-总结"><a href="#6-3-总结" class="headerlink" title="6.3 总结"></a>6.3 总结</h3><ol>
<li><p>推荐: 使用class的实例方法</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	onIncrement = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;...&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>箭头函数</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.onIncrement()&#125; /&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>bind</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">super</span>()</span><br><span class="line">	<span class="built_in">this</span>.onIncrement = <span class="built_in">this</span>.onIncrement.bind(<span class="built_in">this</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7-表单处理"><a href="#7-表单处理" class="headerlink" title="7. 表单处理"></a>7. 表单处理</h2><ol>
<li>受控组件</li>
<li>非受控组件</li>
</ol>
<h3 id="7-1-受控组件"><a href="#7-1-受控组件" class="headerlink" title="7.1 受控组件"></a>7.1 受控组件</h3><ul>
<li>HTML中的表单元素是可输入的, 也就是有自己的可变状态</li>
<li>而React中可变状态通常保存在state中,并且只能通过setState() 方法来修改</li>
<li>React将state与表单元素值value绑定到一起,由state的值来控制表单元素的值</li>
<li>受控组件: 其值受到React控制的表单元素</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">受控组件:其值受到React控制的表单元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">操作文本框的值:</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span></span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		txt: <span class="string">&#x27;&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">		txt: e.target.value</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line">render () &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			&lt;input type=<span class="string">&quot;txt&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; onChange=&#123;<span class="built_in">this</span>.handleChange&#125; /&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>步骤:</li>
</ul>
<ol>
<li><p>在state中添加一个状态,作为表单元素的value值(控制表单元素值的来源)</p>
<ol>
<li>给表单元素绑定change事件,将表单元素的值设置为state的值(控制表单元素值的变化)</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">state = &#123; <span class="attr">txt</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; </span><br><span class="line">	onChange=&#123;<span class="function"><span class="params">e</span> =&gt;</span> <span class="built_in">this</span>.setState(&#123; <span class="attr">txt</span>: e.target.value &#125;)&#125;</span><br><span class="line">/&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<p>示例:</p>
<ol>
<li>文本框,富文本框,下拉框</li>
<li>复选框</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">受控组件示例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span></span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		txt: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">		content: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">		city: <span class="string">&#x27;bj&#x27;</span>,</span><br><span class="line">		isChecked: <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">handleChange = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">		txt: e.target.value</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理富文本框的变化</span></span><br><span class="line">handleContent = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">		content: e.target.value</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//处理下拉框的变化</span></span><br><span class="line">handleCity = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">		city: e.target.value</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 处理复选框的变化</span></span><br><span class="line">handleChecked = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">		isChecked: e.target.checked</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line">render () &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			&#123;<span class="comment">/*文本框*/</span>&#125;</span><br><span class="line">			&lt;input type=<span class="string">&quot;txt&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; onChange=&#123;<span class="built_in">this</span>.handleChange&#125; /&gt;</span><br><span class="line">			&lt;br /&gt;</span><br><span class="line">			&#123;<span class="comment">/*富文本框*/</span>&#125;</span><br><span class="line">			&lt;textarea value=&#123;<span class="built_in">this</span>.state.content&#125; onChange=&#123;<span class="built_in">this</span>.handeleContent&#125;&gt;&lt;/textarea&gt;</span><br><span class="line">			&lt;br /&gt;</span><br><span class="line">			&#123;<span class="comment">/*下拉框*/</span>&#125;</span><br><span class="line">			&lt;select value=<span class="string">&#x27;this.state.city&#x27;</span> onChange=&#123;<span class="built_in">this</span>.handleCity&#125;&gt;</span><br><span class="line">				&lt;option value=<span class="string">&#x27;sh&#x27;</span>&gt;上海&lt;/option&gt;</span><br><span class="line">				&lt;option value=<span class="string">&#x27;bj&#x27;</span>&gt;北京&lt;/option&gt;</span><br><span class="line">				&lt;option value=<span class="string">&#x27;gz&#x27;</span>&gt;广州&lt;/option&gt;</span><br><span class="line">			&lt;/select&gt;</span><br><span class="line">			&#123;<span class="comment">/*复选框*/</span>&#125;</span><br><span class="line">			&lt;input type=<span class="string">&quot;checkbox&quot;</span> checked=&#123;<span class="built_in">this</span>.state.isChecked&#125; onChange=&#123;<span class="built_in">this</span>.handleChecked&#125; /&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 示例总结:</span></span><br><span class="line"><span class="comment">// 1. 文本框,富文本框, 下拉框操作value属性</span></span><br><span class="line"><span class="comment">// 2. 复选框操作checked属性</span></span><br></pre></td></tr></table></figure>

<p>多表单元素优化步骤:</p>
<ol>
<li>给表单元素添加name属性,名称与state相同</li>
<li>根据表单元素类型获取对应值</li>
<li>在change时间处理程序中通过[name]来修改对应的state</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">受控组件示例</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">component</span></span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		txt: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">		content: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">		city: <span class="string">&#x27;bj&#x27;</span>,</span><br><span class="line">		isChecked: <span class="literal">false</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">handleFrom = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// 获取当前的DOM对象</span></span><br><span class="line">	<span class="keyword">const</span> target = e.target</span><br><span class="line">	<span class="comment">// 根据类型获取值</span></span><br><span class="line">	<span class="keyword">const</span> value = target.type === <span class="string">&#x27;checkbox&#x27;</span></span><br><span class="line">		? target.checked</span><br><span class="line">		: target.value</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 获取name </span></span><br><span class="line">	<span class="keyword">const</span> name = target.name</span><br><span class="line">	<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">		[name]: value</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">render () &#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			&#123;<span class="comment">/*文本框*/</span>&#125;</span><br><span class="line">			&lt;input type=<span class="string">&quot;txt&quot;</span> name=<span class="string">&quot;txt&quot;</span> value=&#123;<span class="built_in">this</span>.state.txt&#125; onChange=&#123;<span class="built_in">this</span>.handleFrom &#125; /&gt;</span><br><span class="line">			&lt;br /&gt;</span><br><span class="line">			&#123;<span class="comment">/*富文本框*/</span>&#125;</span><br><span class="line">			&lt;textarea name=<span class="string">&quot;content&quot;</span> value=&#123;<span class="built_in">this</span>.state.content&#125; onChange=&#123;<span class="built_in">this</span>.handleFrom &#125;&gt;&lt;/textarea&gt;</span><br><span class="line">			&lt;br /&gt;</span><br><span class="line">			&#123;<span class="comment">/*下拉框*/</span>&#125;</span><br><span class="line">			&lt;select name=<span class="string">&quot;city&quot;</span> value=<span class="string">&#x27;this.state.city&#x27;</span> onChange=&#123;<span class="built_in">this</span>.handleFrom &#125;&gt;</span><br><span class="line">				&lt;option value=<span class="string">&#x27;sh&#x27;</span>&gt;上海&lt;/option&gt;</span><br><span class="line">				&lt;option value=<span class="string">&#x27;bj&#x27;</span>&gt;北京&lt;/option&gt;</span><br><span class="line">				&lt;option value=<span class="string">&#x27;gz&#x27;</span>&gt;广州&lt;/option&gt;</span><br><span class="line">			&lt;/select&gt;</span><br><span class="line">			&#123;<span class="comment">/*复选框*/</span>&#125;</span><br><span class="line">			&lt;input name=<span class="string">&quot;isChecked&quot;</span> type=<span class="string">&quot;checkbox&quot;</span> checked=&#123;<span class="built_in">this</span>.state.isChecked&#125; onChange=&#123;<span class="built_in">this</span>.handleFrom &#125; /&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="7-2-非受控组件"><a href="#7-2-非受控组件" class="headerlink" title="7.2 非受控组件"></a>7.2 非受控组件</h3><p>使用步骤:</p>
<ol>
<li><p>调用React.createRef()方法创建一个ref对象</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">super</span>()</span><br><span class="line">	<span class="built_in">this</span>.txtRef = React.createRef()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>将创建好的ref对象添加到文本框中</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&quot;text&quot;</span> ref=&#123;<span class="built_in">this</span>.txtRef&#125; /&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>通过ref对象获取到文本框的值</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.txtRef.current.value)</span><br></pre></td></tr></table></figure></li>
</ol>
<p>React组件基础小案例:</p>
<p>需求分析:</p>
<ol>
<li>渲染评论列表(列表渲染)</li>
<li>没有评论数据时渲染:暂无评论(条件渲染)</li>
<li>获取评论信息,包括评论人和评论内容(受控组件)</li>
<li>发表评论,更新评论列表(setState() )</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		&lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;inout className=<span class="string">&quot;user&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入评论人&quot;</span> /&gt;</span><br><span class="line">				&lt;br /&gt;</span><br><span class="line">				&lt;textarea&gt;</span><br><span class="line">					className=<span class="string">&quot;content&quot;</span></span><br><span class="line">					cols=<span class="string">&quot;30&quot;</span></span><br><span class="line">					rows=<span class="string">&quot;10&quot;</span></span><br><span class="line">					placeholder=<span class="string">&quot;请输入评论内容&quot;</span></span><br><span class="line">				/&gt;</span><br><span class="line">				&lt;br /&gt;</span><br><span class="line">				&lt;button&gt;发表评论&lt;/button&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">		&lt;div className=<span class="string">&quot;no-comment&quot;</span>&gt;暂无评论,快去评论吧~&lt;/div&gt;</span><br><span class="line">			&lt;ul&gt;</span><br><span class="line">				&lt;li&gt;</span><br><span class="line">					&lt;h3&gt;评论人: jack&lt;/h3&gt;</span><br><span class="line">					&lt;p&gt;评论内容: 沙发!!!&lt;/p&gt;</span><br><span class="line">				&lt;/li&gt;</span><br><span class="line">			&lt;/ul&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>实现步骤:</p>
<ol>
<li><p>渲染评论列表</p>
<ol>
<li>在state中初始化列表数据</li>
<li>使用数组的map方法遍历state中的列表数据</li>
<li>给每个被遍历的元素添加key属性</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	评论列表案例</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	comments: [</span></span><br><span class="line"><span class="comment">		&#123;id: 1, name: &#x27;jack&#x27;, content: &#x27;沙发!!!&#x27;&#125;,</span></span><br><span class="line"><span class="comment">		&#123;id: 2, name: &#x27;rose&#x27;, content: &#x27;板凳~~&#x27;&#125;,</span></span><br><span class="line"><span class="comment">		&#123;id: 3, name: &#x27;tom&#x27;, content: &#x27;楼主好人~&#x27;&#125;</span></span><br><span class="line"><span class="comment">	]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;/.index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化状态</span></span><br><span class="line">	state =&#123;</span><br><span class="line">		comments: [</span><br><span class="line">		&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;沙发!!!&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;板凳~~&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;楼主好人~&#x27;</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input className=<span class="string">&quot;user&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入评论人&quot;</span> /&gt;</span><br><span class="line">				&lt;br /&gt;</span><br><span class="line">				&lt;textarea </span><br><span class="line">					className=<span class="string">&quot;content&quot;</span></span><br><span class="line">					cols=<span class="string">&quot;30&quot;</span></span><br><span class="line">					rows=<span class="string">&quot;10&quot;</span></span><br><span class="line">					placeholder=<span class="string">&quot;请输入评论内容&quot;</span></span><br><span class="line">				/&gt;</span><br><span class="line">				&lt;br /&gt;</span><br><span class="line">				&lt;button&gt;发表评论&lt;/button&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">			&lt;div className=<span class="string">&quot;no-comment&quot;</span>&gt;暂无评论,快去评论吧~&lt;/div&gt;</span><br><span class="line">			&lt;ul&gt;</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">this</span>.state.comments.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">						&lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">							&lt;h3&gt;评论人: &#123;item.name&#125;&lt;/h3&gt;</span><br><span class="line">							&lt;p&gt;评论内容: &#123;item.content&#125;&lt;/p&gt;</span><br><span class="line">						&lt;/li&gt;</span><br><span class="line">					))	</span><br><span class="line">				&#125;</span><br><span class="line">			&lt;/ul&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>渲染暂无评论</p>
<ol>
<li>判断列表数据的长度是否为0</li>
<li>如果为0,则渲染暂无评论</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	评论列表案例</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	comments: [</span></span><br><span class="line"><span class="comment">		&#123;id: 1, name: &#x27;jack&#x27;, content: &#x27;沙发!!!&#x27;&#125;,</span></span><br><span class="line"><span class="comment">		&#123;id: 2, name: &#x27;rose&#x27;, content: &#x27;板凳~~&#x27;&#125;,</span></span><br><span class="line"><span class="comment">		&#123;id: 3, name: &#x27;tom&#x27;, content: &#x27;楼主好人~&#x27;&#125;</span></span><br><span class="line"><span class="comment">	]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;/.index.css&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 初始化状态</span></span><br><span class="line">	state =&#123;</span><br><span class="line">		comments: [</span><br><span class="line">		&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;jack&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;沙发!!!&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;rose&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;板凳~~&#x27;</span>&#125;,</span><br><span class="line">		&#123;<span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;tom&#x27;</span>, <span class="attr">content</span>: <span class="string">&#x27;楼主好人~&#x27;</span>&#125;</span><br><span class="line">		]</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 渲染评论列表</span></span><br><span class="line">	<span class="function"><span class="title">renderList</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="built_in">this</span>.state.comments.length === <span class="number">0</span> ? (</span><br><span class="line">				&lt;div className=<span class="string">&quot;no-comment&quot;</span>&gt;暂无评论,快去评论吧~&lt;/div&gt;</span><br><span class="line">			) : (</span><br><span class="line">				&lt;ul&gt;</span><br><span class="line">				&#123;</span><br><span class="line">					<span class="built_in">this</span>.state.comments.map(<span class="function"><span class="params">item</span> =&gt;</span> (</span><br><span class="line">						&lt;li key=&#123;item.id&#125;&gt;</span><br><span class="line">							&lt;h3&gt;评论人: &#123;item.name&#125;&lt;/h3&gt;</span><br><span class="line">							&lt;p&gt;评论内容: &#123;item.content&#125;&lt;/p&gt;</span><br><span class="line">						&lt;/li&gt;</span><br><span class="line">					))&#125;</span><br><span class="line">			&lt;/ul&gt;</span><br><span class="line">			)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div className=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;input className=<span class="string">&quot;user&quot;</span> type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入评论人&quot;</span> /&gt;</span><br><span class="line">				&lt;br /&gt;</span><br><span class="line">				&lt;textarea </span><br><span class="line">					className=<span class="string">&quot;content&quot;</span></span><br><span class="line">					cols=<span class="string">&quot;30&quot;</span></span><br><span class="line">					rows=<span class="string">&quot;10&quot;</span></span><br><span class="line">					placeholder=<span class="string">&quot;请输入评论内容&quot;</span></span><br><span class="line">				/&gt;</span><br><span class="line">				&lt;br /&gt;</span><br><span class="line">				&lt;button&gt;发表评论&lt;/button&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">				</span><br><span class="line">			&#123;<span class="comment">/*通过条件渲染决定渲染什么内容*/</span>&#125;</span><br><span class="line">			&#123;<span class="built_in">this</span>.renderList()&#125;	</span><br><span class="line">			<span class="comment">/*&#123;this.state.comments.length === 0 ? (</span></span><br><span class="line"><span class="comment">				&lt;div className=&quot;no-comment&quot;&gt;暂无评论,快去评论吧~&lt;/div&gt;</span></span><br><span class="line"><span class="comment">			) : (</span></span><br><span class="line"><span class="comment">				&lt;ul&gt;</span></span><br><span class="line"><span class="comment">				&#123;</span></span><br><span class="line"><span class="comment">					this.state.comments.map(item =&gt; (</span></span><br><span class="line"><span class="comment">						&lt;li key=&#123;item.id&#125;&gt;</span></span><br><span class="line"><span class="comment">							&lt;h3&gt;评论人: &#123;item.name&#125;&lt;/h3&gt;</span></span><br><span class="line"><span class="comment">							&lt;p&gt;评论内容: &#123;item.content&#125;&lt;/p&gt;</span></span><br><span class="line"><span class="comment">						&lt;/li&gt;</span></span><br><span class="line"><span class="comment">					))&#125;</span></span><br><span class="line"><span class="comment">			&lt;/ul&gt;</span></span><br><span class="line"><span class="comment">			)&#125;*/</span>	</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h2 id="7-3-React-组件基础综合案例"><a href="#7-3-React-组件基础综合案例" class="headerlink" title="7.3 React 组件基础综合案例"></a>7.3 React 组件基础综合案例</h2><ol>
<li>案例需求分析<ol>
<li>渲染评论列表(列表渲染)</li>
<li>没有评论数据时渲染: 暂无评论(条件渲染)</li>
<li>获取评论信息,包括评论人和评论内容(受控组件)</li>
<li>发表评论,更新评论列表(setState())</li>
</ol>
</li>
</ol>
<h1 id="四-React组件进阶"><a href="#四-React组件进阶" class="headerlink" title="四. React组件进阶"></a>四. React组件进阶</h1><h2 id="1-组件通讯介绍"><a href="#1-组件通讯介绍" class="headerlink" title="1. 组件通讯介绍"></a>1. 组件通讯介绍</h2><h2 id="2-组件的props"><a href="#2-组件的props" class="headerlink" title="2. 组件的props"></a>2. 组件的props</h2><ul>
<li>组件是封闭的,要接收外部数据应该通过props来实现</li>
<li>props的作用: 接收传递给组件的数据</li>
<li>传递数据: 给组件标签添加属性</li>
<li>接收数据: 函数组件通过参数props接收数据,类组件通过this.props接收数据</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">props</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="comment">// 2. 接收数据</span></span><br><span class="line"><span class="keyword">const</span> Hello = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="comment">// props是一个对象</span></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			<span class="comment">// 3. 使用</span></span><br><span class="line">			&lt;h1&gt;props: &#123;props.name&#125;&lt;/h1&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 传递数据</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> <span class="attr">name</span>=<span class="string">&quot;jack&quot;</span> <span class="attr">age</span>=<span class="string">&#123;19&#125;</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">props</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="comment">// 2. 接收数据</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="comment">// console.log(this.props);</span></span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;props:&#x27;</span>, props)</span><br><span class="line">		props.fn()</span><br><span class="line"></span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				&lt;h1&gt;props:&#123;<span class="built_in">this</span>.props.age&#125;&lt;/h1&gt;</span><br><span class="line">				&#123;props.tag&#125;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 传递数据</span></span><br><span class="line">ReactDOM.render(</span><br><span class="line">	&lt;Hello </span><br><span class="line">		name=<span class="string">&quot;rose&quot;</span> </span><br><span class="line">		age=&#123;<span class="number">19</span>&#125; </span><br><span class="line">		colors=&#123;[<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>]&#125; </span><br><span class="line">		fn=&#123;[<span class="function">() =&gt;</span> <span class="built_in">console</span>.log(<span class="string">&#x27;这是一个函数&#x27;</span>)]&#125; </span><br><span class="line">		tag=&#123;<span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>&#125;</span><br><span class="line">	/&gt;, </span><br><span class="line">	<span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>特点:</p>
<ol>
<li><p>可以传递任意类型的数据</p>
</li>
<li><p>props是只读的对象, 只能读取属性的值,无法修改对象</p>
</li>
<li><p>注意: 使用类组件时, 如果写了构造函数,应该将props传递给super() , 否则, 无法在构造函数中获取到props!</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="comment">// 推荐使用props作为constructor的参数!</span></span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params">props</span>)</span>&#123;</span><br><span class="line">		<span class="built_in">super</span>(props)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">console</span>.log(props)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;render:&#x27;</span>, <span class="built_in">this</span>.props)	</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;</span><br><span class="line">			&lt;h1&gt;props: &lt;/h1&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="3-组件通讯的三种方式"><a href="#3-组件通讯的三种方式" class="headerlink" title="3. 组件通讯的三种方式"></a>3. 组件通讯的三种方式</h3><p>组件之间的通讯分为3种:</p>
<ol>
<li>父组件 - &gt; 子组件</li>
<li>子组件 - &gt; 父组件</li>
<li>兄弟组件</li>
</ol>
<p>3.1 父组件传递数据给子组件</p>
<ol>
<li>父组件提供要传递的state数据</li>
<li>给子组件标签添加属性, 值为state中的数据</li>
<li>子组件中通过props接受父组件中传递的数据</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		lastName: <span class="string">&#x27;王&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div className=<span class="string">&quot;parent&quot;</span>&gt;</span><br><span class="line">				父组件:</span><br><span class="line">				&lt;child name=&#123;<span class="built_in">this</span>.state.lastName&#125;/&gt;</span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="keyword">const</span> Child = <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">&#x27;子组件&#x27;</span>, props)</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div className=<span class="string">&quot;child&quot;</span>&gt;</span><br><span class="line">			&lt;p&gt;子组件,接收到父组件的数据: &#123;props.name&#125;&lt;/p&gt;</span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Parent</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<p>3.2 子组件传递数据给父组件</p>
<p>思路: 利用回调函数,父组件提供回调,子组件调用,将要传递的数据作为回调函数的参数</p>
<ol>
<li>父组件提供一个回调函数(用于接收数据)</li>
<li>将该函数作为属性的值,传递给子组件</li>
<li>子组件通过props调用回调函数</li>
<li>将子组件的数据作为参数传递给回调函数</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		parentMsg: <span class="string">&#x27;&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 提供回调函数,用来接收数据</span></span><br><span class="line">	getChildMsg = <span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;接收到子组件中传递过来的数据&#x27;</span>, data)</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">			parentMsg: data</span><br><span class="line">		&#125;)</span><br><span class="line">	&#125; </span><br><span class="line">		</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;</span><br><span class="line">				子组件: <span class="xml"><span class="tag">&lt;<span class="name">Child</span> <span class="attr">getMsg</span>=<span class="string">&#123;this.getChildMsg&#125;</span> /&gt;</span></span></span><br><span class="line">			&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 子组件</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		msg: <span class="string">&#x27;刷抖音&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	handClick = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">		<span class="comment">// 子组件调用父组件中传递过来的回调函数</span></span><br><span class="line">		<span class="built_in">this</span>.props.getMsg()</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		&lt;div className=<span class="string">&quot;child&quot;</span>&gt;</span><br><span class="line">			子组件: <span class="xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>点我,给父组件传递数据<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">		&lt;/div&gt;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3.3 兄弟组件</p>
<ul>
<li>将共享状态提升到最近的公共父组件中,由公共父组件管理这个状态</li>
<li>思想: 状态提升</li>
<li>公共父组件职责: 1. 提供共享状态 2. 提供操作共享状态的方法</li>
</ul>
<h3 id="4-Context"><a href="#4-Context" class="headerlink" title="4. Context"></a>4. Context</h3><p>作用 : 跨组件传递数据(比如: 主题,语言等)</p>
<p>使用步骤:</p>
<ol>
<li><p>调用React.createContext()创建Provider(提供数据)和Consumer(消费数据)两个组件.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; Provider, Consumer &#125; = React.createContext()</span><br></pre></td></tr></table></figure></li>
<li><p>使用Provider组件作为父节点.</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Provider&gt;</span><br><span class="line">	&lt;div className=<span class="string">&quot;App&quot;</span>&gt;</span><br><span class="line">		&lt;child1 /&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">&lt;/Provider&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>设置value属性,表示要传递的数据</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Provider value=<span class="string">&quot;pink&quot;</span>&gt;</span><br></pre></td></tr></table></figure></li>
<li><p>使用Consumer组件接收数据</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;Consumer&gt;</span><br><span class="line">	&#123;<span class="function"><span class="params">data</span> =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">span</span>&gt;</span>data参数表示接收到的数据 -- &#123;data&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span>&#125;</span><br><span class="line">&lt;/Consumer&gt;</span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="5-props深入"><a href="#5-props深入" class="headerlink" title="5. props深入"></a>5. props深入</h3><p>5.1. children属性</p>
<ul>
<li>children属性: 表示组件婊气啊俺的子节点.当组件标签有子节点时,props就会有该属性</li>
</ul>
<p>5.2. prpos校验</p>
<ol>
<li><p>安装包props-types( yarn add prop-types/npm i props-types)</p>
</li>
<li><p>导入props-types包</p>
</li>
<li><p>使用组件名.propTypes = {} 来给组件的props添加校验规则</p>
</li>
<li><p>校验规则通过PropTypes对象来指定</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> PropTypes <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params">props</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;h1&gt;Hi,&#123;props.colors&#125;&lt;/h1&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line">App.propTypes = &#123;</span><br><span class="line">	<span class="comment">// 约定colors属性为array类型</span></span><br><span class="line">	<span class="comment">// 如果类型不对,则爆出明确错误,便于分析错误原因</span></span><br><span class="line">	colors: PropTypes.array</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay5</title>
    <url>/2021/04/23/vueDay5/</url>
    <content><![CDATA[<h3 id="一、Promise"><a href="#一、Promise" class="headerlink" title="一、Promise"></a>一、Promise</h3><h4 id="1-1-是什么？"><a href="#1-1-是什么？" class="headerlink" title="1.1. 是什么？"></a>1.1. 是什么？</h4><p>Promise是异步编程的一种解决方案。</p>
<h4 id="1-2-做什么？"><a href="#1-2-做什么？" class="headerlink" title="1.2. 做什么？"></a>1.2. 做什么？</h4><p>用于网络请求非常复杂的情形下</p>
<p>口一种很常见的场景应该就是网络请求了<br>口我们封装一个网络请求的函数,因为不能立即拿到结果,所以不能像简单的3+4=7—样将结果返回<br>口所以往往我们会传入另外一个函数,在数据请求成功时,将数据通过传入的函数回调出去<br>口如果只是一个简单的网络请求,那么这种方案不会给我们带来很大的麻烦。</p>
<p>■但是,当网络请求非常复杂时,就会出现回调地狱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  什么情况下会用到Promise?</span></span><br><span class="line">  <span class="comment">//  一般情况下是有一些异步操作的时，使用promise对这个一步操作进行封装</span></span><br><span class="line">  <span class="comment">// executor:执行</span></span><br><span class="line">  <span class="comment">// new -&gt; 构造函数(1.保存了一些状态 2.执行传入的函数)</span></span><br><span class="line">  <span class="comment">// 在执行传入的回调函数时，会传入两个参数，resolve,reject，这两个参数本身又是函数</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失败的时候调用reject</span></span><br><span class="line">      reject(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">      <span class="comment">// 成功的时候调用resolve</span></span><br><span class="line">      <span class="comment">// resolve(&#x27;Hello World&#x27;)</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 100行的处理代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-promise的三种状态"><a href="#1-3-promise的三种状态" class="headerlink" title="1.3. promise的三种状态"></a>1.3. promise的三种状态</h4><ul>
<li>pending:等待状态,比如正在进行网络请求,或者定时<br>器没有到时间。</li>
<li>fufl:满足状态,当我们主动回调了 resolve时,就处于<br>该状态,并且会回调then0</li>
<li>reject:拒绝状态,当我们主动回调了 reject时,就处于该<br>状态,并且会回调 catch0</li>
</ul>
<p><img src="/2021/04/23/vueDay5/promise%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81.jpg"></p>
<p>sync→&gt;同步(synchronization)<br>asnc→&gt;异步(asynchronization)</p>
<p>asnc operation异步操作</p>
<p>wropped into 包裹进去</p>
<p>另一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;Hello World&#x27;)</span></span><br><span class="line">        reject(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then((<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;), <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-4-Promise链式调用："><a href="#1-4-Promise链式调用：" class="headerlink" title="1.4. Promise链式调用："></a>1.4. Promise链式调用：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链式编程</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一次网络请求的代码</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一次拿到结果的处理代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//第二次网络请求的代码</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//第二次拿到结果的处理代码</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//第三次网络请求的代码</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//第三次拿到结果的处理代码</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapped into</span></span><br><span class="line">   <span class="comment">// 网络请求: aaa -&gt; 自己处理(10行)</span></span><br><span class="line">   <span class="comment">// 处理: aaa111 -&gt; 自己处理(10行)</span></span><br><span class="line">   <span class="comment">// 处理: aaa111222 -&gt; 自己处理</span></span><br><span class="line">  <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">      resolve(&#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;, 1000)</span></span><br><span class="line"><span class="comment">  &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     // 1.自己处理10行代码</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第一层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     // 2.对结果进行第一次处理</span></span><br><span class="line"><span class="comment">     return new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(res + &#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第二层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     return new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(res + &#x27;222&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log((res + &#x27;第三层的10行处理代码&#x27;))</span></span><br><span class="line"><span class="comment">   &#125;)*/</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// new Promise(resolve =&gt; resolve(结果))简写</span></span><br><span class="line">   <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(&#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;, 1000)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     // 1.自己处理10行代码</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第一层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     // 2.对结果进行第一次处理</span></span><br><span class="line"><span class="comment">     return Promise.resolve(res + &#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第二层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     return Promise.resolve(res + &#x27;222&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log((res + &#x27;第三层的10行处理代码&#x27;))</span></span><br><span class="line"><span class="comment">   &#125;)*/</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 继续简写</span></span><br><span class="line">   <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(&#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;, 1000)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     // 1.自己处理10行代码</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第一层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     // 2.对结果进行第一次处理</span></span><br><span class="line"><span class="comment">     return (res + &#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第二层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     return (res + &#x27;222&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log((res + &#x27;第三层的10行处理代码&#x27;))</span></span><br><span class="line"><span class="comment">   &#125;)*/</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 失败了时</span></span><br><span class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">     <span class="built_in">console</span>.log(res, <span class="string">&#x27;第一层的10行处理代码&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.对结果进行第一次处理</span></span><br><span class="line">     <span class="comment">// return Promise.reject(&#x27;error message&#x27;)</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="string">&#x27;error message&#x27;</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res, <span class="string">&#x27;第二层的10行处理代码&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> (res + <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log((res + <span class="string">&#x27;第三层的10行处理代码&#x27;</span>))</span><br><span class="line">   &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-5-Promise的all方法使用"><a href="#1-5-Promise的all方法使用" class="headerlink" title="1.5. Promise的all方法使用"></a>1.5. Promise的all方法使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      $.ajax(&#123;</span></span><br><span class="line"><span class="comment">        url: &#x27;url1&#x27;,</span></span><br><span class="line"><span class="comment">        success: function (data) &#123;</span></span><br><span class="line"><span class="comment">          resolve(data)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;)</span></span><br><span class="line"><span class="comment">    &#125;),</span></span><br><span class="line"><span class="comment">    new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      $.ajax(&#123;</span></span><br><span class="line"><span class="comment">        url: &#x27;url2&#x27;,</span></span><br><span class="line"><span class="comment">        success: function (data) &#123;</span></span><br><span class="line"><span class="comment">          resolve(data)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;)</span></span><br><span class="line"><span class="comment">    &#125;)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;result1&#x27;)</span></span><br><span class="line">        resolve(&#123;<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;result2&#x27;)</span></span><br><span class="line">        resolve(&#123;<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*results[0]</span></span><br><span class="line"><span class="comment">    results[1]*/</span></span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="二、Vuex"><a href="#二、Vuex" class="headerlink" title="二、Vuex"></a>二、Vuex</h3><h4 id="2-1-Vuex是做什么的"><a href="#2-1-Vuex是做什么的" class="headerlink" title="2.1. Vuex是做什么的"></a>2.1. Vuex是做什么的</h4><ul>
<li>官方解释:Vuex是一个专为 Vue. js应用程序开发的<strong>状态管理</strong>模式<ul>
<li>它采用集中式存储管理应用的所有组件的状态,并以相应的规则保证状态以一种可预测的方式发生变化。</li>
<li>Vuex也集成到Vue的官方调试工具 devtools extension,提供了诸如零配置的time- travel调试、状态快照导入导出等高级调试功能。</li>
</ul>
</li>
<li>状态管理到底是什么?<ul>
<li>状态管理模式、集中式存储管理这些名词听起来就非常高大上,让人捉摸不透。</li>
<li>其实,你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。</li>
<li>然后,将这个对象放在顶层的Vue实例中,让其他组件可以使用。</li>
<li>那么,多个组件就可以共享这个对象中的所有变量属性</li>
</ul>
</li>
</ul>
<h4 id="2-2-管理什么状态"><a href="#2-2-管理什么状态" class="headerlink" title="2.2. 管理什么状态"></a>2.2. 管理什么状态</h4><ul>
<li>有什么状态时需要我们在多个组件间共享的呢?<ul>
<li>如果你做过大型开放,你一定遇到过多个状态,在多个界面问的共享问题。<ul>
<li>比如用户的登录状态、用户名称、头像、地理位置信息等等。</li>
<li>比如商品的收藏、购物车中的物品等等。</li>
<li>这些状态信息,我们都可以放在统一的地方,对它进行保存和管理,而且它们还是响应式的</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Talk is cheap, Show me the code. （来自LInus)</p>
<p>linus -&gt; linux, git</p>
</blockquote>
<h4 id="2-3-单界面到多界面状态管理切换"><a href="#2-3-单界面到多界面状态管理切换" class="headerlink" title="2.3. 单界面到多界面状态管理切换"></a>2.3. 单界面到多界面状态管理切换</h4><p>单页面管理状态</p>
<p><img src="/2021/04/23/vueDay5/%E5%8D%95%E9%A1%B5%E9%9D%A2%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.jpg"></p>
<p>多界面状态管理</p>
<ul>
<li>全局单例摸式(大管家)<ul>
<li>我们现在要做的就是将共享的状态抽取出来,交给我们的大管家,统一进行管理</li>
<li>之后,你们每个试图,按照我规定好的规定,进行访问和修改等操作。</li>
<li>这就是vuex背后的基本思想</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm intall vuex --save</span><br></pre></td></tr></table></figure>

<p>store-&gt; index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 导出store独享</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>App.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;--------App内容-------------&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--    &lt;h2&gt;&#123;&#123; counter &#125;&#125;&lt;&#x2F;h2&gt;--&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;button @click&#x3D;&quot;counter&amp;#45;&amp;#45;&quot;&gt;-&lt;&#x2F;button&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;button @click&#x3D;&quot;counter++&quot;&gt;+&lt;&#x2F;button&gt;--&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;addition&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;subtraction&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;----------Hello Vuex内容---------&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--    &lt;hello-vuex :counter&#x3D;&quot;counter&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;hello-vuex &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloVuex from &quot;.&#x2F;components&#x2F;HelloVuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloVuex</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;我是App组件&#39;,</span><br><span class="line">      &#x2F;&#x2F; counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addition()&#123;</span><br><span class="line">      this.$store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    subtraction()&#123;</span><br><span class="line">      this.$store.commit(&#39;decrement&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Vue状态管理图例"><a href="#2-4-Vue状态管理图例" class="headerlink" title="2.4. Vue状态管理图例"></a>2.4. Vue状态管理图例</h4><p><img src="/2021/04/23/vueDay5/vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%9B%BE%E4%BE%8B.jpg"></p>
<h4 id="2-5-vuex核心概念"><a href="#2-5-vuex核心概念" class="headerlink" title="2.5. vuex核心概念"></a>2.5. vuex核心概念</h4><ul>
<li>State 保存共享状态 -&gt;单一状态数</li>
<li>Getters 类似于组件中计算属性</li>
<li>Mutation 状态更新</li>
<li>Action 异步操作</li>
<li>Module 划分模块</li>
</ul>
<h5 id="2-5-1-State单一状态树"><a href="#2-5-1-State单一状态树" class="headerlink" title="2.5.1 State单一状态树"></a>2.5.1 State单一状态树</h5><p>（Single Source of Truth，可以翻译成单一数据源）<br>如果你的状态信息是保存到多个 Store对象中的,那么之后的管理和维护等等都会变得特别困难。<br>所以∨uex也使用了单一状态树来管理应用层级的全部状态。<br>单一状态树能够让我们最直接的方式找到某个状态的片段,而且在之后的维护和调试过程中,也可以非常方便的管理和维护。</p>
<h5 id="2-5-2-Getters基本使用"><a href="#2-5-2-Getters基本使用" class="headerlink" title="2.5.2. Getters基本使用"></a>2.5.2. Getters基本使用</h5><p>需要从 store中获取一些 state变异后的状态</p>
<p><img src="/2021/04/23/vueDay5/Getters%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.jpg"></p>
<h5 id="2-5-3-Mutation状态更新"><a href="#2-5-3-Mutation状态更新" class="headerlink" title="2.5.3 Mutation状态更新"></a>2.5.3 Mutation状态更新</h5><ol>
<li><strong>Vuex的 store状态的更新唯一方式:提交 Mutation</strong></li>
</ol>
<ul>
<li> Mutation主要包括两部分:</li>
<li>字符串的事件类型(type)</li>
<li>一个回调函数( handler),该回调函数的第一个参数就是 state</li>
</ul>
<ol start="2">
<li>Mutation传递参数<br>参数被称为是 mutation的载荷( Payload)<br>■ Mutation中的代码:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">decrement</span>(<span class="params">state, n</span>)</span> &#123;</span><br><span class="line">  state.count -= n</span><br><span class="line">&#125;</span><br><span class="line">decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;decrement&#x27;</span>, <span class="number">2</span> )</span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>

<p>很多参数需要传递,通常会以对象的形式传递也就是 payload是一个对象，可以再从对象中取出相关的信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">changeCount</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">  state.count = payload.count</span><br><span class="line">&#125;</span><br><span class="line">changeCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;changeCount&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Mutation提交风格<ol>
<li>上面的通过 commit进行提交是种普通的方式</li>
<li>Vue还提供了另外一种风格,它是一个包含type属性的对象</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// payload: 负载</span></span><br><span class="line">      <span class="comment">// 1. 普通的提交封装</span></span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&quot;incrementCount&quot;</span>, count)</span><br><span class="line">    <span class="comment">//  2. 特出的提交封装</span></span><br><span class="line">      <span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">        type: <span class="string">&#x27;incrementCount&#x27;</span>,</span><br><span class="line">        count</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Mutation响应规则</li>
</ol>
<ul>
<li>Vuex的 store中的 state是响应式的,当 state中的数据发生改变时,Wue组件会自动更新</li>
<li>这就要求我们必须遵守一些vuex对应的规则:<ul>
<li>提前在 store中初始化好所需的属性.</li>
<li>当给 state中的对象添加新属性时,使用下面的方式</li>
</ul>
</li>
</ul>
<blockquote>
<p>方式一:使用 Vue. set(obj, newProp,123)<br>方式二:用新对象给旧对象重新赋值</p>
</blockquote>
<ol start="5">
<li><p>Mutation常量类型一概念</p>
<ul>
<li>我们来考虑下面的问题<ul>
<li>在 mutation中我们定义了很多事件类型(也就是其中的方法名称）</li>
<li>当我们的项目增大时,Wuex管理的状态越来越多,需要更新状态的情况越来越多,那么意味着 Mutation中的方法越来越多</li>
<li>方法过多,使用者需要花费大量的经历去记住这些方法甚至是多个文件间来回切换查看方法名称甚至如果不<br>是复制的时候可能还会出现写铠的情况</li>
</ul>
</li>
</ul>
</li>
<li><p>Mutation同步函数</p>
<ul>
<li>通常情况下,∨uex要求我们 Mutation中的方法必须是同步方法</li>
<li>主要的原因是当我们使用 devtools时,可以 devtools可以帮助我们捕捉 mutation的快照</li>
<li>但是如果是异步操作,那么 devtools将不能很好的追踪这个操作什么时候会被完成</li>
</ul>
</li>
</ol>
<h4 id="2-6Action的基本定义"><a href="#2-6Action的基本定义" class="headerlink" title="2.6Action的基本定义"></a>2.6Action的基本定义</h4><p>我们强调,不要再 Mutation中进行异步操作<br>口但是某些情况我们确实希望在vUex味进行些异步操作比如网络请求必<br>然是异步的这个时候怎么处理呢<br>口 Action类似于 Mutation,但是是用来代替 Mutation进行异步操作的</p>
<h4 id="2-7-认识Module"><a href="#2-7-认识Module" class="headerlink" title="2.7. 认识Module"></a>2.7. 认识Module</h4><p>Module是模块的意思,为什么在vuex中我们要使用模块呢?<br>口Vue使用单一状态树那么也意味着很多状态都会交给<br>Vuex来管理<br>口当应用变得非常复杂时, store对象就有可能变得相当臃<br>肿<br>口为了解决这个问题Vuex允许我们将 store分割成模块<br>( Module),而每个模块拥有自己的 Istate、 mutations<br>actions、 getters等<br>■我们按照什么样的方式来组织模块呢?<br>口我们来看左边的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state:&#123;&#125;,</span><br><span class="line">  mutations:&#123;&#125;,</span><br><span class="line">	actions:&#123;&#125;,</span><br><span class="line">	getters:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state:&#123;&#125;,</span><br><span class="line">  mutations:&#123;&#125;,</span><br><span class="line">	actions:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store([</span><br><span class="line">	modules: &#123;</span><br><span class="line">  	a: moduleA,</span><br><span class="line">  	b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">//-&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">//-&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<p>ES6语法：(对象的解构)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Const obj=&#123;</span><br><span class="line">	name: <span class="string">&#x27;why&#x27;</span></span><br><span class="line">	age: <span class="number">18</span>,</span><br><span class="line">	height: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, age, height&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<p>Actions的写法<br>■ actions的写法呢?接收一个 context参数对象<br>口局部状态通过 context.state暴露出来,根节点状态则为 context.rootState. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">actions: &#123;</span><br><span class="line">  incrementIfoddOnRootSum (&#123; state, commit, rootState &#125;)&#123;</span><br><span class="line">    <span class="keyword">if</span> ((state.count + rootState.count)% <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>■如果 getters中也需要使用全局的状态,可以接受更多的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumwithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state. count root state. coun</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三、网络请求封装"><a href="#三、网络请求封装" class="headerlink" title="三、网络请求封装"></a>三、网络请求封装</h3><h4 id="3-1-选择什么网络模块"><a href="#3-1-选择什么网络模块" class="headerlink" title="3.1. 选择什么网络模块"></a>3.1. 选择什么网络模块</h4><p>主要内容<br>■常见的网络请求模块,以及优缺点对比<br>JSONP的原理和封装<br>口 JSONP原理回顾<br>口 JSONP请求封装<br>■ axIos的内容详解<br>口认识 axIos网络模块<br>口发送基本请求<br>口 axIos创建实例<br>口 axIos拦截器的使用</p>
<p>选择什么网络模块？<br>vue中发送网络请求有非常多的方式那么在开发中如何选择呢？<br>选择一: 传统的Ajax是基于 XmlHttpreqUesT(xhr)<br>为什么不用它呢?</p>
<ul>
<li>非常好解释,配置和调用方式等非常混乱</li>
<li>编码起来看起来就非常蛋疼</li>
<li>所以真实开发中很少直接使用,而是使用 Query-Ajax</li>
</ul>
<p>■选择二:在前面的学习中,我们经常会使用 jQuery-Ajax</p>
<ul>
<li><p>相对于传统的Aax非常好用</p>
<p>■为什么不选择它呢?</p>
<ul>
<li>首先,我们先明确一点:在vue的整个开发中都是不需要<br>使用 jQuery了</li>
<li>那么,就意味着为了方便我们进行一个网络请求,特意引<br>用一个 jQuery你觉得合理吗?</li>
<li>jQuery的代码1w+行</li>
<li>vue的代码才1W+行</li>
<li>完全没有必要为了用网络请求就引用这个重量级的框架</li>
</ul>
</li>
</ul>
<p>选择三:官方在vue1.x的时候推出了vue- resource</p>
<ul>
<li>vue- resource的体积相对于 jQuery小很多</li>
<li>另外vue- resource是官方推出的.<br>为什么不选择它呢?<ul>
<li>在vue20退出后,ue作者就在 GitHubl的 ISsues中说明<br>了去掉vue- resource,并且以后也不会再更新</li>
<li>那么意味着以后vue- reource不再支持新的版本时,也不<br>会再继续更新和维护</li>
<li>对以后的项目开发和维护都存在很大的隐患</li>
</ul>
</li>
</ul>
<p>■选择四:在说明不再继续更新和维护vue- resource的同时,作者<br>还推荐了一个框架: axIos</p>
<ul>
<li>axIos有非常多的优点并且用起来也非常方便</li>
</ul>
<h4 id="3-2jsonp"><a href="#3-2jsonp" class="headerlink" title="3.2jsonp"></a>3.2jsonp</h4><p>在前端开发中,我们种常见的网络请求方式就是丿SONP<br>口使用 JSONP最主要的原因往往是为了解决跨域访问的问题.<br>JSONPI的原理是什么呢?<br>口 JSONP的核心在于通过&lt; script&gt;标签的src来帮助我们请求数据.<br>口原因是我们的项目部署在 domain1com服务器上时,是不能直接访<br>问 domain2com服务器上的资料的<br>口这个时候我们利用&lt; script&gt;标签的src帮助我们去服务器请求到数<br>据将数据当做个 javascript的函数来执行并且执行的过程中传<br>入我们需要的json<br>口所以封装 ason的核心就在于我们监听 window上的 Jsonp进行回<br>调时的名称</p>
<p>3.3. 为什么选择axios</p>
<p>■功能特点<br>口在浏览器中发送 XmlhTtpreqUesTs请求<br>口在nodejs中发送http请求<br>口支持 Promise APi<br>口拦截请求和响应<br>口转换请求和响应数据<br>口等等</p>
<p>补充: axios名称的由来?个人理解<br>没有具体的翻译.<br>aXIOs: ajax l/onSystem</p>
<p>axios请求方式<br>■支持多种请求方式</p>
<ul>
<li>axIos( config)</li>
<li>axios request(config)</li>
<li>axiosget(url, config])</li>
<li>axios delete(url config])</li>
<li>axios head(url config)</li>
<li>axios post(url[ dataL config])</li>
<li>axios put(urIL dataL, config])</li>
<li>axios patch(url[, dataL, config])</li>
</ul>
<h4 id="3-3-axios框架的基本使用"><a href="#3-3-axios框架的基本使用" class="headerlink" title="3.3. axios框架的基本使用"></a>3.3. axios框架的基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line"></span><br><span class="line">main.js</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// axios(config)</span></span><br><span class="line"><span class="comment">// config是一个对象类型</span></span><br><span class="line">axios (&#123;</span><br><span class="line">  <span class="comment">//url: &#x27;httpbin.org/&#x27; 这个可以用来测试</span></span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,</span><br><span class="line">  methods: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios (&#123;</span></span><br><span class="line"><span class="comment">  //url: &#x27;httpbin.org/&#x27; 这个可以用来测试</span></span><br><span class="line"><span class="comment">  url: &#x27;http://123.207.32.32:8000/home/data?type=sell&amp;page=3&#x27;,</span></span><br><span class="line"><span class="comment">&#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(res);</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line">axios (&#123;</span><br><span class="line">  <span class="comment">//url: &#x27;httpbin.org/&#x27; 这个可以用来测试</span></span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  <span class="comment">// 专门针对get请求的参数拼接</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.4. axios发送并发请求</p>
<ul>
<li>axios.all，可以放入多个请求的数组</li>
<li>axios.all([])返回的结果是一个数组，使用axios.spread可将数组[res1,res2]展开为res1,res2</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. axios发送并发请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios.all([axios(&#123;</span></span><br><span class="line"><span class="comment">  url: &#x27;http://123.207.32.32:8000/home/multidata&#x27;,</span></span><br><span class="line"><span class="comment">&#125;), axios(&#123;</span></span><br><span class="line"><span class="comment">  url: &#x27;http://123.207.32.32:8000/home/data&#x27;,</span></span><br><span class="line"><span class="comment">  params: &#123;</span></span><br><span class="line"><span class="comment">    type: &#x27;sell&#x27;,</span></span><br><span class="line"><span class="comment">    page: 5</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)]).then(results =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(results);</span></span><br><span class="line"><span class="comment">  console.log(results[0]);</span></span><br><span class="line"><span class="comment">  console.log(results[1]);</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,</span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">    page: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).then(axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1);</span><br><span class="line">  <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>3.4. 全局配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span>,</span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">    page: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).then(axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1);</span><br><span class="line">  <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h4 id="3-4-常见配置选项"><a href="#3-4-常见配置选项" class="headerlink" title="3.4. 常见配置选项"></a>3.4. 常见配置选项</h4><p><img src="/2021/04/23/vueDay5/axios%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9.jpg"></p>
<h4 id="3-5-创建对应的axios实例"><a href="#3-5-创建对应的axios实例" class="headerlink" title="3.5. 创建对应的axios实例"></a>3.5. 创建对应的axios实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 创建对应的axios实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseUrl: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instence2 = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-封装request模块"><a href="#3-6-封装request模块" class="headerlink" title="3.6. 封装request模块"></a>3.6. 封装request模块</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5. 封装request模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;./network/request&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">request(&#123;</span></span><br><span class="line"><span class="comment">  url: &#x27;/home/multidata&#x27;</span></span><br><span class="line"><span class="comment">&#125;, res =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(res);</span></span><br><span class="line"><span class="comment">&#125;, err =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(err);</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>network -&gt; request.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">export function request(config) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1. 创建axios实例</span><br><span class="line">  const instance &#x3D; axios.create(&#123;</span><br><span class="line">    baseUrl: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,</span><br><span class="line">    timeout: 5000</span><br><span class="line">  &#125;)</span><br><span class="line">  &#x2F;&#x2F; 2. 发送真正的网络请求</span><br><span class="line">  return instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-axios的拦截器"><a href="#3-7-axios的拦截器" class="headerlink" title="3.7. axios的拦截器"></a>3.7. axios的拦截器</h4><ul>
<li>请求拦截的作用</li>
<li>响应拦截</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 创建axios实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseUrl: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2. axios的拦截器</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(config);</span></span><br><span class="line">    <span class="comment">// 2.1 请求拦截的作用</span></span><br><span class="line">    <span class="comment">// 1.比如config中的一些信息不符合服务器要求</span></span><br><span class="line">    <span class="comment">// 2.比如每次发送网络请求时，都希望在界面中显示一个请求的图标 show</span></span><br><span class="line">    <span class="comment">// 3.某些网络请求（比如登陆（token）），必须携带一些特殊信息</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(err);</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2.2 响应拦截</span></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(res);</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;), <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、项目开发"><a href="#四、项目开发" class="headerlink" title="四、项目开发"></a>四、项目开发</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:yzhou15/supermall.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<h4 id="4-1-划分目录结构"><a href="#4-1-划分目录结构" class="headerlink" title="4.1. 划分目录结构"></a>4.1. 划分目录结构</h4><h4 id="4-2-引入CSS文件"><a href="#4-2-引入CSS文件" class="headerlink" title="4.2. 引入CSS文件"></a>4.2. 引入CSS文件</h4><p>：root 伪类 获取根元素html</p>
<h4 id="4-3-vue-config-js-和-editorconfig"><a href="#4-3-vue-config-js-和-editorconfig" class="headerlink" title="4.3. vue.config.js 和 editorconfig"></a>4.3. vue.config.js 和 editorconfig</h4><p>别名配置vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">&#x27;assets&#x27;</span>: <span class="string">&#x27;@/assets&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;common&#x27;</span>: <span class="string">&#x27;@/common&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;components&#x27;</span>: <span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;network&#x27;</span>: <span class="string">&#x27;@/network&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;views&#x27;</span>: <span class="string">&#x27;@/views&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-4-项目的横向划分：tabbar-gt-路由的映射关系"><a href="#4-4-项目的横向划分：tabbar-gt-路由的映射关系" class="headerlink" title="4.4. 项目的横向划分：tabbar -&gt; 路由的映射关系"></a>4.4. 项目的横向划分：tabbar -&gt; 路由的映射关系</h4><p>以前网页服务端渲染用jsp</p>
<h4 id="4-5-首页开发"><a href="#4-5-首页开发" class="headerlink" title="4.5. 首页开发"></a>4.5. 首页开发</h4><ul>
<li>navbar的封装</li>
<li>网络数据的请求</li>
<li>轮播图</li>
<li>推荐信息</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数调用-&gt; 压入函数栈（保存函数调用过程中的所有变量）</span></span><br><span class="line"><span class="comment">// 函数调用结束 -&gt; 弹出函数栈（释放函数所有的变量）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> names = [<span class="string">&#x27;why&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>垃圾回收</p>
<p><img src="/2021/04/23/vueDay5/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.jpg"></p>
<p>vueui库：mint-ui/iview</p>
<p><img src="/2021/04/23/vueDay5/goods%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.jpg"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>CI/CD入门</title>
    <url>/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<h1 id="第2天-CI-CD入门"><a href="#第2天-CI-CD入门" class="headerlink" title="第2天-CI/CD入门"></a>第2天-CI/CD入门</h1><h2 id="一、代码上线方案"><a href="#一、代码上线方案" class="headerlink" title="一、代码上线方案"></a>一、代码上线方案</h2><h4 id="1、早期手动部署代码"><a href="#1、早期手动部署代码" class="headerlink" title="1、早期手动部署代码"></a>1、早期手动部署代码</h4><ul>
<li>纯手动Scp、Rsync上传代码。</li>
</ul>
<ul>
<li>纯手动登陆，Git pull 或者 Svn update。</li>
</ul>
<ul>
<li>纯手动xftp、ftp、filezilla上传代码。</li>
</ul>
<ul>
<li>开发发送压缩包，rz上传，解压部署代码。</li>
</ul>
<p><strong>缺点：</strong></p>
<ul>
<li>全程运维参与，占用大量时间。</li>
</ul>
<ul>
<li>如果节点多，上线速度慢。</li>
</ul>
<ul>
<li>人为失误多，目录管理混乱。 </li>
</ul>
<ul>
<li>回滚不及时，或者难以回退。</li>
</ul>
<p><strong>上线方案示意图：</strong></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1190037-20171201192743261-564020995-1581427002308.png" alt="img"></p>
<h4 id="2、合理化上线方案"><a href="#2、合理化上线方案" class="headerlink" title="2、合理化上线方案"></a>2、合理化上线方案</h4><ul>
<li>开发人员(rd)需在个人电脑搭建LAMP环境测试开发好的网站代码，并且在办公室或 IDC机房的测试环境测试通过，最好有专职测试人员(ts)。</li>
</ul>
<ul>
<li>程序代码上线要规定时间，例如：三天上线一次，如网站需经常更新可每天下午 20 点上线，这个看网站业务性质而定，原则就是影响用户体验最小。</li>
</ul>
<ul>
<li>代码上线之前需备份，网站程序出了问题方便回退，另外，从上线技巧上讲，上传代码时尽可能先传到服务器网站临时目录，传完整后一步mv过去，或者通过In做软链接— 线上更新代码的思路。如果严格更新，把应用服务器从集群节点平滑下线，然后更新。</li>
</ul>
<ul>
<li>尽量由运维人员管理上线，对于代码的功能性，开发人员更在意，而对于代码的性能优化和上线后服务器的稳定，运维更在意服务器的稳定，因此，如果网站宕机问题归运维管，就要让运维上线，这样更规范科学。否则，开发随意更新，出了问题运维负责，这样就错了，运维永远无法抬头。</li>
</ul>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1190037-20171201192752386-122301749-1581427002308.png" alt="img"></p>
<p>​                                                         <strong>web代码规范化上线流程图</strong></p>
<h4 id="3、大型企业上线制度和流程"><a href="#3、大型企业上线制度和流程" class="headerlink" title="3、大型企业上线制度和流程"></a>3、大型企业上线制度和流程</h4><p><strong>JAVA代码环境</strong>上线时，有数台机器同时需要更新或者分批更新 </p>
<ul>
<li><p>本地开发人员取svn代码。当天上线提交到trunk，否则，长期项目单开分支开发，然后在合并主线(trunk)</p>
</li>
<li><p>办公内网开发测试时，由开发人员或配置管理员通过部署平台jenkins实现统一部署，（即在部署平台上控制开发机器从svn取代码，编译，打包，发布到开发机，包名如idc_dep.war）.</p>
</li>
<li><p>开发人员通知或和测试人员一起测试程序，没有问题后，由配置管理员打上新的tag标记。这里要注意，不同环境的配置文件是随代码同时发布的。</p>
</li>
<li><p>配置管理员，根据上一步的tag标记，checkout出上线代码，并配置好IDC测试环境的所有配置，执行编译，打包(mvn,ant)(php不需要打包)，然后发布到IDC内的统一分发服务器。</p>
</li>
<li><p>配置管理员或SA上线人员，把分发的程序代码内容推送到相关测试服务器（包名如idc_test.war），然后通知开发及测试人员进行测试。如果有问题向上回退，继续修改。</p>
</li>
<li><p>如果IDC测试没有问题，继续打好tag标记，此时，配置管理员，根据上步的tag标记，checkout出测试好的代码，并配置好IDC正式环境的所有配置，执行编译，打包(mvn,ant)(php不需要打包)，然后发布到IDC内的统一分发服务器主机，准备批量发布。</p>
</li>
<li><p>配置管理员或SA上线人员，把分发的内容推送到相关正式服务器（包名如idc_product.war）,然后通知开发及测试人员进行测试。如果有问题直接发布回滚指令。  </p>
</li>
</ul>
<p> IDC正式上线的过程对于JAVA程序，可以是AB组分组上线的思路，即平滑下线一半的服务器，然后发布更新代码，重启测试，无问题后，挂上更新后的服务器，同时再平滑下线另一半的服务器，然后发布更新代码测试（或者直接发布后，重启，挂上线）</p>
<h4 id="4-、php程序代码上线的具体方案"><a href="#4-、php程序代码上线的具体方案" class="headerlink" title="4 、php程序代码上线的具体方案"></a>4 、php程序代码上线的具体方案</h4><p> 对于PHP上线方法：发布代码时（也需要测试流程）可以直接发布到正式线临时目录 ，然后mv或更改link的方式发布到正式上线目录 ，不需要重启http服务。这是新朗，赶集的上线方案。</p>
<h4 id="5-、Java程序代码上线的具体方案"><a href="#5-、Java程序代码上线的具体方案" class="headerlink" title="5 、Java程序代码上线的具体方案"></a>5 、Java程序代码上线的具体方案</h4><p>对于java上线方法:较大公司需要分组平滑上线（如从负载均衡器上摘掉一半的服务器），发布代码后，重启服务器测试，没问题后，挂上上好线的一半，再下另外一半。如果前端有DNS智能解析，上线还可以分地区上线若干服务器，逐渐普及到全国的服务器，这个被称为“灰度发布”，在后面门户网站上线的知识里我们在讲解。</p>
<h4 id="6-、代码上线解决方案注意事项"><a href="#6-、代码上线解决方案注意事项" class="headerlink" title="6 、代码上线解决方案注意事项"></a>6 、代码上线解决方案注意事项</h4><p>上线的流程里，办公室测试环境–&gt;IDC测试环境–&gt;正式生产环境，所有环境中的所有软件均应版本统一，其次尽量单一，否则将后患无穷，开发测试成功，IDC测试就可能有问题（如:操作系统，web服务器，jdk,php,tomcat,resin等版本）</p>
<ul>
<li><p>开发团队小组办公内部测试环境测试（该测试环境属于开发小组维护，或定时自动更新代码），代码有问题返回给某开发人员重新开发。</p>
</li>
<li><p>有专门的测试工程师，程序有问题直接返回给开发人员（此时返回的一般为程序的BUG，称为BUG库），无问题进行IDC测试</p>
</li>
<li><p>IDC测试由测试人员和运维人员参与，叫IDCtest,进行程序的压力测试，有问题直接返回给开发人员，无问题进行线上环境上线。</p>
</li>
<li><p>数台服务器代码分发上线方案举例（JAVA程序）</p>
<p>A:假设同业务服务器有6台，将服务器分为A,B两组，A组三台，B组三台，先对A组进行从负载均衡器上平滑下线，B组正常提供服务，避免服务器因上线影响业务。</p>
<p>B:下线过程是通过脚本将A组服务器从RS池（LVS,NGINX,HAPROXY,F5等均有平滑方案）中踢出，避免负裁均衡器将请求发送给A组服务器（此时的时间应该为网站流量少时，一般为晚上）</p>
<p>C:将代码分发到A组服务器的站点目录下，对A组服务器上线并重启服务，并由专业的测试人员进行访问测试，测试成功后，挂上A组的服务器，同时下线B组服务器，B组代码上线操作测试等和A组相同，期间也要观察上线提供服务的服务器状况，有问题及时回滚。</p>
</li>
<li><p>如果是PHP程序，则上线可以简单化，直接将上线代码（最好全量）发布到所有上线服务器的特定目录后，分发完成后，一次性mv或ln到站点目录，当然测试也是少不了的。测试除了人员测试外，还有各种测试脚本测试各个相关业务接口。</p>
</li>
</ul>
<h2 id="二、理解持续集成、持续交付、持续部署"><a href="#二、理解持续集成、持续交付、持续部署" class="headerlink" title="二、理解持续集成、持续交付、持续部署"></a>二、理解持续集成、持续交付、持续部署</h2><p>软件开发的连续方法基于自动执行脚本，以最大限度地减少在开发应用程序时引入错误的可能性。从新代码的开发到部署，它们需要较少的人为干预甚至根本不需要干预。它涉及在每次小迭代中不断构建，测试和部署代码更改，从而减少基于有缺陷或失败的先前版本开发新代码的机会。有三种主要方法，分别为持续集成、持续交付、持续部署，每种方法都根据最适合您的策略进行应用。</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1352872-20180728202111287-1863851599.png" alt="img"></p>
<h3 id="1、持续集成"><a href="#1、持续集成" class="headerlink" title="1、持续集成"></a>1、持续集成</h3><p><strong>代码合并，构建，部署，测试都在一起，不断地执行这个过程，并对结果反馈</strong>。</p>
<p>持续集成（英语：Continuous integration，缩写为 <strong>CI</strong>），一种软件工程流程，将所有工程师对于软件的工作复本，每天集成数次到共用主线（mainline）上。</p>
<p>这个名称最早由葛来迪·布区（Grady Booch）在他的布区方法中提出，但是他并没有提到要每天集成数次。之后成为极限编程（extreme programming，缩写为XP）的一部分。在测试驱动开发（TDD）的作法中，通常还会搭配自动单元测试。</p>
<p>持续集成的提出，主要是为了解决软件进行系统集成时面临的各项问题，极限编程称这些问题为集成地狱（integration hell）。</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1190037-20171201191840448-1304029709.png" alt="img"></p>
<p>持续集成主要是强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。简单来讲就是：频繁地（一天多次）将代码集成到主干。</p>
<p><strong>持续集成的目的</strong></p>
<ul>
<li><p>及早发现集成错误且由于修订的内容较小所以易于追踪，这可以节省项目的时间与成本。</p>
</li>
<li><p>避免发布日期的前一分钟发生混乱，当每个人都会尝试为他们所造成的那一点点不兼容的版本做检查。</p>
</li>
<li><p>当单元测试失或发生错误，若开发人员需要在不除错的情况下还原代码库到一个没有问题的状态，只需要放弃一小部分的更改 (因为集成的次数频繁)。</p>
</li>
<li><p>让 “最新” 的程序可保持可用的状态供测试、展示或发布用。</p>
</li>
<li><p>频繁的提交代码会促使开发人员创建模块化，低复杂性的代码。</p>
</li>
<li><p>防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p>
</li>
</ul>
<h3 id="2、持续交付"><a href="#2、持续交付" class="headerlink" title="2、持续交付"></a>2、持续交付</h3><p><strong>部署到测试环境、预生产环境</strong></p>
<p>持续交付（英语：Continuous delivery，缩写为 <strong>CD</strong>），是一种软件工程手法，让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以释出的状况。</p>
<p>它的目标在于让软件的建置、测试与释出变得更快以及更频繁。这种方式可以减少软件开发的成本与时间，减少风险。</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1190037-20171201191850511-1013536040.png" alt="img"></p>
<p>持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。</p>
<h3 id="3、持续部署"><a href="#3、持续部署" class="headerlink" title="3、持续部署"></a>3、持续部署</h3><p><strong>将最终产品发布到生成环境，给用户使用</strong></p>
<p>持续部署（英语：Continuous Deployment，缩写为 <strong>CD</strong>），是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</p>
<p>有时候，持续部署也与持续交付混淆。持续部署意味着所有的变更都会被自动部署到生产环境中。持续交付意味着所有的变更都可以被部署到生产环境中，但是出于业务考虑，可以选择不部署。如果要实施持续部署，必须先实施持续交付。</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1190037-20171201191900433-349001067.png" alt="img"></p>
<p>持续部署即在持续交付的基础上，把部署到生产环境的过程自动化。</p>
<h2 id="三、Maven-私服-Nexus3"><a href="#三、Maven-私服-Nexus3" class="headerlink" title="三、Maven 私服 Nexus3"></a>三、Maven 私服 Nexus3</h2><h3 id="1、Maven和Nexus3-简介"><a href="#1、Maven和Nexus3-简介" class="headerlink" title="1、Maven和Nexus3 简介"></a>1、Maven和Nexus3 简介</h3><p>Maven是一个采用纯Java编写的开源项目管理工具</p>
<p>采用一种被称之为Project Object Model(POM)概念来管理项目，所有的项目配置信息都被定义在一个叫做POM.xml的文件中, 通过该文件Maven可以管理项目的整个生命周期，包括清除、编译，测试，报告、打包、部署等等。</p>
<p>目前Apache下绝大多数项目都已经采用Maven进行管理. 而Maven本身还支持多种插件, 可以方便更灵活的控制项目, 开发人员的主要任务应该是关注商业逻辑并去实现它, 而不是把时间浪费在学习如何在不同的环境中去依赖jar包,项目部署等。</p>
<p>Maven和ant都是软件构建工具（软件管理工具),Maven比Ant更加强大，已经取代了ant,jar包的声明式依赖描述。Maven有jar包的仓库。</p>
<p>私服是架设在局域网的一种特殊的远程仓库，目的是代理远程仓库及部署第三方构件。有了私服之后，当 Maven 需要下载构件时，直接请求私服，私服上存在则下载到本地仓库；否则，私服请求外部的远程仓库，将构件下载到私服，再提供给本地仓库下载。</p>
<p>　　<img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1167086-20180825103130887-988863302.jpg" alt="img"></p>
<p>公司如果没有maven私服，则需要用手动打jar包的方式添加依赖</p>
<h3 id="2、安装-Maven"><a href="#2、安装-Maven" class="headerlink" title="2、安装 Maven"></a>2、安装 Maven</h3><h4 id="1、下载-maven"><a href="#1、下载-maven" class="headerlink" title="1、下载 maven"></a>1、下载 maven</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# wget http://mirrors.tuna.tsinghua.edu.cn/apache/maven/maven-3/3.5.4/binaries/apache-maven-3.5.4-bin.tar.gz</span><br></pre></td></tr></table></figure>

<h4 id="2、解压安装"><a href="#2、解压安装" class="headerlink" title="2、解压安装"></a>2、解压安装</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# tar xf apache-maven-3.5.4-bin.tar.gz -C /usr/local/</span><br><span class="line">[root@qfedu.com ~]# cd /usr/local/</span><br><span class="line">[root@qfedu.com ~]# ln -s apache-maven-3.5.4/ maven</span><br></pre></td></tr></table></figure>

<h4 id="3、安装-java-环境"><a href="#3、安装-java-环境" class="headerlink" title="3、安装 java 环境"></a>3、安装 java 环境</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# tar xf jdk-8u201-linux-x64.tar.gz -C /usr/local/</span><br><span class="line">[root@qfedu.com ~]# cd /usr/local/</span><br><span class="line">[root@qfedu.com ~]# ln -s jdk1.8.0_201/ java</span><br></pre></td></tr></table></figure>

<h4 id="4、添加环境变量"><a href="#4、添加环境变量" class="headerlink" title="4、添加环境变量"></a>4、添加环境变量</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /etc/profile</span><br></pre></td></tr></table></figure>

<p>添加如下内容（这里的MAVEN_HOME需要改为你自己的maven解压目录）：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">export MAVEN_HOME=/usr/local/maven</span><br><span class="line">export JRE_HOME=/usr/local/java/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br></pre></td></tr></table></figure>

<ul>
<li>重载环境变量</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h4 id="5、验证-maven-安装"><a href="#5、验证-maven-安装" class="headerlink" title="5、验证 maven 安装"></a>5、验证 maven 安装</h4><p>输入命令 mvn -version 看到如下内容说明安装成功了。</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1167086-20180825104448130-1294323799.jpg" alt="img"></p>
<h3 id="3、安装-nexus3"><a href="#3、安装-nexus3" class="headerlink" title="3、安装 nexus3"></a>3、安装 nexus3</h3><h4 id="1、下载"><a href="#1、下载" class="headerlink" title="1、下载"></a>1、下载</h4><p>专业版的nexus收费，下载开源版 Nexus OSS,下载地址为 <a href="https://www.sonatype.com/download-oss-sonatype">https://www.sonatype.com/download-oss-sonatype</a></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1167086-20180825105031180-667090550.jpg" alt="img"></p>
<p>Wing下载的时候可以获取链接用迅雷下载，我是直接把https改成了http下载，下载下来的包大小不一样，我暂时使用的是小一点的120多M的安装包</p>
<h4 id="2、解压"><a href="#2、解压" class="headerlink" title="2、解压"></a>2、解压</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# cd /usr/local</span><br><span class="line">[root@qfedu.com ~]# tar -zxf nexus-3.13.0-01-unix.tar.gz</span><br></pre></td></tr></table></figure>

<p>解压后会多出两个目录，nexus-3.13.0-01和sonatype-work。</p>
<h4 id="3、启动"><a href="#3、启动" class="headerlink" title="3、启动"></a>3、启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# cd nexus-3.13.0-01/bin/</span><br><span class="line">[root@qfedu.com ~]# ./nexus start</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1167086-20180825105844833-1628287044.jpg" alt="img"></p>
<p>看到如图所示内容表明我们已经启动成功了，游览器输入<a href="http://localhost:8081即可访问。">http://localhost:8081即可访问。</a></p>
<p><strong>注意：</strong></p>
<p>启动后如果你立即访问可能发现什么都没有，不要急这个启动需要一定时间，<strong>1分钟后再尝试访问</strong></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/1167086-20180825110836868-96057072.jpg" alt="img">　</p>
<p><strong>登录</strong> ： </p>
<p>点击右上角的sign in登录，输入账户<strong>admin</strong></p>
<p>密码:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> cat /root/sonatype-work/nexus3/admin.password</span></span><br><span class="line">91c37108-809a-495b-942d-3932b9b33e04</span><br></pre></td></tr></table></figure>

<h4 id="4、仓库介绍"><a href="#4、仓库介绍" class="headerlink" title="4、仓库介绍"></a>4、仓库介绍</h4><p>点击“设置-Repositories”，就可以看到仓库，分三种类型：</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/image-20200509104646789.png" alt="image-20200509104646789"></p>
<ul>
<li><p><strong>proxy</strong>：是远程仓库的代理。比如说在nexus中配置了一个central repository的proxy，当用户向这个proxy请求一个artifact，这个proxy就会先在本地查找，如果找不到的话，就会从远程仓库下载，然后返回给用户，相当于起到一个中转的作用。　　　　</p>
</li>
<li><p><strong>Hosted</strong>：是宿主仓库，用户可以把自己的一些构件，deploy到hosted中，也可以手工上传构件到hosted里。比如说oracle的驱动程序，ojdbc6.jar，在central repository是获取不到的，就需要手工上传到hosted里，一般用来存放公司自己的jar包；</p>
</li>
<li><p><strong>Group</strong>：是仓库组，在maven里没有这个概念，是nexus特有的。目的是将上述多个仓库聚合，对用户暴露统一的地址，这样用户就不需要在pom中配置多个地址，只要统一配置group的地址就可以了右边那个Repository Path可以点击进去，看到仓库中artifact列表。不过要注意浏览器缓存，<strong>当你的项目希望在多个repository使用资源时就不需要多次引用了，只需要引用一个group即可</strong>。</p>
<p><strong>maven-public：</strong>maven-central、maven-release和maven-snapshot三个库的合集。</p>
<p><strong>maven-release：</strong>用来存放release版本的jar包。</p>
<p><strong>maven-snapshot：</strong>用来存放snapshot版本的jar包。</p>
</li>
</ul>
<p><strong>关于Maven的Snapshot版本与Release版本</strong></p>
<ol>
<li><p>Snapshot版本代表不稳定、尚处于开发中的版本 </p>
</li>
<li><p>Release版本则代表稳定的版本 </p>
</li>
<li><p>什么情况下该用SNAPSHOT?<br>协同开发时，如果A依赖构件B，由于B会更新，B应该使用SNAPSHOT来标识自己。这种做法的必要性可以反证如下： </p>
</li>
</ol>
<p>a.如果B不用SNAPSHOT，而是每次更新后都使用一个稳定的版本，那版本号就会升得太快，每天一升e68a84e8a2ade79fa5e9819331333363396362甚至每个小时一升，这就是对版本号的滥用。 </p>
<p>b.如果B不用SNAPSHOT,  但一直使用一个单一的Release版本号，那当B更新后，A可能并不会接受到更新。因为A所使用的repository一般不会频繁更新release版本的缓存（即本地repository)，所以B以不换版本号的方式更新后，A在拿B时发现本地已有这个版本，就不会去远程Repository下载最新的B </p>
<ol start="4">
<li>不用Release版本，在所有地方都用SNAPSHOT版本行不行？<br>不行。正式环境中不得使用snapshot版本的库。  比如说，今天你依赖某个snapshot版本的第三方库成功构建了自己的应用，明天再构建时可能就会失败，因为今晚第三方可能已经更新了它的snapshot库。你再次构建时，Maven会去远程repository下载snapshot的最新版本，你构建时用的库就是新的jar文件了，这时正确性就很难保证了。</li>
</ol>
<h4 id="5、向-nexus3-私服上传-jar-包"><a href="#5、向-nexus3-私服上传-jar-包" class="headerlink" title="5、向 nexus3 私服上传 jar 包"></a>5、向 nexus3 私服上传 jar 包</h4><h5 id="1、准备环境"><a href="#1、准备环境" class="headerlink" title="1、准备环境"></a>1、准备环境</h5><h6 id="1、创建3rd-part库"><a href="#1、创建3rd-part库" class="headerlink" title="1、创建3rd_part库"></a>1、创建<code>3rd_part</code>库</h6><p>使用默认用户 <strong>admin/admin123</strong> 登陆</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303135907573.png" alt="这里写图片描述"></p>
<p>点击左侧的<code>repository\repositories</code>后,在右侧点击<code>create repository</code></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303135924229.png" alt="这里写图片描述"></p>
<p>然后选择<code>maven2(hosted)</code>,填写如下</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303135934168.png" alt="这里写图片描述"></p>
<p>跳到首页后选择<code>maven-public</code></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/2018030313595437.png" alt="这里写图片描述"></p>
<p>将<code>3rd_part</code>移到<code>member</code>中,即将<code>3rd_part</code>由<code>maven-public</code>管理，点击save</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303140006220.png" alt="这里写图片描述"></p>
<p>至此,创建仓库完成</p>
<h6 id="2、创建-3rd-part-管理用户"><a href="#2、创建-3rd-part-管理用户" class="headerlink" title="2、创建 3rd_part 管理用户"></a>2、创建 <code>3rd_part</code> 管理用户</h6><p>创建用户: 用户名/密码-<code>dev/dev123</code></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303154313780.png" alt="这里写图片描述"></p>
<h5 id="2、直接浏览器"><a href="#2、直接浏览器" class="headerlink" title="2、直接浏览器"></a>2、直接浏览器</h5><p>使用<code>dev/dev123</code>登陆，点击<code>upload</code></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303141603409.png" alt="这里写图片描述"></p>
<p>填写上传jar包的信息后，点击<code>upload</code></p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303141617257.png" alt="这里写图片描述"></p>
<p>可以看到已经上传成功</p>
<p><img src="/2021/08/07/%E7%AC%AC2%E5%A4%A9-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E6%8C%81%E7%BB%AD%E5%8F%91%E5%B8%83%E5%85%A5%E9%97%A8/20180303141629234.png" alt="这里写图片描述"></p>
<h3 id="4、常见错误"><a href="#4、常见错误" class="headerlink" title="4、常见错误"></a>4、常见错误</h3><p>问题1：上传报错误码405，Failed to transfer file。</p>
<p>​      解决：仔细查看报错信息就会发现，是上传的url错了,原因就是repository的地址写错了。</p>
<p>问题2：错误码401或者403</p>
<p>​      解决：其实403错误就是“禁止访问”的含义，所以问题的根源肯定在授权上面。Maven在默认情况下会使用deployment帐号(默认密码deploy)登录的系统，但是关键的Nexus中Releases仓库默认的Deployment Policy是“Disable Redeploy”，所以无法部署的问题在这个地方，方法是将其修改为“Allow Redeploy”就可以了。401就是Maven settings.xml没有设置密码</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范</title>
    <url>/2021/03/20/%E5%93%81%E4%BC%98%E8%B4%AD%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>欢迎使用品优购代码规范， 这个是我借鉴京东前端代码规范，组织的品优购内部规范。旨在增强团队开发协作、提高代码质量和打造开发基石的编码规范，</p>
<p>以下规范是团队基本约定的内容，必须严格遵循。</p>
<h4 id="HTML规范"><a href="#HTML规范" class="headerlink" title="HTML规范"></a>HTML规范</h4><p>基于 <a href="http://www.w3.org/">W3C</a>、<a href="https://developer.apple.com/">苹果开发者</a> 等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。</p>
<h4 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h4><p>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。</p>
<h4 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h4><p>统一规范团队 CSS 代码书写风格和使用 CSS 预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</p>
<h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p>从 <code>目录</code>、<code>图片</code>、<code>HTML/CSS文件</code>、<code>ClassName</code> 的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</p>
<h2 id="2-HTML-规范"><a href="#2-HTML-规范" class="headerlink" title="2. HTML 规范"></a>2. HTML 规范</h2><h3 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h3><p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>HTML5标准模版</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5标准模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="页面语言lang"><a href="#页面语言lang" class="headerlink" title="页面语言lang"></a>页面语言lang</h3><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 <code>zh-CN</code> 属性值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>更多地区语言参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)</span><br><span class="line">zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)</span><br><span class="line">zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)</span><br><span class="line">zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)</span><br></pre></td></tr></table></figure>

<h3 id="charset-字符集合"><a href="#charset-字符集合" class="headerlink" title="charset 字符集合"></a>charset 字符集合</h3><p>一般情况下统一使用 “UTF-8” 编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;GBK&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><h4 id="HTML代码大小写"><a href="#HTML代码大小写" class="headerlink" title="HTML代码大小写"></a>HTML代码大小写</h4><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;DIV CLASS&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;DIV&gt;</span><br></pre></td></tr></table></figure>
<h3 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h3><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&quot; &gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&quot; &gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&quot; &gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked&#x3D;&quot;checked&quot; &gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;text&gt;	</span><br><span class="line">&lt;input type&#x3D;&#39;text&#39;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked &gt;</span><br></pre></td></tr></table></figure>
<h3 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h3><p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;jdc&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;	</span><br><span class="line">&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;	</span><br><span class="line">&lt;p&gt; </span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-图片规范"><a href="#3-图片规范" class="headerlink" title="3. 图片规范"></a>3. 图片规范</h2><h3 id="内容图"><a href="#内容图" class="headerlink" title="内容图"></a>内容图</h3><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>
<ul>
<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>
<li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>
<li><strong>PC平台单张的图片的大小不应大于 200KB。</strong></li>
</ul>
<h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>
<ul>
<li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li>
<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li>
<li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li>
<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>
<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>
</ul>
<h2 id="4-CSS规范"><a href="#4-CSS规范" class="headerlink" title="4. CSS规范"></a>4. CSS规范</h2><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>样式书写一般有两种：一种是紧凑格式 (Compact)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc&#123; display: block;width: 50px;&#125;</span><br></pre></td></tr></table></figure>

<p>一种是展开格式（Expanded）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>团队约定</strong></p>
<p>统一使用展开格式书写样式</p>
<h3 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 推荐 *&#x2F;</span><br><span class="line">.jdc&#123;</span><br><span class="line">	display:block;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&#x2F;* 不推荐 *&#x2F;</span><br><span class="line">.JDC&#123;</span><br><span class="line">	DISPLAY:BLOCK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>尽量少用通用选择器 <code>*</code></li>
<li>不使用 ID 选择器</li>
<li>不使用无具体语义定义的标签选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">li</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line">*&#123;&#125;</span><br><span class="line"><span class="selector-id">#jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">div</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码缩进-1"><a href="#代码缩进-1" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>每个属性声明末尾都要加分号；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码易读性"><a href="#代码易读性" class="headerlink" title="代码易读性"></a>代码易读性</h3><p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123; </span><br><span class="line">    width: 100%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc&#123; </span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逗号分隔的取值，逗号之后一个空格</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为单个css选择器或新申明开启新行</p>
<p><em>推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span>, </span><br><span class="line"><span class="selector-class">.jdc_logo</span>, </span><br><span class="line"><span class="selector-class">.jdc_hd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span>,jdc_logo,<span class="selector-class">.jdc_hd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;<span class="selector-class">.nav</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code> <code>hsla()</code> <code>rect()</code> 中不需有空格，且取值不要带有不必要的 0</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba(255,255,255,.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba( 255, 255, 255, 0.5 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性值十六进制数值能用简写的尽量用简写</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要为 <code>0</code> 指明单位</p>
<p><em>推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性值引号"><a href="#属性值引号" class="headerlink" title="属性值引号"></a>属性值引号</h3><p>css属性值需要用到引号时，统一使用单引号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123; </span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&#x27;Hiragino Sans GB&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123; </span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;Hiragino Sans GB&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h3><p>建议遵循以下顺序：</p>
<ol>
<li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>自身属性：width / height / margin / padding / border / background</li>
<li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>
<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.mozilla.org/css/base/content.css">mozilla官方属性顺序推荐</a></p>
<h2 id="命名规范-1"><a href="#命名规范-1" class="headerlink" title="命名规范"></a>命名规范</h2><p>由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p>
<h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><ul>
<li>项目文件夹：shoping</li>
<li>样式文件夹：css</li>
<li>脚本文件夹：js</li>
<li>样式类图片文件夹：img</li>
<li>产品类图片文件夹： upload</li>
<li>字体类文件夹： fonts</li>
</ul>
<h3 id="ClassName命名"><a href="#ClassName命名" class="headerlink" title="ClassName命名"></a>ClassName命名</h3><p>ClassName的命名应该尽量精短、明确，必须以<strong>字母开头命名</strong>，且<strong>全部字母为小写</strong>，单词之间<strong>统一使用下划线</strong> “_” 连接</p>
<p>.nav_top</p>
<h4 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h4><p><strong>注意</strong>：ad、banner、gg、guanggao 等有机会和广告挂勾的不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>这种广告的英文或拼音类名不应该出现</p>
<p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;fuck&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;jer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;sm&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;gcd&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">&lt;div class&#x3D;&quot;ass&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">&lt;div class&#x3D;&quot;KMT&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>about</td>
<td>关于</td>
</tr>
<tr>
<td>account</td>
<td>账户</td>
</tr>
<tr>
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr>
<td>article</td>
<td>文章</td>
</tr>
<tr>
<td>aside</td>
<td>边栏</td>
</tr>
<tr>
<td>audio</td>
<td>音频</td>
</tr>
<tr>
<td>avatar</td>
<td>头像</td>
</tr>
<tr>
<td>bg,background</td>
<td>背景</td>
</tr>
<tr>
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr>
<td>branding</td>
<td>品牌化</td>
</tr>
<tr>
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr>
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr>
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
</tr>
<tr>
<td>chart</td>
<td>图表</td>
</tr>
<tr>
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
</tr>
<tr>
<td>col,column</td>
<td>列</td>
</tr>
<tr>
<td>comment</td>
<td>评论</td>
</tr>
<tr>
<td>community</td>
<td>社区</td>
</tr>
<tr>
<td>container</td>
<td>容器</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
<tr>
<td>copyright</td>
<td>版权</td>
</tr>
<tr>
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr>
<td>default</td>
<td>默认</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>details</td>
<td>细节</td>
</tr>
<tr>
<td>disabled</td>
<td>不可用</td>
</tr>
<tr>
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr>
<td>error</td>
<td>错误</td>
</tr>
<tr>
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr>
<td>feature</td>
<td>专题</td>
</tr>
<tr>
<td>fewer</td>
<td>收起</td>
</tr>
<tr>
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr>
<td>figure</td>
<td>图</td>
</tr>
<tr>
<td>filter</td>
<td>筛选</td>
</tr>
<tr>
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>forum</td>
<td>论坛</td>
</tr>
<tr>
<td>gallery</td>
<td>画廊</td>
</tr>
<tr>
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr>
<td>header</td>
<td>页头</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
<tr>
<td>hide</td>
<td>隐藏</td>
</tr>
<tr>
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr>
<td>home</td>
<td>主页</td>
</tr>
<tr>
<td>icon</td>
<td>图标</td>
</tr>
<tr>
<td>info,information</td>
<td>信息</td>
</tr>
<tr>
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr>
<td>links</td>
<td>链接</td>
</tr>
<tr>
<td>login</td>
<td>登录</td>
</tr>
<tr>
<td>logout</td>
<td>退出</td>
</tr>
<tr>
<td>logo</td>
<td>标志</td>
</tr>
<tr>
<td>main</td>
<td>主体</td>
</tr>
<tr>
<td>menu</td>
<td>菜单</td>
</tr>
<tr>
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr>
<td>module</td>
<td>模块</td>
</tr>
<tr>
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr>
<td>msg,message</td>
<td>消息</td>
</tr>
<tr>
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr>
<td>next</td>
<td>下一页</td>
</tr>
<tr>
<td>nub</td>
<td>小块</td>
</tr>
<tr>
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr>
<td>output</td>
<td>输出</td>
</tr>
<tr>
<td>pagination</td>
<td>分页</td>
</tr>
<tr>
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr>
<td>preview</td>
<td>预览</td>
</tr>
<tr>
<td>previous</td>
<td>上一页</td>
</tr>
<tr>
<td>primary</td>
<td>主要</td>
</tr>
<tr>
<td>progress</td>
<td>进度条</td>
</tr>
<tr>
<td>promotion</td>
<td>促销</td>
</tr>
<tr>
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr>
<td>reg,register</td>
<td>注册</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
</tr>
<tr>
<td>search</td>
<td>搜索</td>
</tr>
<tr>
<td>secondary</td>
<td>次要</td>
</tr>
<tr>
<td>section</td>
<td>区块</td>
</tr>
<tr>
<td>selected</td>
<td>已选</td>
</tr>
<tr>
<td>share</td>
<td>分享</td>
</tr>
<tr>
<td>show</td>
<td>显示</td>
</tr>
<tr>
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr>
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr>
<td>sort</td>
<td>排序</td>
</tr>
<tr>
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr>
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr>
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr>
<td>summary</td>
<td>摘要</td>
</tr>
<tr>
<td>tab</td>
<td>标签页</td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
</tr>
<tr>
<td>txt,text</td>
<td>文本</td>
</tr>
<tr>
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr>
<td>time</td>
<td>时间</td>
</tr>
<tr>
<td>tips</td>
<td>提示</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>video</td>
<td>视频</td>
</tr>
<tr>
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr>
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>html css</category>
      </categories>
      <tags>
        <tag>html css</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式版本控制系统</title>
    <url>/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h1 id="第1天-分布式版本控制系统"><a href="#第1天-分布式版本控制系统" class="headerlink" title="第1天-分布式版本控制系统"></a>第1天-分布式版本控制系统</h1><h2 id="一、Git、Github、Gitlab-的区别"><a href="#一、Git、Github、Gitlab-的区别" class="headerlink" title="一、Git、Github、Gitlab 的区别"></a>一、Git、Github、Gitlab 的区别</h2><p>Git是一个开源的分布式版本控制系统，用于敏捷高效地处理任何或小或大的项目。</p>
<p>是 Linus Torvalds 为了帮助管理 Linux 内核开发而开发的一个开放源码的版本控制软件。</p>
<p>Github是在线的基于Git的代码托管服务。 GitHub是2008年由Ruby on Rails编写而成。GitHub同时提供付费账户和免费账户。这两种账户都可以创建公开的代码仓库，只有付费账户可以创建私有的代码仓库。 Gitlab解决了这个问题, 可以在上面创建免费的私人repo。 </p>
<p>git            是一套软件 可以做本地私有仓库</p>
<p>github   本身是一个代码托管网站   公有和私有仓库(收费)   不能做本地私有仓库</p>
<p>gitlab     本身也是一个代码托管的网站 功能上和github没有区别   公有和私有仓库（免费）  可以部署本地私有仓库</p>
<h2 id="二、Git-与-SVN-区别"><a href="#二、Git-与-SVN-区别" class="headerlink" title="二、Git 与 SVN 区别"></a>二、Git 与 SVN 区别</h2><p>GIT不仅仅是个版本控制系统，它也是个内容管理系统(CMS),工作管理系统等。</p>
<p>如果你是一个具有使用SVN背景的人，你需要做一定的思想转换，来适应GIT提供的一些概念和特征。</p>
<p><strong>Git 与 SVN 区别</strong></p>
<ol>
<li>Git是分布式的，svn不是：这是GIT和其它非分布式的版本控制系统，例如SVN，CVS等，最核心的区别。</li>
<li>GIT把内容按元数据方式存储，而SVN是按文件：所有的资源控制系统都是把文件的元信息隐藏在一个类似.svn,.cvs等的文件夹里。</li>
<li>GIT分支和SVN的分支不同：分支在SVN中一点不特别，就是版本库中的另外的一个目录。</li>
<li>GIT没有一个全局的版本号，而SVN有：目前为止这是跟SVN相比GIT缺少的最大的一个特征。</li>
<li>GIT的内容完整性要优于SVN：GIT的内容存储使用的是SHA-1哈希算法。这能确保代码内容的完整性，确保在遇到磁盘故障和网络问题时降低对版本库的破坏。</li>
</ol>
<p>git   是分布式的版本控制器  没有客户端和服务器端的概念</p>
<p>svn 它是C/S结构的版本控制器  有客户端和服务器端  服务器如果宕机而且代码没有备份的情况下  完整代码就会丢失</p>
<h2 id="三、部署Git-服务"><a href="#三、部署Git-服务" class="headerlink" title="三、部署Git 服务"></a>三、部署Git 服务</h2><p><strong>创建git仓库</strong></p>
<p>git-server上的操作：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# yum install git git-core gitweb -y</span><br><span class="line">[root@qfedu.com ~]# useradd git</span><br><span class="line">[root@qfedu.com ~]# passwd git</span><br><span class="line">[root@qfedu.com ~]# mkdir &#x2F;git-root&#x2F;</span><br><span class="line">[root@qfedu.com ~]# cd &#x2F;git-root&#x2F;</span><br><span class="line">[root@qfedu.com git-root]# git init --bare shell.git</span><br><span class="line">Initialized empty Git repository in &#x2F;git-root&#x2F;shell.git&#x2F;</span><br><span class="line">注意：</span><br><span class="line">git init 和 git init --bare 的区别:</span><br><span class="line">使用--bare选项时,不再生成.git目录,而是只生成.git目录下面的版本历史记录文件,这些版本历史记录文件也不再存放在.git目录下面,而是直接存放在版本库的根目录下面.</span><br><span class="line">用&quot;git init&quot;初始化的版本库用户也可以在该目录下执行所有git方面的操作。但别的用户在将更新push上来的时候容易出现冲突。</span><br><span class="line">使用”git init --bare”方法创建一个所谓的裸仓库，之所以叫裸仓库是因为这个仓库只保存git历史提交的版本信息，而不允许用户在上面进行各种git操作，如果你硬要操作的话，只会得到下面的错误（”This operation must be run in a work tree”）这个就是最好把远端仓库初始化成bare仓库的原因</span><br><span class="line"></span><br><span class="line">[root@qfedu.com git-root]# chown -R git:git shell.git</span><br></pre></td></tr></table></figure>

<p><strong>git仓库测试</strong></p>
<p>git-client上的操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ssh-keygen</span><br><span class="line">[root@qfedu.com ~]# ssh-copy-id git@192.168.1.178</span><br><span class="line"></span><br><span class="line">[root@qfedu.com shell]# git config --global user.email &quot;you@example.com&quot;</span><br><span class="line">[root@qfedu.com shell]# git config --global user.name &quot;Your Name&quot;</span><br><span class="line"></span><br><span class="line">[root@qfedu.com ~]# git clone git@192.168.1.178:/git-root/shell.git</span><br><span class="line">[root@qfedu.com ~]# ls</span><br><span class="line">rh  shell</span><br><span class="line">[root@qfedu.com ~]# cd shell/</span><br><span class="line">[root@qfedu.com shell]# vim test.sh</span><br><span class="line">[root@qfedu.com shell]# git add test.sh</span><br><span class="line"></span><br><span class="line">[root@qfedu.com shell]# git commit -m &#x27;first commit&#x27;</span><br><span class="line">[master (root-commit) 33c5fbf] first commit</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 test1.sh</span><br><span class="line">[root@qfedu.com shell]# git push origin master</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 230 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@192.168.1.178:/git-root/shell.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>

<h2 id="四、Git工作流程"><a href="#四、Git工作流程" class="headerlink" title="四、Git工作流程"></a>四、Git工作流程</h2><p>一般工作流程如下：</p>
<ul>
<li><p>克隆 Git 资源作为工作目录。</p>
</li>
<li><p>在克隆的资源上添加或修改文件。 </p>
</li>
<li><p>如果其他人修改了，你可以更新资源。</p>
</li>
<li><p>在提交前查看修改。</p>
</li>
<li><p>提交修改。</p>
</li>
<li><p>在修改完成后，如果发现错误，可以撤回提交并再次修改并提交。</p>
<p>　　Git 的工作流程示意图：</p>
</li>
</ul>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/805129-20160710102658467-1520443599.png" alt="img"></p>
<h2 id="五、Git基本概念"><a href="#五、Git基本概念" class="headerlink" title="五、Git基本概念"></a>五、Git基本概念</h2><ul>
<li><strong>工作区：</strong>就是你在电脑里能看到的目录。</li>
<li><strong>暂存区：</strong>英文叫stage, 或index。一般存放在”git目录”下的index文件（.git/index）中，所以我们把暂存区有时也叫作索引（index）。</li>
<li><strong>版本库：</strong>工作区有一个隐藏目录.git，这个不算工作区，而是Git的版本库。</li>
</ul>
<p>　　工作区、版本库中的暂存区和版本库之间的关系的示意图：</p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/805129-20160710103123608-1172715931.jpg" alt="img"></p>
<ul>
<li>　　图中左侧为工作区，右侧为版本库。在版本库中标记为 “index” 的区域是暂存区（stage, index），标记为 “master” 的是 master 分支所代表的目录树。 </li>
</ul>
<ul>
<li>　　图中我们可以看出此时 “HEAD” 实际是指向 master 分支的一个”游标”。所以图示的命令中出现 HEAD 的地方可以用 master 来替换。 </li>
</ul>
<ul>
<li>　　图中的 objects 标识的区域为 Git 的对象库，实际位于 “.git/objects” 目录下，里面包含了创建的各种对象及内容。 </li>
</ul>
<ul>
<li>　　当对工作区修改（或新增）的文件执行 “git add” 命令时，暂存区的目录树被更新，同时工作区修改（或新增）的文件内容被写入到对象库中的一个新的对象中，而该对象的ID被记录在暂存区的文件索引中。 </li>
</ul>
<ul>
<li>　　当执行提交操作（git commit）时，暂存区的目录树写到版本库（对象库）中，master 分支会做相应的更新。即 master 指向的目录树就是提交时暂存区的目录树。 </li>
</ul>
<ul>
<li>　　当执行 “git reset HEAD” 命令时，暂存区的目录树会被重写，被 master 分支指向的目录树所替换，但是工作区不受影响。 </li>
</ul>
<ul>
<li>　　当执行 “git rm –cached <file>“ 命令时，会直接从暂存区删除文件，工作区则不做出改变。 </file></li>
</ul>
<ul>
<li>　　当执行 “git checkout .” 或者 “git checkout – <file>“ 命令时，会用暂存区全部或指定的文件替换工作区的文件。这个操作很危险，会清除工作区中未添加到暂存区的改动。 </file></li>
</ul>
<ul>
<li>　　当执行 “git checkout HEAD .” 或者 “git checkout HEAD <file>“ 命令时，会用 HEAD 指向的 master 分支中的全部或者部分文件替换暂存区和以及工作区中的文件。这个命令也是极具危险性的，因为不但会清除工作区中未提交的改动，也会清除暂存区中未提交的改动。</file></li>
</ul>
<h2 id="六、Git-客户端安装使用"><a href="#六、Git-客户端安装使用" class="headerlink" title="六、Git 客户端安装使用"></a>六、Git 客户端安装使用</h2><h3 id="1、-Git-安装配置"><a href="#1、-Git-安装配置" class="headerlink" title="1、 Git 安装配置"></a>1、 Git 安装配置</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# yum -y install curl-devel expat-devel gettext-devel openssl-devel zlib-devel</span><br><span class="line">[root@qfedu.com ~]# yum -y install git git-all git-core</span><br><span class="line">[root@qfedu.com ~]# git --version</span><br><span class="line">git version 2.18.4</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="2、Git-配置"><a href="#2、Git-配置" class="headerlink" title="2、Git 配置"></a>2、Git 配置</h3><p>Git 提供了一个叫做 git config 的工具，专门用来配置或读取相应的工作环境变量。</p>
<p>这些环境变量，决定了 Git 在各个环节的具体工作方式和行为。这些变量可以存放在以下三个不同的地方：</p>
<ul>
<li><code>/etc/gitconfig</code> 文件：系统中对所有用户都普遍适用的配置。若使用 <code>git config</code> 时用 <code>--system</code> 选项，读写的就是这个文件。</li>
<li><code>~/.gitconfig</code> 文件：用户目录下的配置文件只适用于该用户。若使用 <code>git config</code> 时用 <code>--global</code> 选项，读写的就是这个文件。</li>
<li>当前项目的 Git 目录中的配置文件（也就是工作目录中的 <code>.git/config</code> 文件）：这里的配置仅仅针对当前项目有效。每一个级别的配置都会覆盖上层的相同配置，所以 <code>.git/config</code> 里的配置会覆盖 <code>/etc/gitconfig</code> 中的同名变量。</li>
</ul>
<h4 id="1、Git-用户信息"><a href="#1、Git-用户信息" class="headerlink" title="1、Git 用户信息"></a>1、Git 用户信息</h4><p>配置个人的用户名称和电子邮件地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config --global user.name &quot;qfedu&quot;</span><br><span class="line">[root@qfedu.com ~]# git config --global user.email test@qq.com</span><br></pre></td></tr></table></figure>

<p>如果用了 <strong>–global</strong> 选项，那么更改的配置文件就是位于你用户主目录下的那个，以后你所有的项目都会默认使用这里配置的用户信息。</p>
<p>如果要在某个特定的项目中使用其他名字或者电邮，只要去掉 –global 选项重新配置即可，新的设定保存在当前项目的 .git/config 文件里。</p>
<h4 id="2、文本编辑器"><a href="#2、文本编辑器" class="headerlink" title="2、文本编辑器"></a>2、文本编辑器</h4><p>设置Git默认使用的文本编辑器, 一般可能会是 Vi 或者 Vim。如果你有其他偏好，比如 Emacs 的话，可以重新设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config --global core.editor emacs</span><br></pre></td></tr></table></figure>

<h4 id="3、差异分析工具"><a href="#3、差异分析工具" class="headerlink" title="3、差异分析工具"></a>3、差异分析工具</h4><p>还有一个比较常用的是，在解决合并冲突时使用哪种差异分析工具。比如要改用 vimdiff 的话：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config --global merge.tool vimdiff</span><br></pre></td></tr></table></figure>

<p>Git 可以理解 kdiff3，tkdiff，meld，xxdiff，emerge，vimdiff，gvimdiff，ecmerge，和 opendiff 等合并工具的输出信息。</p>
<p>当然，你也可以指定使用自己开发的工具</p>
<h4 id="4、查看配置信息"><a href="#4、查看配置信息" class="headerlink" title="4、查看配置信息"></a>4、查看配置信息</h4><p>要检查已有的配置信息，可以使用 git config –list 命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config --list</span><br><span class="line">http.postbuffer=2M</span><br><span class="line">user.name=runoob</span><br><span class="line">user.email=test@runoob.com</span><br></pre></td></tr></table></figure>

<p>有时候会看到重复的变量名，那就说明它们来自不同的配置文件（比如 /etc/gitconfig 和 ~/.gitconfig），不过最终 Git 实际采用的是最后一个。</p>
<p>这些配置我们也可以在 <strong>~/.gitconfig</strong> 或 <strong>/etc/gitconfig</strong> 看到，如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim ~/.gitconfig </span><br></pre></td></tr></table></figure>

<p>显示内容如下所示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[http]</span><br><span class="line">    postBuffer = 2M</span><br><span class="line">[user]</span><br><span class="line">    name = git</span><br><span class="line">    email = test@qfedu.com.com</span><br></pre></td></tr></table></figure>

<p>也可以直接查阅某个环境变量的设定，只要把特定的名字跟在后面即可，像这样：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config user.name</span><br><span class="line">git</span><br></pre></td></tr></table></figure>

<h3 id="3、Git-使用"><a href="#3、Git-使用" class="headerlink" title="3、Git 使用"></a>3、Git 使用</h3><h4 id="1、ssh-链接"><a href="#1、ssh-链接" class="headerlink" title="1、ssh 链接"></a>1、ssh 链接</h4><p>客户机上产生公钥上传到gitlab的SSH-Keys里，git clone下载和git push上传都没问题，这种方式很安全</p>
<h4 id="2、http-链接（两种方式实现）"><a href="#2、http-链接（两种方式实现）" class="headerlink" title="2、http 链接（两种方式实现）"></a>2、http 链接（两种方式实现）</h4><h5 id="1、修改代码里的-git-config-文件添加登录用户名密码"><a href="#1、修改代码里的-git-config-文件添加登录用户名密码" class="headerlink" title="1、修改代码里的 .git/config 文件添加登录用户名密码"></a>1、修改代码里的 .git/config 文件添加登录用户名密码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# cd .git</span><br><span class="line">[root@qfedu.com ~]# cat config</span><br><span class="line">[core]</span><br><span class="line">repositoryformatversion = 0</span><br><span class="line">filemode = true</span><br><span class="line">bare = false</span><br><span class="line">logallrefupdates = true</span><br><span class="line">[remote &quot;origin&quot;]</span><br><span class="line">fetch = +refs/heads/*:refs/remotes/origin/*</span><br><span class="line">url = http://username:password@qfedu.com@172.17.0.39:sauser/ansible.git</span><br><span class="line">[branch &quot;master&quot;]</span><br><span class="line">remote = origin</span><br><span class="line">merge = refs/heads/master</span><br></pre></td></tr></table></figure>

<h5 id="2、-执行命令设置登录用户和密码"><a href="#2、-执行命令设置登录用户和密码" class="headerlink" title="2、 执行命令设置登录用户和密码"></a>2、 执行命令设置登录用户和密码</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span>到根目录，执行</span></span><br><span class="line">[root@qfedu.com ~]# git config --global credential.helper store  # 执行之后会在.gitconfig文件中多添加以下选项</span><br><span class="line">  [credential]         </span><br><span class="line">  		helper = store</span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">cd</span>到项目目录，执行git pull命令，会提示输入账号密码。输完这一次以后就不再需要，并且会在根目录生成一个.git-credentials文件</span></span><br><span class="line">[root@qfedu.com ~]# git pull </span><br><span class="line">  Username for &#x27;http://172.17.0.39:sauser/ansible.git&#x27;: </span><br><span class="line">  xxxx@xxxx.com Password for &#x27;https://xxxx@xxxx.com@172.17.0.39:sauser/ansible.git&#x27;:</span><br><span class="line">[root@qfedu.com ~]# cat .git-credentials</span><br><span class="line">  https://Username:Password@qfedu.com.oschina.net</span><br><span class="line"><span class="meta">#</span><span class="bash"> 之后pull/push代码都不再需要输入账号密码了</span></span><br></pre></td></tr></table></figure>

<h4 id="3、设置身份验证"><a href="#3、设置身份验证" class="headerlink" title="3、设置身份验证"></a>3、设置身份验证</h4><p><strong>注意：</strong>设定本机用户名，绑定邮箱，让远程服务器知道机器的身份</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config --global user.name &quot;user_name&quot; </span><br><span class="line">[root@qfedu.com ~]# git config --global user.email &quot;XXXXX@XX.com&quot;</span><br></pre></td></tr></table></figure>

<h4 id="4、本地项目与远程服务器项目之间的交互"><a href="#4、本地项目与远程服务器项目之间的交互" class="headerlink" title="4、本地项目与远程服务器项目之间的交互"></a>4、本地项目与远程服务器项目之间的交互</h4><p>1、如果你没有最新的代码，希望从头开始</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git clone git@XXX.git      # 这里是项目的地址（可从项目主页复制），将远程服务器的内容完全复制过来 </span><br><span class="line">[root@qfedu.com ~]# cd BGBInspector_V01        # clone 之后进入该项目的文件夹 </span><br><span class="line">[root@qfedu.com ~]# touch　README.md           # 新建readme文件 </span><br><span class="line">[root@qfedu.com ~]# git add README.md          # 将新的文件添加到git的暂存区 </span><br><span class="line">[root@qfedu.com ~]# git commit -m ‘Its note：add a readme file’ # 将暂存区的文件提交到某一个版本保存下来，并加上注释 </span><br><span class="line">[root@qfedu.com ~]# git push -u origin master  # 将本地的更改提交到远程服务器</span><br></pre></td></tr></table></figure>

<p>2、如果你已经有一个新版代码，希望直接把本地的代码替换到远程服务器</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# cd existing_folder          #进入代码存在的文件夹，或者直接在该文件夹打开</span><br><span class="line">[root@qfedu.com ~]# git init           # 初始化 </span><br><span class="line">[root@qfedu.com ~]# git remote add origin git@master:/git-test/shell.git  #添加远程项目&quot;shell&quot;库的地址（可从项目主页复制） ,前提是事先需要先在git远程服务器上创建相应的裸库&quot;shell&quot;</span><br><span class="line">[root@qfedu.com ~]# git add .                   #添加该文件夹中所有的文件到git的暂存区 </span><br><span class="line">[root@qfedu.com ~]# git commit -m ‘note’        #提交所有代码到本机的版本库 </span><br><span class="line">[root@qfedu.com ~]# git push -u origin master   #将本地的更改提交到远程服务器</span><br></pre></td></tr></table></figure>

<ul>
<li><p>git 中 clone过来的时候，git 不会对比本地和服务器的文件，也就不会有冲突，</p>
</li>
<li><p>建议确定完全覆盖本地的时候用 clone，不确定会不会有冲突的时候用 git pull，将远程服务器的代码download下来</p>
</li>
<li><p>git pull=git fetch+git merge</p>
<p>  实验如下：</p>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">本地代码内容如下：</span><br><span class="line">[root@node1 shell]# cat mem.sh </span><br><span class="line">free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;</span><br><span class="line">echo hello</span><br><span class="line">echo ni hao</span><br><span class="line"></span><br><span class="line">远程Git服务器代码内容如下：</span><br><span class="line">[root@node1 shell]# cat mem.sh </span><br><span class="line">free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;</span><br><span class="line">echo hello</span><br><span class="line">echo ni hao</span><br><span class="line">echo ha ha</span><br><span class="line"></span><br><span class="line">本地机器做fetch操作：</span><br><span class="line">[root@node1 shell]# git fetch origin master:test</span><br><span class="line">remote: Enumerating objects: 5, done.</span><br><span class="line">remote: Counting objects: 100% (5&#x2F;5), done.</span><br><span class="line">remote: Compressing objects: 100% (2&#x2F;2), done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Unpacking objects: 100% (3&#x2F;3), done.</span><br><span class="line">From master:&#x2F;git-test&#x2F;shell</span><br><span class="line"> * [new branch]      master     -&gt; test</span><br><span class="line">   b522245..10f9569  master     -&gt; origin&#x2F;master</span><br><span class="line"></span><br><span class="line">fetch是把远程代码作为本地的一个其他分支下载到本地，并不更新本地分支，这里的命令是把远程的”master“分支下载到本地作为一个新的分支”test“存在</span><br><span class="line"></span><br><span class="line">查看本地文件并没有发生变化</span><br><span class="line">[root@node1 shell]# ls  </span><br><span class="line">mem.sh</span><br><span class="line">[root@node1 shell]# cat mem.sh </span><br><span class="line">free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;</span><br><span class="line">echo hello</span><br><span class="line">echo ni hao</span><br><span class="line"></span><br><span class="line">用diff查看本地master分支和fetch下来的test分支有什么区别：</span><br><span class="line">[root@node1 shell]# git diff master test</span><br><span class="line">diff --git a&#x2F;mem.sh b&#x2F;mem.sh</span><br><span class="line">index 7ce0803..c0c8cef 100644</span><br><span class="line">--- a&#x2F;mem.sh</span><br><span class="line">+++ b&#x2F;mem.sh</span><br><span class="line">@@ -1,3 +1,4 @@</span><br><span class="line"> free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;</span><br><span class="line"> echo hello</span><br><span class="line"> echo ni hao</span><br><span class="line">+echo ha ha</span><br><span class="line"></span><br><span class="line">如果发现fetch下来的代码没什么问题，可以选择和本地分支进行合并</span><br><span class="line">[root@node1 shell]# git merge </span><br><span class="line">Updating eb8645c..10f9569</span><br><span class="line">Fast-forward</span><br><span class="line"> mem.sh | 1 +</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[root@node1 shell]# cat mem.sh </span><br><span class="line">free -m | awk &#39;NR&#x3D;&#x3D;2&#123;print $4&#125;&#39;</span><br><span class="line">echo hello</span><br><span class="line">echo ni hao</span><br><span class="line">echo ha ha</span><br><span class="line"></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="5、常用的git-命令"><a href="#5、常用的git-命令" class="headerlink" title="5、常用的git 命令"></a>5、常用的git 命令</h4><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/011500266295799.jpg" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git init                      # 初始化 </span><br><span class="line">[root@qfedu.com ~]# git add main.cpp              # 将某一个文件添加到暂存区 </span><br><span class="line">[root@qfedu.com ~]# git add .                     # 将文件夹下的所有的文件添加到暂存区 </span><br><span class="line">[root@qfedu.com ~]# git commit -m ‘note‘          # 将暂存区中的文件保存成为某一个版本 </span><br><span class="line">[root@qfedu.com ~]# git log                       # 查看所有的版本日志 </span><br><span class="line">[root@qfedu.com ~]# git status                    # 查看现在暂存区的状况 </span><br><span class="line">[root@qfedu.com ~]# git diff                      # 查看现在文件与上一个提交-commit版本的区别 </span><br><span class="line">[root@qfedu.com ~]# git reset --hard HEAD^        # 回到上一个版本 </span><br><span class="line">[root@qfedu.com ~]# git reset --hard XXXXX        # XXX为版本编号，回到某一个版本 </span><br><span class="line">[root@qfedu.com ~]# git pull origin master        # 从主分支pull到本地 </span><br><span class="line">[root@qfedu.com ~]# git push -u origin master     # 从本地push到主分支 </span><br><span class="line">[root@qfedu.com ~]# git pull                      # pull默认主分支 </span><br><span class="line">[root@qfedu.com ~]# git push                      # push默认主分支 ...</span><br></pre></td></tr></table></figure>

<h4 id="6、版本穿梭"><a href="#6、版本穿梭" class="headerlink" title="6、版本穿梭"></a>6、版本穿梭</h4><h5 id="1、版本回退"><a href="#1、版本回退" class="headerlink" title="1、版本回退"></a>1、版本回退</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 用 git <span class="built_in">log</span> 命令查看：</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每一个提交的版本都唯一对应一个 commit 版本号，</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 git reset 命令退到上一个版本：</span></span><br><span class="line">[root@qfedu.com ~]# git reset --hard HEAD^</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git reflog                    # 查看命令历史，以便确定要回到哪个版本</span><br><span class="line">[root@qfedu.com ~]# git reset --hard commit_id    # 比如git reset --hard 3628164（不用全部输入，输入前几位即可）</span><br></pre></td></tr></table></figure>

<h5 id="2、分支管理"><a href="#2、分支管理" class="headerlink" title="2、分支管理"></a>2、分支管理</h5><p>1、创建分支    </p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git checkout -b dev     #创建dev分支，然后切换到dev分支</span><br><span class="line">[root@qfedu.com ~]# git checkout            #命令加上-b参数表示创建并切换，相当于以下两条命令：</span><br><span class="line">[root@qfedu.com ~]# git branch dev git checkout dev</span><br><span class="line">[root@qfedu.com ~]# git branch              #命令查看当前分支,</span><br><span class="line">[root@qfedu.com ~]# git branch              #命令会列出所有分支，当前分支前面会标一个*号</span><br><span class="line">[root@qfedu.com ~]# git branch * dev   master</span><br><span class="line">[root@qfedu.com ~]# git add readme.txt git commit -m &quot;branch test&quot;  # 在dev分支上正常提交.</span><br></pre></td></tr></table></figure>

<p>2、分支切换</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git checkout master     #切换回master分支</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看一个readme.txt文件，刚才添加的内容不见了，因为那个提交是在dev分支上，而master分支此刻的提交点并没有变</span>  </span><br></pre></td></tr></table></figure>

<p>3、合并分支</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git merge dev           #把dev分支的工作成果合并到master分支上</span><br><span class="line">[root@qfedu.com ~]# git merge               #命令用于合并指定分支到当前分支。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 合并后，再查看readme.txt的内容，就可以看到，和dev分支的最新提交是完全一样的。</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">注意到上面的Fast-forward信息，Git告诉我们，这次合并是“快进模式”，也就是直接把master指向dev的当前提交，所以合并速度非常快。</span><br><span class="line">当然，也不是每次合并都能Fast-forward，我们后面会讲其他方式的合并。</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git branch -d dev       #删除dev分支了：</span><br><span class="line">删除后，查看branch，就只剩下master分支了.</span><br></pre></td></tr></table></figure>

<h5 id="3、解决冲突"><a href="#3、解决冲突" class="headerlink" title="3、解决冲突"></a>3、解决冲突</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git checkout -b feature1        # 创建新的feature1分支</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改readme.txt最后一行，改为：</span></span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line"></span><br><span class="line">[root@qfedu.com ~]# git add readme.txt              # 在feature1分支上提交</span><br><span class="line">[root@qfedu.com ~]# git commit -m &quot;AND simple&quot;</span><br><span class="line">[root@qfedu.com ~]# git checkout master             #切换到master分支</span><br><span class="line">Switched to branch &#x27;master&#x27; Your branch is ahead of &#x27;origin/master&#x27; by 1 commit.</span><br><span class="line">Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。</span><br><span class="line"></span><br><span class="line">在master分支上把readme.txt文件的最后一行改为：</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">[root@qfedu.com ~]# git add readme.txt </span><br><span class="line">[root@qfedu.com ~]# git commit -m &quot;&amp; simple&quot;</span><br><span class="line"></span><br><span class="line">现在，master分支和feature1分支各自都分别有新的提交</span><br><span class="line">这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</span><br><span class="line">git merge feature1 Auto-merging readme.txt CONFLICT (content): </span><br><span class="line">Merge conflict in readme.txt Automatic merge failed; </span><br><span class="line">fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">readme.txt文件存在冲突，必须手动解决冲突后再提交。</span><br><span class="line">[root@qfedu.com ~]# git status 可以显示冲突的文件;</span><br><span class="line">直接查看readme.txt的内容：</span><br><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL. </span><br><span class="line">Git has a mutable index called stage. </span><br><span class="line">Git tracks changes of files. </span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Creating a new branch is quick &amp; simple. ======= Creating a new branch is quick AND simple. &gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br><span class="line">Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改后保存再提交：</span><br><span class="line">[root@qfedu.com ~]# git add readme.txt  </span><br><span class="line">[root@qfedu.com ~]# git commit -m &quot;conflict fixed&quot; </span><br><span class="line">[master 59bc1cb] conflict fixed</span><br><span class="line">最后，删除feature1分支：</span><br><span class="line">[root@qfedu.com ~]# git branch -d feature1 </span><br><span class="line">Deleted branch feature1 (was 75a857c).</span><br></pre></td></tr></table></figure>

<h2 id="七、Github-远程仓库"><a href="#七、Github-远程仓库" class="headerlink" title="七、Github 远程仓库"></a>七、Github 远程仓库</h2><p>1、github.com 注册账户</p>
<p>2、github 上创建仓库</p>
<p>3、本地服务器生成 ssh 公钥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ssh-keygen -t rsa -C &#x27;meteor@163.com&#x27;  # 邮箱要与github上注册的相同</span><br><span class="line">[root@qfedu.com ~]# cat .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDVThfq4brrlsPGtAknVB0TLPx+7Dd3qlxTbSIrUOsGC5Y8JuNqVTlIntZB4oNj8cSQrWvec9CKm0a8o7WwaJIiqpxurz+YpQHP2KbapftKIxsX4hPf/z+p0El1U6arQa35/xmNsq+cJLH/bDdRG+EMDhuCBmjVZOlLj/hEdeIT6s56AnnCkaWoF+sq58KCF7Tk54jRbs/YiyE4SN7FuA70r+07sA/uj0+lmuk4E190KtQUELhjX/E9stivlqiRhxnKvVUqXDywsjfM8Rtvbi4Fg9R8Wt9fpd4QwnWksYUoR5qZJFYXO4hSZrUnSMruPK14xXjDJcFDcP2eHIzKgLD1 meteor@163.com</span><br></pre></td></tr></table></figure>
<p>4、 github 添加 ssh 公钥 </p>
<p>复制以上的公钥，在 github 中添加ssh key</p>
<p>5、测试连接</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# yum install git</span><br><span class="line">........</span><br><span class="line">[root@qfedu.com ~]# ssh -T git@qfedu.comhub.com</span><br><span class="line">The authenticity of host &#x27;github.com (13.250.177.223)&#x27; can&#x27;t be established.</span><br><span class="line">RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8.</span><br><span class="line">RSA key fingerprint is MD5:16:27:ac:a5:76:28:2d:36:63:1b:56:4d:eb:df:a6:48.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;github.com,13.250.177.223&#x27; (RSA) to the list of known hosts.</span><br><span class="line">Hi meteor! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line">[root@qfedu.com ~]#</span><br></pre></td></tr></table></figure>
<p>6、连接远程仓库（创建一个测试存储库）</p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/git_remote_method.png" alt="it_remote_metho"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在 github 网站新建一个仓库，命名为linux</span></span><br><span class="line">~~~</span><br><span class="line">[root@qfedu.com ~]# cd /opt</span><br><span class="line">[root@qfedu.com ~]# mkdir linux</span><br><span class="line">[root@qfedu.com ~]# mkdir linux</span><br><span class="line">[root@qfedu.com ~]# cd linux</span><br><span class="line">~~~</span><br><span class="line"><span class="meta">#</span><span class="bash"> git 初始化，然后做第一个基本的git操作(需要在github上创建存储库)</span></span><br><span class="line">[root@qfedu.com ~]# git init</span><br><span class="line">[root@qfedu.com ~]# touch README</span><br><span class="line">[root@qfedu.com ~]# git add README</span><br><span class="line">[root@qfedu.com ~]# git commit -m &#x27;first commit&#x27;</span><br><span class="line">[root@qfedu.com ~]# git remote add origin git@qfedu.comhub.com:userhub/linux.git</span><br><span class="line">~~~</span><br><span class="line"><span class="meta">#</span><span class="bash"> 若出现origin已经存在的错误，删除origin</span></span><br><span class="line">[root@qfedu.com linux]# git remote rm origin</span><br><span class="line"><span class="meta">#</span><span class="bash"> 现在继续执行push到远端</span></span><br><span class="line">~~~</span><br><span class="line">[root@qfedu.com linux]# git remote add origin git@qfedu.comhub.com:userhub/linux.git</span><br><span class="line">[root@qfedu.com linux]# git push -u origin master</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Writing objects: 100% (3/3), 205 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@qfedu.comhub.com:fakehydra/linux-.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">分支 master 设置为跟踪来自 origin 的远程分支 master。</span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置存储库链接</span></span><br><span class="line">[root@qfedu.com ~]# git remote set-url origin git@qfedu.comhub.com:userhub/linux.git</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 push 失败，合并分支到 master 再 push</span></span><br><span class="line">[root@qfedu.com ~]# git pull --rebase origin master</span><br></pre></td></tr></table></figure>

<h2 id="八、Gitlab-Server-部署"><a href="#八、Gitlab-Server-部署" class="headerlink" title="八、Gitlab Server 部署"></a>八、Gitlab Server 部署</h2><h3 id="1、环境配置"><a href="#1、环境配置" class="headerlink" title="1、环境配置"></a>1、环境配置</h3><p>关闭防火墙、SELinux</p>
<p>开启邮件服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# systemctl start  postfix</span><br><span class="line">[root@qfedu.com ~]# systemctl enable postfix</span><br></pre></td></tr></table></figure>

<h3 id="2、部署-Gitlab"><a href="#2、部署-Gitlab" class="headerlink" title="2、部署 Gitlab"></a>2、部署 Gitlab</h3><h4 id="1、安装-gitlab-依赖包"><a href="#1、安装-gitlab-依赖包" class="headerlink" title="1、安装 gitlab 依赖包"></a>1、安装 gitlab 依赖包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">centos7:</span><br><span class="line">[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie policycoreutils-python</span><br><span class="line"><span class="meta">#</span><span class="bash"> gitlab-ce 10.x.x以后的版本需要依赖policycoreutils-python</span></span><br><span class="line"></span><br><span class="line">centos8:</span><br><span class="line">[root@qfedu.com ~]# yum install -y curl openssh-server openssh-clients postfix cronie  policycoreutils-python-utils</span><br></pre></td></tr></table></figure>

<h4 id="2、添加官方源"><a href="#2、添加官方源" class="headerlink" title="2、添加官方源"></a>2、添加官方源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# curl https://packages.gitlab.com/install/repositories/gitlab/gitlab-ce/script.rpm.sh | sudo bash</span><br></pre></td></tr></table></figure>

<p>因为官方源太慢，可以使用国内清华yum源，配置如下</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]<span class="comment"># vim /etc/yum.repos.d/gitlab-ce.repo</span></span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el<span class="variable">$releasever</span>/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br></pre></td></tr></table></figure>

<h4 id="3、安装-Gitlab"><a href="#3、安装-Gitlab" class="headerlink" title="3、安装 Gitlab"></a>3、安装 Gitlab</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# yum -y install gitlab-ce                    # 自动安装最新版</span><br><span class="line">[root@qfedu.com ~]# yum -y install gitlab-ce-x.x.x				# 安装指定版本Gitlab</span><br></pre></td></tr></table></figure>

<h4 id="4、配置-Gitlab"><a href="#4、配置-Gitlab" class="headerlink" title="4、配置 Gitlab"></a>4、配置 Gitlab</h4><h5 id="1、查看Gitlab版本"><a href="#1、查看Gitlab版本" class="headerlink" title="1、查看Gitlab版本"></a>1、查看Gitlab版本</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# head -1 /opt/gitlab/version-manifest.txt</span><br><span class="line">gitlab-ce 10.1.1</span><br></pre></td></tr></table></figure>

<h5 id="2、Gitlab-配置登录链接"><a href="#2、Gitlab-配置登录链接" class="headerlink" title="2、Gitlab 配置登录链接"></a>2、Gitlab 配置登录链接</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">设置登录链接</span></span><br><span class="line">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">***</span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># GitLab URL</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#! URL on which GitLab will be reachable.</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#! For more details on configuring external_url see:</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">#! https://docs.gitlab.com/omnibus/settings/configuration.html#configuring-the-external-url-for-gitlab</span></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 没有域名，可以设置为本机IP地址</span></span><br><span class="line">external_url &#x27;http://172.17.0.61&#x27;</span><br><span class="line">***</span><br><span class="line">[root@qfedu.com ~]# grep &quot;^external_url&quot; /etc/gitlab/gitlab.rb</span><br><span class="line">external_url &#x27;http://172.17.0.61&#x27;     #绑定监听的域名或IP</span><br></pre></td></tr></table></figure>

<h5 id="3、初始化-Gitlab"><a href="#3、初始化-Gitlab" class="headerlink" title="3、初始化 Gitlab"></a>3、初始化 Gitlab</h5><p><strong>配置语言环境</strong></p>
<p>gitlab要求语言环境为英文环境，必须切换，切换方法如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">注意：可以先尝试以下方案</span><br><span class="line">	语言环境问题：如果碰到之后的解决方案如下，需要重新登录</span><br><span class="line"> 	[root@wing ~]# echo &quot;export LC_ALL&#x3D;en_US.UTF-8&quot;  &gt;&gt;  &#x2F;etc&#x2F;profile </span><br><span class="line"></span><br><span class="line">如果上面的方案不可以，再使用下面的方案： 	</span><br><span class="line"># yum install langpacks-zh_CN langpacks-en langpacks-en_GB -y</span><br><span class="line"># cat &gt; &#x2F;etc&#x2F;profile.d&#x2F;locale.sh&lt;&lt;-EOF</span><br><span class="line"> export LANG&#x3D;en_US.UTF-8</span><br><span class="line"> export LANGUAGE&#x3D;en_US.UTF-8</span><br><span class="line"> export LC_COLLATE&#x3D;C</span><br><span class="line"> export LC_CTYPE&#x3D;en_US.UTF-8</span><br><span class="line"> EOF</span><br><span class="line"># source &#x2F;etc&#x2F;profile.d&#x2F;locale.sh</span><br><span class="line"></span><br><span class="line">退出终端重新登陆</span><br></pre></td></tr></table></figure>

<p>第一次使用配置时间较长</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-ctl reconfigure   </span><br><span class="line">.....</span><br></pre></td></tr></table></figure>

<h5 id="4、启动-Gitlab-服务"><a href="#4、启动-Gitlab-服务" class="headerlink" title="4、启动 Gitlab 服务"></a>4、启动 Gitlab 服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-ctl start</span><br><span class="line">ok: run: gitaly: (pid 22896) 2922s</span><br><span class="line">ok: run: gitlab-monitor: (pid 22914) 2921s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 22882) 2922s</span><br><span class="line">ok: run: logrotate: (pid 22517) 2987s</span><br><span class="line">ok: run: nginx: (pid 22500) 2993s</span><br><span class="line">ok: run: node-exporter: (pid 22584) 2974s</span><br><span class="line">ok: run: postgres-exporter: (pid 22946) 2919s</span><br><span class="line">ok: run: postgresql: (pid 22250) 3047s</span><br><span class="line">ok: run: prometheus: (pid 22931) 2920s</span><br><span class="line">ok: run: redis: (pid 22190) 3053s</span><br><span class="line">ok: run: redis-exporter: (pid 22732) 2962s</span><br><span class="line">ok: run: sidekiq: (pid 22472) 3005s</span><br><span class="line">ok: run: unicorn: (pid 22433) 3011s</span><br><span class="line"></span><br><span class="line">[git@qfedu.com ~]# lsof -i:80</span><br><span class="line">COMMAND   PID       USER   FD   TYPE DEVICE SIZE/OFF NODE NAME</span><br><span class="line">nginx   22500       root    7u  IPv4  50923      0t0  TCP *:http (LISTEN)</span><br><span class="line">nginx   22501 gitlab-www    7u  IPv4  50923      0t0  TCP *:http (LISTEN)</span><br></pre></td></tr></table></figure>

<h5 id="5、Gitlab-设置-HTTPS-方式-（缺少配置）"><a href="#5、Gitlab-设置-HTTPS-方式-（缺少配置）" class="headerlink" title="5、Gitlab 设置 HTTPS 方式 （缺少配置）"></a>5、Gitlab 设置 HTTPS 方式 （缺少配置）</h5><ul>
<li>如果想要以上的 https 方式正常生效使用，则需要把 letsencrypt 自动生成证书的配置打开，这样在执行重新让配置生效命令 (gitlab-ctl reconfigure) 的时候会自动给域名生成免费的证书并自动在 gitlab 自带的 nginx 中加上相关的跳转配置，都是全自动的，非常方便。</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">letsencrypt[&#x27;enable&#x27;] = true //如果因为这行报错，改成false即可</span><br><span class="line">letsencrypt[&#x27;contact_emails&#x27;] = [&#x27;276267003@qq.com&#x27;]     # 添加联系人的电子邮件地址</span><br></pre></td></tr></table></figure>

<h5 id="6、Gitlab-添加smtp邮件功能"><a href="#6、Gitlab-添加smtp邮件功能" class="headerlink" title="6、Gitlab 添加smtp邮件功能"></a>6、Gitlab 添加smtp邮件功能</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[git@qfedu.com ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">postfix 并非必须的；根据具体情况配置，以 SMTP 的为例配置邮件服务器来实现通知；参考配置如下： </span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## Email Settings</span></span></span><br><span class="line">gitlab_rails[&#x27;gitlab_email_enabled&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_from&#x27;] = &#x27;276267003@qq.com&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_display_name&#x27;] = &#x27;gitlab&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_reply_to&#x27;] = &#x27;276267003@qq.com&#x27;</span><br><span class="line">gitlab_rails[&#x27;gitlab_email_subject_suffix&#x27;] = &#x27;[gitlab]&#x27;</span><br><span class="line">gitlab_rails[&#x27;smtp_enable&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_address&#x27;] = &quot;smtp.qq.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_port&#x27;] = 465</span><br><span class="line">gitlab_rails[&#x27;smtp_user_name&#x27;] = &quot;276267003@qq.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_password&#x27;] = &quot;kktohrvdryglbjjh&quot; #这是我的qq邮箱授权码</span><br><span class="line">gitlab_rails[&#x27;smtp_domain&#x27;] = &quot;smtp.qq.com&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_authentication&#x27;] = &quot;login&quot;</span><br><span class="line">gitlab_rails[&#x27;smtp_enable_starttls_auto&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;smtp_tls&#x27;] = true</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">修改配置后需要初始化配置，先关掉服务再重新初始化</span></span><br><span class="line">[git@qfedu.com ~]# gitlab-ctl stop</span><br><span class="line">ok: down: gitaly: 0s, normally up</span><br><span class="line">ok: down: gitlab-monitor: 1s, normally up</span><br><span class="line">ok: down: gitlab-workhorse: 0s, normally up</span><br><span class="line">ok: down: logrotate: 1s, normally up</span><br><span class="line">ok: down: nginx: 0s, normally up</span><br><span class="line">ok: down: node-exporter: 1s, normally up</span><br><span class="line">ok: down: postgres-exporter: 0s, normally up</span><br><span class="line">ok: down: postgresql: 0s, normally up</span><br><span class="line">ok: down: prometheus: 0s, normally up</span><br><span class="line">ok: down: redis: 0s, normally up</span><br><span class="line">ok: down: redis-exporter: 1s, normally up</span><br><span class="line">ok: down: sidekiq: 0s, normally up</span><br><span class="line">ok: down: unicorn: 1s, normally up</span><br><span class="line"></span><br><span class="line">[git@qfedu.com ~]# gitlab-ctl reconfigure  </span><br><span class="line">......</span><br><span class="line"></span><br><span class="line">[git@qfedu.com ~]# gitlab-ctl start</span><br><span class="line">ok: run: gitaly: (pid 37603) 0s</span><br><span class="line">ok: run: gitlab-monitor: (pid 37613) 0s</span><br><span class="line">ok: run: gitlab-workhorse: (pid 37625) 0s</span><br><span class="line">ok: run: logrotate: (pid 37631) 0s</span><br><span class="line">ok: run: nginx: (pid 37639) 1s</span><br><span class="line">ok: run: node-exporter: (pid 37644) 0s</span><br><span class="line">ok: run: postgres-exporter: (pid 37648) 1s</span><br><span class="line">ok: run: postgresql: (pid 37652) 0s</span><br><span class="line">ok: run: prometheus: (pid 37660) 1s</span><br><span class="line">ok: run: redis: (pid 37668) 0s</span><br><span class="line">ok: run: redis-exporter: (pid 37746) 0s</span><br><span class="line">ok: run: sidekiq: (pid 37750) 1s</span><br><span class="line">ok: run: unicorn: (pid 37757) 0s</span><br></pre></td></tr></table></figure>

<h5 id="7、Gitlab-发送邮件测试"><a href="#7、Gitlab-发送邮件测试" class="headerlink" title="7、Gitlab 发送邮件测试"></a>7、Gitlab 发送邮件测试</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[git@qfedu.com ~]# gitlab-rails console </span><br><span class="line">[root@wing ~]# gitlab-rails console</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line"> GitLab:       12.10.1 (e658772bd63) FOSS</span><br><span class="line"> GitLab Shell: 12.2.0</span><br><span class="line"> PostgreSQL:   11.7</span><br><span class="line">---------------------------------------------------------------------</span><br><span class="line">Loading production environment (Rails 6.0.2)</span><br><span class="line">irb(main):003:0&gt; </span><br><span class="line">irb(main):004:0&gt; Notify.test_email(&#x27;276267003@qq.com&#x27;, &#x27;Message Subject&#x27;, &#x27;Message Body&#x27;).deliver_now  //输入测试命令，回车</span><br><span class="line"></span><br><span class="line"><span class="meta">Notify#</span><span class="bash">test_email: processed outbound mail <span class="keyword">in</span> 5.2ms</span></span><br><span class="line">Delivered mail 5eafceaa250a_1d063fb777add9a08601a@wing.mail (1430.1ms)</span><br><span class="line">Date: Mon, 04 May 2020 16:13:30 +0800</span><br><span class="line">From: gitlab &lt;276267003@qq.com&gt;</span><br><span class="line">Reply-To: gitlab &lt;276267003@qq.com&gt;</span><br><span class="line">To: 276267003@qq.com</span><br><span class="line">Message-ID: &lt;5eafceaa250a_1d063fb777add9a08601a@wing.mail&gt;</span><br><span class="line">Subject: Message Subject</span><br><span class="line">Mime-Version: 1.0</span><br><span class="line">Content-Type: text/html;</span><br><span class="line"> charset=UTF-8</span><br><span class="line">Content-Transfer-Encoding: 7bit</span><br><span class="line">Auto-Submitted: auto-generated</span><br><span class="line">X-Auto-Response-Suppress: All</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE html PUBLIC &quot;-//W3C//DTD HTML 4.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/REC-html40/loose.dtd&quot;&gt;</span><br><span class="line">&lt;html&gt;&lt;body&gt;&lt;p&gt;Message Body&lt;/p&gt;&lt;/body&gt;&lt;/html&gt;</span><br><span class="line"></span><br><span class="line">=&gt; #&lt;Mail::Message:70056859616080, Multipart: false, Headers: &lt;Date: Mon, 04 May 2020 16:13:30 +0800&gt;, &lt;From: gitlab &lt;276267003@qq.com&gt;&gt;, &lt;Reply-To: gitlab &lt;276267003@qq.com&gt;&gt;, &lt;To: 276267003@qq.com&gt;, &lt;Message-ID: &lt;5eafceaa250a_1d063fb777add9a08601a@wing.mail&gt;&gt;, &lt;Subject: Message Subject&gt;, &lt;Mime-Version: 1.0&gt;, &lt;Content-Type: text/html; charset=UTF-8&gt;, &lt;Content-Transfer-Encoding: 7bit&gt;, &lt;Auto-Submitted: auto-generated&gt;, &lt;X-Auto-Response-Suppress: All&gt;&gt;</span><br><span class="line">irb(main):005:0&gt; </span><br></pre></td></tr></table></figure>

<p>去qq邮箱web界面查看是否收到邮件</p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20200504161843613.png" alt="image-20200504161843613"></p>
<h3 id="3、Gitlab-的使用"><a href="#3、Gitlab-的使用" class="headerlink" title="3、Gitlab 的使用"></a>3、Gitlab 的使用</h3><p><strong>在浏览器中输入 <a href="http://192.168.1.178/">http://192.168.1.178/</a> ，然后 change password:  ，并使用root用户登录 即可 (后续动作根据提示操作)</strong></p>
<h4 id="1、Gitlab-命令行修改密码"><a href="#1、Gitlab-命令行修改密码" class="headerlink" title="1、Gitlab 命令行修改密码"></a>1、Gitlab 命令行修改密码</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-rails console production</span><br><span class="line">irb(main):001:0&gt;user = User.where(id: 1).first      # id为1的是超级管理员</span><br><span class="line">irb(main):002:0&gt;user.password = &#x27;yourpassword&#x27;      # 密码必须至少8个字符</span><br><span class="line">irb(main):003:0&gt;user.save!                          # 如没有问题 返回true</span><br><span class="line">exit 												# 退出</span><br></pre></td></tr></table></figure>

<h4 id="2、Gitlab服务管理"><a href="#2、Gitlab服务管理" class="headerlink" title="2、Gitlab服务管理"></a>2、Gitlab服务管理</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-ctl start                        # 启动所有 gitlab 组件；</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl stop                         # 停止所有 gitlab 组件；</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl restart                      # 重启所有 gitlab 组件；</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl status                       # 查看服务状态；</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl reconfigure                  # 初始化服务；</span><br><span class="line">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb               # 修改默认的配置文件；</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl tail                         # 查看日志；</span><br></pre></td></tr></table></figure>

<h4 id="3、登陆-Gitlab"><a href="#3、登陆-Gitlab" class="headerlink" title="3、登陆 Gitlab"></a>3、登陆 Gitlab</h4><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/1.png" alt="1"></p>
<p><strong>如果需要手工修改nginx的port ，可以在gitlab.rb中设置 nginx[‘listen_port’] = 8000 ，然后再次 gitlab-ctl reconfigure即可</strong></p>
<p><strong>登录 gitlab 如下所示(首次登陆设置 root 密码)：</strong><br><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/2.1.png" alt="1"></p>
<h4 id="4、创建项目组-group"><a href="#4、创建项目组-group" class="headerlink" title="4、创建项目组 group"></a>4、创建项目组 group</h4><p>组名为plat-sp ,<br><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/2.2.png" alt="1"></p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/3.png" alt="1"></p>
<h4 id="5、去掉用户的自动注册功能（安全）"><a href="#5、去掉用户的自动注册功能（安全）" class="headerlink" title="5、去掉用户的自动注册功能（安全）"></a>5、去掉用户的自动注册功能（安全）</h4><p>admin are -&gt; settings -&gt; Sign-up Restrictions 去掉钩钩，然后拉到最下面保存，重新登录<br><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/4.png" alt="1"></p>
<h2 id="九、Gitlab-开发代码提交处理流程"><a href="#九、Gitlab-开发代码提交处理流程" class="headerlink" title="九、Gitlab 开发代码提交处理流程"></a>九、Gitlab 开发代码提交处理流程</h2><h3 id="1、公司代码提交合并流程"><a href="#1、公司代码提交合并流程" class="headerlink" title="1、公司代码提交合并流程"></a>1、公司代码提交合并流程</h3><ul>
<li><p>  PM（项目主管/项目经理）在gitlab创建任务，分配给开发人员</p>
</li>
<li><p>  开发人员领取任务后，在本地使用git clone拉取代码库</p>
</li>
<li><p>  开发人员创建开发分支（git checkout -b dev），并进行开发</p>
</li>
<li><p>  开发人员完成之后，提交到本地仓库（git commit ）</p>
</li>
<li><p>  开发人员在gitlab界面上申请分支合并请求（Merge request）</p>
</li>
<li><p>  PM在gitlab上查看提交和代码修改情况，确认无误后，确认将开发人员的分支合并到主分支（master）</p>
</li>
<li><p>  开发人员在gitlab上Mark done确认开发完成，并关闭issue。这一步在提交合并请求时可以通过描述中填写”close #1”等字样，可以直接关闭issue</p>
</li>
</ul>
<h3 id="2、创建项目管理用户-Tompson"><a href="#2、创建项目管理用户-Tompson" class="headerlink" title="2、创建项目管理用户 Tompson"></a>2、创建项目管理用户 Tompson</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/5.png" alt="1"><br>同样的方法，再创建 Eric 、Hellen 用户。用户添加完毕后，gitlab 会给用户发一封修改密码的邮件，各用户需要登录自己的邮箱，并点击相关的链接，设置新密码。</p>
<h3 id="3、将-Tompson-用户添加到组中，指定T为本组的-owner"><a href="#3、将-Tompson-用户添加到组中，指定T为本组的-owner" class="headerlink" title="3、将 Tompson 用户添加到组中，指定T为本组的 owner"></a>3、将 Tompson 用户添加到组中，指定T为本组的 owner</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/6.png" alt="1"></p>
<h3 id="4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer"><a href="#4、同样的方法将用户Eric、Hellen-添加到组中，并指定为Developer" class="headerlink" title="4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer"></a>4、同样的方法将用户Eric、Hellen 添加到组中，并指定为Developer</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/7.png" alt="1"></p>
<h3 id="5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project"><a href="#5、使用-Tompson-用户的身份与密码登录到-gitlab-界面中，并创建项目-Project" class="headerlink" title="5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project"></a>5、使用 Tompson 用户的身份与密码登录到 gitlab 界面中，并创建项目 Project</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/10.png" alt="1"></p>
<h3 id="6、指定项目的存储路径和项目名称"><a href="#6、指定项目的存储路径和项目名称" class="headerlink" title="6、指定项目的存储路径和项目名称"></a>6、指定项目的存储路径和项目名称</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/11.png" alt="1"></p>
<p>把客户端的公钥添加到这里之后才会出现下图的内容</p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/12.png" alt="1"></p>
<h3 id="7、为项目创建-Dev分支"><a href="#7、为项目创建-Dev分支" class="headerlink" title="7、为项目创建 Dev分支"></a>7、为项目创建 Dev分支</h3><p>注意：因为版本的原因，需要先在项目里面添加一个文件，才能显示下图中创建分支的操作</p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/13.png" alt="1"></p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/14.png" alt="1"></p>
<h3 id="8、在-client-上添加-Tompson-的用户"><a href="#8、在-client-上添加-Tompson-的用户" class="headerlink" title="8、在 client 上添加 Tompson 的用户"></a>8、在 client 上添加 Tompson 的用户</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[git@qfedu.com ~]# useradd Tompson</span><br><span class="line">[git@qfedu.com ~]# useradd Hellen</span><br><span class="line">[git@qfedu.com ~]# useradd Eric</span><br><span class="line">[git@qfedu.com ~]# useradd test</span><br><span class="line">[git@qfedu.com ~]# su - Tompson</span><br><span class="line">[Tompson@qfedu.com ~]$ ssh-keygen</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/Tompson/.ssh/id_rsa): </span><br><span class="line">Created directory &#x27;/home/Tompson/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/Tompson/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/Tompson/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:SAoAH2zSxqEJqVgKKrxM5XMi6tKe61JMRdwMhwBNIrE Tompson@domain.cn</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|XX==o=.          |</span><br><span class="line">|*BOo+.o          |</span><br><span class="line">|E*=.  .          |</span><br><span class="line">|*+.= + .         |</span><br><span class="line">|=oo = . S        |</span><br><span class="line">|.oo              |</span><br><span class="line">|.o               |</span><br><span class="line">|o...             |</span><br><span class="line">|.+=.             |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[Tompson@qfedu.com ~]$ cat .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDZ8cRGHej+sZzlmK36W5MUXMLOGdTwFI9Jj44mGuabZCrlYW4GDpL6ppezN+Sur0wHtnKonYJzm8ntqS0S0UHyaPPQPl9Mrs/6Z4VrXZ/4RlqHdWeSrmOwCBQld0l8HvrmP4TyGHrOreO8uZqimd/Z+OiMqnYRZzENX11Pti/Px5g1MtJcoCi9uLtF42QYrt1X/fzAyPU9C5/5ZUq4Jln3EF20bzcA52oAzZIl0jrhI0TeTeW6zYq+KxdHGshL+qG7+Ne+akPOe4Ma5BQjcMZ2dQ2kbGuozXmLT8RDcj9YRKceQsUdTI71lJpwrWKGn8Vhra0EaK3hgoTuvMYaGfOF Tompson@domain.cn</span><br></pre></td></tr></table></figure>

<h3 id="9、将-Tompson-的公钥复制到-gitlab-中"><a href="#9、将-Tompson-的公钥复制到-gitlab-中" class="headerlink" title="9、将 Tompson 的公钥复制到 gitlab 中"></a>9、将 Tompson 的公钥复制到 gitlab 中</h3><p>使用 Tompson 用户的身份与密码登录到 gitlab界面中，然后在 ssh-key 中添加相关的key<br><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/8.png" alt="1"></p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/9.png" alt="1"></p>
<h3 id="10、为-Tompson-用户配置-git"><a href="#10、为-Tompson-用户配置-git" class="headerlink" title="10、为 Tompson 用户配置 git"></a>10、为 Tompson 用户配置 git</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Tompson@qfedu.com ~]$ git config --global user.email &quot;222@qq.com&quot;</span><br><span class="line">[Tompson@qfedu.com ~]$ git config --global user.name &quot;tom&quot;</span><br><span class="line"></span><br><span class="line">[Tompson@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git</span><br><span class="line">Cloning into &#x27;chathall&#x27;...</span><br><span class="line">The authenticity of host &#x27;192.168.60.119 (192.168.60.119)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.</span><br><span class="line">ECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">Warning: Permanently added &#x27;192.168.60.119&#x27; (ECDSA) to the list of known hosts.</span><br><span class="line">remote: Counting objects: 3, done.</span><br><span class="line">remote: Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (3/3), done.</span><br><span class="line">[Tompson@qfedu.com ~]$ </span><br><span class="line">[Tompson@qfedu.com ~]$ cd chathall/</span><br><span class="line">[Tompson@qfedu.com chathall]$ ls</span><br><span class="line">Readme.txt</span><br><span class="line">[Tompson@qfedu.com chathall]$</span><br></pre></td></tr></table></figure>

<h3 id="11、创建新文件，添加内容，并提交到-master-分支"><a href="#11、创建新文件，添加内容，并提交到-master-分支" class="headerlink" title="11、创建新文件，添加内容，并提交到 master 分支"></a>11、创建新文件，添加内容，并提交到 master 分支</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Tompson@qfedu.com chathall]$ vim test.sh</span><br><span class="line">[Tompson@qfedu.com chathall]$ cat test.sh </span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;gitlab test&quot;</span><br><span class="line">[Tompson@qfedu.com chathall]$ git add . </span><br><span class="line">[Tompson@qfedu.com chathall]$ git commit -m &#x27;201805101649&#x27;</span><br><span class="line">[master 80edf6b] 201805101649</span><br><span class="line"> 1 file changed, 2 insertions(+)</span><br><span class="line"> create mode 100644 test.sh</span><br><span class="line">[Tompson@qfedu.com chathall]$ </span><br><span class="line">[Tompson@qfedu.com chathall]$ git push -u origin master </span><br><span class="line">Counting objects: 4, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (3/3), 305 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@192.168.60.119:plat-sp/chathall.git</span><br><span class="line">   4611654..80edf6b  master -&gt; master</span><br><span class="line">Branch master set up to track remote branch master from origin.</span><br><span class="line">[Tompson@qfedu.com chathall]$ </span><br></pre></td></tr></table></figure>

<h3 id="12、使用-Eric-用户登录，并-clone-项目"><a href="#12、使用-Eric-用户登录，并-clone-项目" class="headerlink" title="12、使用 Eric 用户登录，并 clone 项目"></a>12、使用 Eric 用户登录，并 clone 项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[git@qfedu.com ~]# su - Eric</span><br><span class="line">[Eric@qfedu.com ~]$ ssh-keygen -C Eric@domain.cn</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file in which to save the key (/home/Eric/.ssh/id_rsa): </span><br><span class="line">Created directory &#x27;/home/Eric/.ssh&#x27;.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /home/Eric/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /home/Eric/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:VZaJvjA5SJZEB+yuRpDBNHCECCZ5R8X0DYcNE0f1B6E Eric@domain.cn</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|*O=..B*o**+o+oo. |</span><br><span class="line">|*.+.. *o.*oooo . |</span><br><span class="line">| . + + ..oo E . .|</span><br><span class="line">|  o   o =..    . |</span><br><span class="line">|   . .  S+ .     |</span><br><span class="line">|    . .   .      |</span><br><span class="line">|   . .           |</span><br><span class="line">|    o            |</span><br><span class="line">|   .             |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line"></span><br><span class="line">[Eric@qfedu.com ~]$ cat .ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDxQcn4UjRW/5PT5witeV9+S2w8WK5ouawHxEF7s9wuWsT4pqhcu5BN74NG3CPaq1jJZnkV+aQsTw+60BAd1gOK0FBbKWxmohmE61n9vfpUT5igJ72t2jpXjfKwLIHw+Iq5yM4yUhkwSsoBuZkxYSEltnj8OvXaOlCDYnXuGBa9+xO8f5yVIcOtiwRvv+Y1PRRzSIcazPVZax9FLK26t1R4NPiY4xWkIJyK2OrKMeiaBBzyMfWzHdmsCWa51oSrYSmz3PDBXpzIBs3OdKxcaJs9Lc5u87YCV5RMUjLrPcA7nPK6crOabLXhz3d5GSYggMTOByQkyKOo7WlYpARCHOt/ Eric@domain.cn</span><br><span class="line">[Eric@qfedu.com ~]$ </span><br></pre></td></tr></table></figure>

<h3 id="13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目"><a href="#13、同样需要使用Eric用户登录gitlab-web-界面，并添加相应的ssh-key。然后设置git-，并clone项目" class="headerlink" title="13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目"></a>13、同样需要使用Eric用户登录gitlab web 界面，并添加相应的ssh-key。然后设置git ，并clone项目</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Eric@qfedu.com ~]$ git config --global user.email &quot;Eric@domain.cn&quot;</span><br><span class="line">[Eric@qfedu.com ~]$ git config --global user.name &quot;Eric&quot;</span><br><span class="line">[Eric@qfedu.com ~]$ git clone git@192.168.60.119:plat-sp/chathall.git</span><br><span class="line">Cloning into &#x27;chathall&#x27;...</span><br><span class="line">The authenticity of host &#x27;192.168.60.119 (192.168.60.119)&#x27; can&#x27;t be established.</span><br><span class="line">ECDSA key fingerprint is SHA256:CDxAQmj6gUkIxB6XUofbZ853GuPM5LS2QO4a5dD7jRo.</span><br><span class="line">ECDSA key fingerprint is MD5:4e:20:72:a7:46:c6:d7:5d:bb:9d:ce:c3:f3:da:43:f9.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)? yes</span><br><span class="line">remote: Counting objects: 6, done.</span><br><span class="line">remote: Compressing objects: 100% (3/3), done.</span><br><span class="line">remote: Total 6 (delta 0), reused 0 (delta 0)</span><br><span class="line">Receiving objects: 100% (6/6), done.</span><br><span class="line">[Eric@qfedu.com ~]$ </span><br></pre></td></tr></table></figure>

<h3 id="14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限"><a href="#14、切换到dev分支，修改文件内容，并将新-code-提交到-dev分支-Developer角色默认并没有提交master的权限" class="headerlink" title="14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)"></a>14、切换到dev分支，修改文件内容，并将新 code 提交到 dev分支 (Developer角色默认并没有提交master的权限)</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Eric@qfedu.com chathall]$ git checkout dev </span><br><span class="line">Branch dev set up to track remote branch dev from origin.</span><br><span class="line">Switched to a new branch &#x27;dev&#x27;</span><br><span class="line">[Eric@qfedu.com chathall]$ ls</span><br><span class="line">Readme.txt  test.sh</span><br><span class="line">[Eric@qfedu.com chathall]$ vim eric.sh </span><br><span class="line">[Eric@qfedu.com chathall]$ cat eric.sh</span><br><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">echo &quot;brahch test&quot;</span><br><span class="line">[Eric@qfedu.com chathall]$ git add . </span><br><span class="line">[Eric@qfedu.com chathall]$ git commit -m &#x27;201805101658&#x27;</span><br><span class="line">[dev 6687039] 201805101658</span><br><span class="line"> 1 file changed, 1 insertion(+)</span><br><span class="line">[Eric@qfedu.com chathall]$ git push -u origin dev </span><br><span class="line">Counting objects: 5, done.</span><br><span class="line">Compressing objects: 100% (3/3), done.</span><br><span class="line">Writing objects: 100% (3/3), 306 bytes | 0 bytes/s, done.</span><br><span class="line">Total 3 (delta 0), reused 0 (delta 0)</span><br><span class="line">remote: </span><br><span class="line">remote: To create a merge request for dev, visit:</span><br><span class="line">remote:   http://192.168.60.119/plat-sp/chathall/merge_requests/new?merge_request%5Bsource_branch%5D=dev</span><br><span class="line">remote: </span><br><span class="line">To git@192.168.60.119:plat-sp/chathall.git</span><br><span class="line">   80edf6b..6687039  dev -&gt; dev</span><br><span class="line">Branch dev set up to track remote branch dev from origin.</span><br><span class="line">[Eric@qfedu.com chathall]$</span><br><span class="line">[Eric@qfedu.com chathall]$ git checkout master </span><br><span class="line">Switched to branch &#x27;master&#x27;</span><br><span class="line">[Eric@qfedu.com chathall]$ git branch </span><br><span class="line">  dev</span><br><span class="line">* master</span><br><span class="line">[Eric@qfedu.com chathall]$</span><br></pre></td></tr></table></figure>

<h3 id="15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求"><a href="#15、使用Eric-用户登录gitlab-web，在界面中-创建一个合并请求" class="headerlink" title="15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求"></a>15、使用Eric 用户登录gitlab web，在界面中 创建一个合并请求</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/15.png" alt="1"></p>
<p><strong>提交合并请求：</strong><br><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/16.png" alt="1"></p>
<h3 id="16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支"><a href="#16、使用Tompson用户登录-gitlab-web-，找到“合并请求”-，然后将dev分支合并到master分支" class="headerlink" title="16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支"></a>16、使用Tompson用户登录 gitlab web ，找到“合并请求” ，然后将dev分支合并到master分支</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/17.png" alt="1"></p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/18.png" alt="1"></p>
<h2 id="十、Gitlab-备份与恢复"><a href="#十、Gitlab-备份与恢复" class="headerlink" title="十、Gitlab 备份与恢复"></a>十、Gitlab 备份与恢复</h2><h3 id="1、查看系统版本和软件版本"><a href="#1、查看系统版本和软件版本" class="headerlink" title="1、查看系统版本和软件版本"></a>1、查看系统版本和软件版本</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com gitlab]# cat /etc/redhat-release </span><br><span class="line">CentOS Linux release 7.3.1611 (Core) </span><br><span class="line"></span><br><span class="line">[root@qfedu.com gitlab]# cat /opt/gitlab/embedded/service/gitlab-rails/VERSION</span><br><span class="line">8.15.4</span><br></pre></td></tr></table></figure>

<h3 id="2、数据备份"><a href="#2、数据备份" class="headerlink" title="2、数据备份"></a>2、数据备份</h3><h4 id="1、查看备份相关的配置项"><a href="#1、查看备份相关的配置项" class="headerlink" title="1、查看备份相关的配置项"></a>1、查看备份相关的配置项</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails[&#x27;manage_backup_path&#x27;] = true</span><br><span class="line">gitlab_rails[&#x27;backup_path&#x27;] = &quot;/data/gitlab/backups&quot;</span><br></pre></td></tr></table></figure>

<p>该项定义了默认备份出文件的路径，可以通过修改该配置，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p>
<h4 id="2、执行备份命令进行备份"><a href="#2、执行备份命令进行备份" class="headerlink" title="2、执行备份命令进行备份"></a>2、执行备份命令进行备份</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# /opt/gitlab/bin/gitlab-rake gitlab:backup:create </span><br></pre></td></tr></table></figure>

<h4 id="3、添加到-crontab-中定时执行"><a href="#3、添加到-crontab-中定时执行" class="headerlink" title="3、添加到 crontab 中定时执行"></a>3、添加到 crontab 中定时执行</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# crontab -e</span><br><span class="line">0 2 * * * bash /opt/gitlab/bin/gitlab-rake gitlab:backup:create</span><br></pre></td></tr></table></figure>

<p>可以到/data/gitlab/backups找到备份包，解压查看，会发现备份的还是比较全面的，数据库、repositories、build、upload等分类还是比较清晰的。</p>
<h4 id="4、设置备份保留时长"><a href="#4、设置备份保留时长" class="headerlink" title="4、设置备份保留时长"></a>4、设置备份保留时长</h4><p>防止每天执行备份，有目录被爆满的风险，打开/etc/gitlab/gitlab.rb配置文件，找到如下配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails[&#x27;backup_keep_time&#x27;] = 604800</span><br></pre></td></tr></table></figure>

<p>设置备份保留7天（7<em>3600</em>24=604800），秒为单位，如果想增大或减小，可以直接在该处配置，并通过gitlab-ctl restart 重启服务生效。</p>
<p>备份完成，会在备份目录中生成一个当天日期的tar包。</p>
<h3 id="3、数据恢复"><a href="#3、数据恢复" class="headerlink" title="3、数据恢复"></a>3、数据恢复</h3><h4 id="1、安装部署-gitlab-server"><a href="#1、安装部署-gitlab-server" class="headerlink" title="1、安装部署 gitlab server"></a>1、安装部署 gitlab server</h4><p> 具体步骤参见上面：gitlab server 搭建过程</p>
<h4 id="2、恢复-gitlab"><a href="#2、恢复-gitlab" class="headerlink" title="2、恢复 gitlab"></a>2、恢复 gitlab</h4><h5 id="1、查看备份相关的配置项-1"><a href="#1、查看备份相关的配置项-1" class="headerlink" title="1、查看备份相关的配置项"></a>1、查看备份相关的配置项</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /etc/gitlab/gitlab.rb</span><br><span class="line">gitlab_rails[&#x27;backup_path&#x27;] = &quot;/data/gitlab/backups&quot;</span><br></pre></td></tr></table></figure>

<p>修改该配置，定义了默认备份出文件的路径，并执行 <strong>gitlab-ctl reconfigure 或者 gitlab-ctl  restart</strong> 重启服务生效。</p>
<h5 id="2、恢复前需要先停掉数据连接服务"><a href="#2、恢复前需要先停掉数据连接服务" class="headerlink" title="2、恢复前需要先停掉数据连接服务"></a>2、恢复前需要先停掉数据连接服务</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-ctl stop unicorn</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl stop sidekiq</span><br></pre></td></tr></table></figure>

<ul>
<li>如果是台新搭建的主机，不需要操作，理论上不停这两个服务也可以。停这两个服务是为了保证数据一致性。</li>
</ul>
<h5 id="3、同步备份文件到新服务器"><a href="#3、同步备份文件到新服务器" class="headerlink" title="3、同步备份文件到新服务器"></a>3、同步备份文件到新服务器</h5><p>将老服务器/data/gitlab/backups目录下的备份文件拷贝到新服务器上的/data/gitlab/backups</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com gitlab]# rsync -avz 1530773117_2019_03_05_gitlab_backup.tar 192.168.95.135:/data/gitlab/backups/ </span><br></pre></td></tr></table></figure>

<ul>
<li>注意权限：600权限是无权恢复的。 实验环境可改成了777，生产环境建议修改属主属组</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com backups]# pwd</span><br><span class="line">/data/gitlab/backups</span><br><span class="line">[root@qfedu.com backups]# chown -R git.git 1530773117_2019_03_05_gitlab_backup.tar </span><br><span class="line">[root@qfedu.com backups]# ll</span><br><span class="line">total 17328900</span><br><span class="line">-rwxrwxrwx 1 git git 17744793600 Jul  5 14:47 1530773117_2018_07_05_gitlab_backup.tar</span><br></pre></td></tr></table></figure>

<h5 id="4、执行命令进行恢复"><a href="#4、执行命令进行恢复" class="headerlink" title="4、执行命令进行恢复"></a>4、执行命令进行恢复</h5><p>后面再输入两次 yes 就完成恢复了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-rake gitlab:backup:restore BACKUP=1530773117_2018_07_05_gitlab_backup.tar</span><br><span class="line">注意：backups 目录下保留一个备份文件可直接执行</span><br></pre></td></tr></table></figure>

<h5 id="5、恢复完成启动服务"><a href="#5、恢复完成启动服务" class="headerlink" title="5、恢复完成启动服务"></a>5、恢复完成启动服务</h5><p>恢复完成后，启动刚刚的两个服务，或者重启所有服务，再打开浏览器进行访问，发现数据和之前的一致：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# gitlab-ctl start unicorn</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl start sidekiq</span><br><span class="line">或</span><br><span class="line">[root@qfedu.com ~]# gitlab-ctl restart</span><br></pre></td></tr></table></figure>

<p><strong>注意：通过备份文件恢复gitlab必须保证两台主机的gitlab版本一致，否则会提示版本不匹配</strong></p>
<h2 id="十一、利用Gitlab管理k8s集群"><a href="#十一、利用Gitlab管理k8s集群" class="headerlink" title="十一、利用Gitlab管理k8s集群"></a>十一、利用Gitlab管理k8s集群</h2><h3 id="1、权限设置"><a href="#1、权限设置" class="headerlink" title="1、权限设置"></a>1、权限设置</h3><p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20200821174547237.png" alt="image-20200821174547237"></p>
<h3 id="2、获取k8s集群API地址"><a href="#2、获取k8s集群API地址" class="headerlink" title="2、获取k8s集群API地址"></a>2、获取k8s集群API地址</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl cluster-info | grep &#x27;Kubernetes master&#x27; | awk &#x27;/http/ &#123;print $NF&#125;&#x27;</span></span><br><span class="line"><span class="string">https://192.168.19.200:6443</span></span><br></pre></td></tr></table></figure>

<h3 id="3、获取k8s集群默认CA证书"><a href="#3、获取k8s集群默认CA证书" class="headerlink" title="3、获取k8s集群默认CA证书"></a>3、获取k8s集群默认CA证书</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get secrets</span><br><span class="line">NAME                  TYPE                                  DATA   AGE</span><br><span class="line">default-token-cvfqx   kubernetes.io&#x2F;service-account-token   3      3d21h</span><br></pre></td></tr></table></figure>

<p>default-token-cvfqx 为上面获取到的secrets的名称，用以下命令查看证书</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# kubectl get secret default-token-cvfqx  -o jsonpath&#x3D;&quot;&#123;[&#39;data&#39;][&#39;ca\.crt&#39;]&#125;&quot; | base64 --decode</span><br><span class="line">-----BEGIN CERTIFICATE-----</span><br><span class="line">MIICyDCCAbCgAwIBAgIBADANBgkqhkiG9w0BAQsFADAVMRMwEQYDVQQDEwprdWJl</span><br><span class="line">cm5ldGVzMB4XDTIwMDgxNzA5MjAwMFoXDTMwMDgxNTA5MjAwMFowFTETMBEGA1UE</span><br><span class="line">AxMKa3ViZXJuZXRlczCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoCggEBANIM</span><br><span class="line">iOGHeolaxkE+kqZtc8kDbGFhwqGxNxg4orbIjrz&#x2F;&#x2F;Z6vrgqo2COn2NjKrVM11bmz</span><br><span class="line">VhHPCruc3snfTLIS+&#x2F;Z6gZqgpw5ruX8OjfH4nhr9npKxdBon3soa10EovPwMz1KW</span><br><span class="line">laqbuLKTbtTm+oCtAKYXUlzqrFGR&#x2F;&#x2F;GW2D3bjl1QGOPbAR0pggdxSpPo6oUgtEQJ</span><br><span class="line">QAsNOJ40qMjevi3fnrNDrMqmcNKlSlkw8+Gf4TqM1EfAERRHiEcb&#x2F;W3hOGWV0gdm</span><br><span class="line">vaq7CE&#x2F;ENeD1O11NE76BMmk5WO0u6ot4OmP35TTlx8K0N&#x2F;WPyq76RlH7somiIb8S</span><br><span class="line">1NpAzg+9K0vv1QmILScCAwEAAaMjMCEwDgYDVR0PAQH&#x2F;BAQDAgKkMA8GA1UdEwEB</span><br><span class="line">&#x2F;wQFMAMBAf8wDQYJKoZIhvcNAQELBQADggEBAEVgIlTFDoFhb3KA0RMVjckgsP3O</span><br><span class="line">OB7vTEws6w9ZDGJsNlbbCa15f8q3VmERSkfjAhfG4I9gb4KI0CM5Xt3JhU76GWsO</span><br><span class="line">ZXHDfK7AzDGpLPUxlygkK7c7XCES&#x2F;GEJe5agBxQyCo2pAvcj&#x2F;nb+JIBeSh8JcG05</span><br><span class="line">pzPhL11it9hDqmS5k92+63xGs&#x2F;SDEzXEbBVMnyZWiv+AOHlO1&#x2F;IFofUD3VHcSRMY</span><br><span class="line">wH5j6Irc0p0XTnFg+GHBpqjxwMWxP6IxdVrsOWUALM5oOJYn4aJQy5kSpJFkwNW8</span><br><span class="line">xDvVgtOWq5P9fVfnE4Am0LI&#x2F;DevzYtcr3O9hUmCfEOnF0hC0n4ghYOPqiB4&#x3D;</span><br><span class="line">-----END CERTIFICATE-----</span><br></pre></td></tr></table></figure>

<h3 id="4、设置rbac"><a href="#4、设置rbac" class="headerlink" title="4、设置rbac"></a>4、设置rbac</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@master ~]# vim gitlab-admin-service-account.yaml</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io&#x2F;v1beta1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: gitlab-admin</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: gitlab-admin</span><br><span class="line">  namespace: kube-system</span><br><span class="line"></span><br><span class="line">[root@master ~]# kubectl apply -f gitlab-admin-service-account.yaml</span><br><span class="line">serviceaccount&#x2F;gitlab-admin created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io&#x2F;gitlab-admin created</span><br></pre></td></tr></table></figure>

<h3 id="5、获取gitlab-admin的token"><a href="#5、获取gitlab-admin的token" class="headerlink" title="5、获取gitlab-admin的token"></a>5、获取gitlab-admin的token</h3><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line">[<span class="string">root@master</span> <span class="string">~</span>]<span class="comment"># kubectl -n kube-system describe secret $(kubectl -n kube-system get secret | grep gitlab-admin | awk &#x27;&#123;print $1&#125;&#x27;)</span></span><br><span class="line"><span class="attr">Name:</span>         <span class="string">gitlab-admin-token-pmb2h</span></span><br><span class="line"><span class="attr">Namespace:</span>    <span class="string">kube-system</span></span><br><span class="line"><span class="attr">Labels:</span>       <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Annotations:  kubernetes.io/service-account.name:</span> <span class="string">gitlab-admin</span></span><br><span class="line">              <span class="attr">kubernetes.io/service-account.uid:</span> <span class="string">bc9e1f94-088d-41f4-8e18-f31f1e9a9369</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Type:</span>  <span class="string">kubernetes.io/service-account-token</span></span><br><span class="line"></span><br><span class="line"><span class="string">Data</span></span><br><span class="line"><span class="string">====</span></span><br><span class="line"><span class="attr">ca.crt:</span>     <span class="number">1025 </span><span class="string">bytes</span></span><br><span class="line"><span class="attr">namespace:</span>  <span class="number">11</span> <span class="string">bytes</span></span><br><span class="line"><span class="attr">token:</span>      <span class="string">eyJhbGciOiJSUzI1NiIsImtpZCI6InluNWZyY3V5T1BjNmFFQlpmRVBmOGFOenRmVkx1U0dCRDFhT0s5dEtGeXMifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlLXN5c3RlbSIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJnaXRsYWItYWRtaW4tdG9rZW4tcG1iMmgiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC5uYW1lIjoiZ2l0bGFiLWFkbWluIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiYmM5ZTFmOTQtMDg4ZC00MWY0LThlMTgtZjMxZjFlOWE5MzY5Iiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50Omt1YmUtc3lzdGVtOmdpdGxhYi1hZG1pbiJ9.HGNf2_q_NS7ASk2ID6Y658PMpDIruFLr70VGk9I_dAP-rYt81FarjQhIQPn554SrtmiTp-iQ_j7slX_YRsGHlpo74VrBM2SirDToXobuSpe77v6MFx6Ol2UsUrxY0ulm_DAjOhZ16jlohPWlhkP0083KBfywwdpyF2oVdALQnT4sI1aDxgUHs-Pmg6D0NbdN0Ipb--s-Z59QKGr1XH4Pp0Qb9kze6KCJSWOk8-4pwtpQcT7K2MA1ucyEJB283D5ChQSddo9q7pBkEwq94TLy-ZbAhHgO89OqVIjY-3H-rb5Kd3meGrtGJZJscx7xnn6_DEvbBwp8DmCoM4vfFLUUow</span></span><br></pre></td></tr></table></figure>

<p>6、添加k8s集群</p>
<p><img src="/2021/08/01/%E7%AC%AC1%E5%A4%A9-%E5%88%86%E5%B8%83%E5%BC%8F%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F/image-20200821180353378.png" alt="image-20200821180353378"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
  <entry>
    <title>Jenkins详解</title>
    <url>/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<h1 id="第3天-Jenkins详解"><a href="#第3天-Jenkins详解" class="headerlink" title="第3天-Jenkins详解"></a>第3天-Jenkins详解</h1><h2 id="一、Jenkins介绍"><a href="#一、Jenkins介绍" class="headerlink" title="一、Jenkins介绍"></a>一、Jenkins介绍</h2><p><strong>简单历史</strong></p>
<p>​                                                   <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201191826104-357945560.png" alt="img"></p>
<p>Jenkins的前身是Hudson，采用JAVA编写的持续集成开源工具。Hudson由Sun公司在2004年启动，第一个版本于2005年在java.net发布。2007年开始Hudson逐渐取代CruiseControl和其他的开源构建工具的江湖地位。在2008年的JavaOne大会上在开发者解决方案中获得杜克选择大奖（Duke’s Choice Award）。</p>
<p>在2010年11月期间，因为Oracle对Sun的收购带来了Hudson的所有权问题。主要的项目贡献者和Oracle之间，尽管达成了很多协议，但有个关键问题就是商标名称“Hudson”。甲骨文在2010年12月声明拥有该名称并申请商标的权利。  因此，2011年1月11日，有人要求投票将项目名称从“Hudson”改为“Jenkins”。2011年1月29日，该建议得到社区投票的批准，创建了Jenkins项目。</p>
<p>2011年2月1日，甲骨文表示，他们打算继续开发Hudson，并认为Jenkins只是一个分支，而不是重命名。因此，Jenkins和Hudson继续作为两个独立的项目，每个都认为对方是自己的分支。到2013年12月，GitHub上的Jenkins拥有567个项目成员和约1,100个公共仓库，与此相对的Hudson有32个项目成员和17个公共仓库。到现在两者的差异更多，应该说Jenkins已经全面超越了Hudson。此外，大家可能是出于讨厌Oracle的情绪，作为Java开发者天然地应该支持和使用Jenkins。</p>
<p>后面Hudson被Oracle捐给了Eclipse基金会，所以右边这老头有个Eclipse的光环加持。</p>
<p>为什么Jenkins更受大家欢迎。</p>
<p>由开发者主导、面向开发者 </p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/b8434422776e4b4e8d91bfdfc21e47d6.jpeg" alt="img"></p>
<p>首先，曾经是Hudson开发人员中的99%都转向了Jenkins的开发，其中包括最初的创建者川口清子（Kohsuke  Kawaguchi）。他独自写了大部分代码，并且他的经验是Hudson各种高级特性的关键来源。Jenkins的开发社区更活跃。所以对很多人而言，从血统上看Hudson是后娘养的，Jenkins才是亲生的！</p>
<p> 治理和社区 </p>
<p>Jenkins开发社区的管理是很开放的。 有一个独立的董事会，其中包括来自Yahoo!,  CloudBees，Cloudera和Apture等多家公司的长期以来的Hudson开发人员。每次会议后，他们定期举行治理会议并发表意见，征询公众意见。他们还将所有代码都捐赠给公共利益软件组织（SPI），以确保社区持续开放。</p>
<p> 稳定性 </p>
<p>分手后，针对Jenkins的贡献不断持续增加，Jenkins制定了新的长期支持发布线。社区定大约每三个月发布一次稳定版本的补丁。</p>
<p> 插件的平台 </p>
<p>Jenkins支持超过1000个插件。凭借多样而强大的插件Jenkins成了整个开发生命周期中的一个中心点。</p>
<p>到了2017年，两者的发展差异更大了。Jenkins应该说是CI工具中公认的老大，而Hudson不仅不能与Jenkins比，跟其他CI工具比也没什么优势，完全沉沦了。</p>
<p>slant网站对一系列CI工具做了一次对比，其中Jenkins和Hudson的情况如下。</p>
<p> 1、基本面问题 </p>
<table>
<thead>
<tr>
<th>工具</th>
<th>Jenkins</th>
<th>Hudson</th>
</tr>
</thead>
<tbody><tr>
<td>最好的CI工具</td>
<td>1</td>
<td>22</td>
</tr>
<tr>
<td>最好的JAVA CI工具</td>
<td>1</td>
<td>7</td>
</tr>
<tr>
<td>最好的自托管CI工具</td>
<td>3</td>
<td>4</td>
</tr>
</tbody></table>
<p> 2、其他支持 </p>
<table>
<thead>
<tr>
<th>工具</th>
<th>Jenkins</th>
<th>Hudson</th>
</tr>
</thead>
<tbody><tr>
<td>对Window支持最好</td>
<td>1</td>
<td>无排名</td>
</tr>
<tr>
<td>最好的开源CI工具</td>
<td>1</td>
<td>无排名</td>
</tr>
<tr>
<td>对BitBucket的支持</td>
<td>2</td>
<td>无排名</td>
</tr>
<tr>
<td>对移动开发者支持最好的CI</td>
<td>4</td>
<td>无排名</td>
</tr>
</tbody></table>
<p> 3、更多特征 </p>
<table>
<thead>
<tr>
<th>Jenkins</th>
<th>Hudson</th>
</tr>
</thead>
<tbody><tr>
<td>免费且开源</td>
<td>与Jenkins共享了很多代码，安装还是挺简单的</td>
</tr>
<tr>
<td>关键的环境变量可以安全存储</td>
<td></td>
</tr>
<tr>
<td>支持多个SCM，包括SVN, Mercurial, Git。集成了GitHub和Bitbucket</td>
<td></td>
</tr>
<tr>
<td>高度可配置</td>
<td></td>
</tr>
<tr>
<td>资源和教程很多</td>
<td></td>
</tr>
<tr>
<td>安装运行简单</td>
<td></td>
</tr>
<tr>
<td>分布式的构建也能高效运行</td>
<td></td>
</tr>
<tr>
<td>可跨平台部署</td>
<td></td>
</tr>
<tr>
<td>很多高质量的插件</td>
<td></td>
</tr>
<tr>
<td>得奖无数</td>
<td></td>
</tr>
<tr>
<td>庞大的社区</td>
<td></td>
</tr>
</tbody></table>
<h4 id="1、Jenkins-功能"><a href="#1、Jenkins-功能" class="headerlink" title="1、Jenkins 功能"></a>1、Jenkins 功能</h4><ul>
<li>持续的软件版本发布/测试项目。</li>
<li>监控外部调用执行的工作。</li>
</ul>
<h4 id="3、Jenkins-概念"><a href="#3、Jenkins-概念" class="headerlink" title="3、Jenkins 概念"></a>3、Jenkins 概念</h4><p>Jenkins是一个功能强大的应用程序，允许<strong>持续集成和持续交付项目</strong>，无论用的是什么平台。这是一个免费的开源项目，可以处理任何类型的构建或持续集成。集成Jenkins可以用于一些测试和部署技术。Jenkins是一种软件允许持续集成。</p>
<h4 id="4、Jenkins-目的"><a href="#4、Jenkins-目的" class="headerlink" title="4、Jenkins 目的"></a>4、Jenkins 目的</h4><ul>
<li>持续、自动地构建/测试软件项目。</li>
</ul>
<ul>
<li>监控软件开放流程，快速问题定位及处理，提提高开发效率。</li>
</ul>
<h4 id="5、Jenkins-特性"><a href="#5、Jenkins-特性" class="headerlink" title="5、Jenkins 特性"></a>5、Jenkins 特性</h4><ul>
<li>开源的java语言开发持续集成工具，支持CI，CD。</li>
</ul>
<ul>
<li>易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。</li>
</ul>
<ul>
<li>消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生成JUnit/TestNG测试报告。</li>
</ul>
<ul>
<li>分布式构建：支持Jenkins能够让多台计算机一起构建/测试。</li>
</ul>
<ul>
<li>文件识别:Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。</li>
</ul>
<ul>
<li>丰富的插件支持:支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven，docker等。</li>
</ul>
<h4 id="6、产品发布流程"><a href="#6、产品发布流程" class="headerlink" title="6、产品发布流程"></a>6、产品发布流程</h4><p>产品设计成型 -&gt; 开发人员开发代码 -&gt; 测试人员测试功能 -&gt; 运维人员发布上线</p>
<ul>
<li>持续集成（Continuous integration，简称CI）</li>
</ul>
<ul>
<li>持续交付（Continuous delivery）</li>
</ul>
<ul>
<li>持续部署（continuous deployment） </li>
</ul>
<h2 id="二、Jenkins-CI-CD-流程"><a href="#二、Jenkins-CI-CD-流程" class="headerlink" title="二、Jenkins CI/CD 流程"></a>二、Jenkins CI/CD 流程</h2><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1352872-20180728203103959-1827013182.png" alt="img"></p>
<p>说明：这张图稍微更形象一点，上线之前先把代码git到版本仓库，然后通过Jenkins将Java项目通过maven去构建，这是在非容器之前，典型的自动化的一个版本上线流程。那它有哪些问题呢？</p>
<p>如：它的测试环境，预生产环境，测试环境。会存在一定的兼容性问题 （环境之间会有一定的差异） </p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1352872-20180728203917252-1861052346.png" alt="img"></p>
<p>说明：它这里有一个docker harbor 的镜像仓库，通常会把你的环境打包为一个镜像，通过镜像的方式来部署。</p>
<h2 id="三、部署Jenkins"><a href="#三、部署Jenkins" class="headerlink" title="三、部署Jenkins"></a>三、部署Jenkins</h2><table>
<thead>
<tr>
<th>IP</th>
<th>主机名</th>
</tr>
</thead>
<tbody><tr>
<td>172.16.1.2</td>
<td>jenkins</td>
</tr>
<tr>
<td>172.16.1.3</td>
<td>web</td>
</tr>
<tr>
<td>172.16.1.4</td>
<td>git/gitlab</td>
</tr>
</tbody></table>
<h3 id="1、部署GIT"><a href="#1、部署GIT" class="headerlink" title="1、部署GIT"></a>1、部署GIT</h3><p>IP：172.16.1.4，git 服务器进行如下操作</p>
<h4 id="1、安装-git"><a href="#1、安装-git" class="headerlink" title="1、安装 git"></a>1、安装 git</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# yum install -y git</span><br></pre></td></tr></table></figure>

<p>创建git用户并设置密码为123456（为开发人员拉代码时设置的用户）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# useradd git</span><br><span class="line">[root@qfedu.com ~]# passwd git</span><br></pre></td></tr></table></figure>

<h4 id="2、创建仓库"><a href="#2、创建仓库" class="headerlink" title="2、创建仓库"></a>2、创建仓库</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# su - git  #切换到git用户下</span><br><span class="line">[git@qfedu.com ~]$ mkdir -p repos/app.git  #在git用户家目录下创建一个repos目录，repos目录下创建各个项目的目录</span><br><span class="line">[git@qfedu.com ~]$ cd repos/app.git</span><br><span class="line">[git@qfedu.com ~]$ git --bare init #初始化仓库，如果不初始化，这仅仅就只是一个目录</span><br><span class="line"><span class="meta">#</span><span class="bash">查看初始化后仓库信息</span></span><br><span class="line">[git@qfedu.com app.git]$ ls -a</span><br><span class="line">. .. branches config description HEAD hooks info objects refs</span><br></pre></td></tr></table></figure>

<p>配置完仓库后，我们需要找一台机器测试是否能够成功从仓库中拉取代码，或者上传代码到该仓库。</p>
<p>IP：172.16.1.5，web服务器进行测试</p>
<h4 id="3、安装-git-客户端"><a href="#3、安装-git-客户端" class="headerlink" title="3、安装 git 客户端"></a>3、安装 git 客户端</h4><p>拉取代码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# yum install -y git   #首先还是安装git</span><br><span class="line">[root@qfedu.com ~]# mkdir -p test</span><br><span class="line">[root@qfedu.com ~]# cd test</span><br><span class="line">[root@qfedu.com test]# git clone git@172.16.1.4:/home/git/repos/app.git  ##测试clone远端git仓库</span><br><span class="line">[root@qfedu.com test]# ls </span><br><span class="line">app</span><br></pre></td></tr></table></figure>

<h4 id="4、push-测试"><a href="#4、push-测试" class="headerlink" title="4、push 测试"></a>4、push 测试</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com app]# touch index.html</span><br><span class="line">[root@qfedu.com app]# git add .</span><br><span class="line">[root@qfedu.com app]# git commit -m &quot;test&quot; </span><br><span class="line"><span class="meta">#</span><span class="bash">第一次的话会有报错警告，说让配置邮箱和姓名。配置一下即可，或者直接执行给出的命令执行即可。</span></span><br><span class="line">[root@qfedu.com app]# git push origin master #提交到主分支（默认分支）</span><br></pre></td></tr></table></figure>

<p>测试成功！</p>
<h4 id="5、补充：配置免秘钥"><a href="#5、补充：配置免秘钥" class="headerlink" title="5、补充：配置免秘钥"></a>5、补充：配置免秘钥</h4><h5 id="1、172-16-1-5-服务器生成公钥"><a href="#1、172-16-1-5-服务器生成公钥" class="headerlink" title="1、172.16.1.5 服务器生成公钥"></a>1、172.16.1.5 服务器生成公钥</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ssh-keygen</span><br><span class="line">[root@qfedu.com ~]# cat /root/.ssh/id_rsa.pub </span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmmIOOJCRjlcNyM9zQ4yNeSFgJhBYZUTHMJ3D6sy6IgyOQi/LW9IzBF8mVjmc9wBzQBzg9obCJ/2YiGtvgl00v8A6Clamx6XdQpHPbnVcgHznhEhaa5X0TONcyJ0/z9e8wdppafAsrgRYdpRcXfrPC7xlzDIRpjgWG9YEMzrqCDcWAoWLMYvr2GHwhFyJa5OpMNGH5NjaWJbzYlgdP5cwh/QX04xVZ0QKghQsol9HmbRbqJ8Hl8WrgDoy2BPE41XKEwR4drgUGCFXZDH4s9ZodC4zI76TWIyCeKKM0XbTNHRU6Cb6xWb/iFhpsa7m14A5usUH6RfIjzJBr3IcyUkk3 root@qfedu.com</span><br></pre></td></tr></table></figure>

<h5 id="2、172-16-1-4-git-服务器进行配置"><a href="#2、172-16-1-4-git-服务器进行配置" class="headerlink" title="2、172.16.1.4 git 服务器进行配置"></a>2、172.16.1.4 git 服务器进行配置</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[git@qfedu.com ~]$ mkdir -p .ssh</span><br><span class="line">[git@qfedu.com ~]$ chmod 700 .ssh/  # 给予目录700权限</span><br><span class="line">[git@qfedu.com ~]$ vi .ssh/authorized_keys  # 写入172.16.1.5服务器的公钥</span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDmmIOOJCRjlcNyM9zQ4yNeSFgJhBYZUTHMJ3D6sy6IgyOQi/LW9IzBF8mVjmc9wBzQBzg9obCJ/2Yi</span><br><span class="line">Gtvgl00v8A6Clamx6XdQpHPbnVcgHznhEhaa5X0TONcyJ0/z9e8wdppafAsrgRYdpRcXfrPC7xlzDIRpjgWG9YEMzrqCDcWAoWLMYvr2GHwhFyJa5OpM</span><br><span class="line">NGH5NjaWJbzYlgdP5cwh/QX04xVZ0QKghQsol9HmbRbqJ8Hl8WrgDoy2BPE41XKEwR4drgUGCFXZDH4s9ZodC4zI76TWIyCeKKM0XbTNHRU6Cb6xWb/i</span><br><span class="line">Fhpsa7m14A5usUH6RfIjzJBr3IcyUkk3 root@qfedu.com</span><br><span class="line">[git@qfedu.com ~]$ chmod 600 .ssh/authorized_keys  # 给予文件600权限</span><br></pre></td></tr></table></figure>

<h3 id="2、Jenkins-安装配置"><a href="#2、Jenkins-安装配置" class="headerlink" title="2、Jenkins 安装配置"></a>2、Jenkins 安装配置</h3><h4 id="1、jenkins-安装"><a href="#1、jenkins-安装" class="headerlink" title="1、jenkins 安装"></a>1、jenkins 安装</h4><p>官网： <a href="https://jenkins.io/">https://jenkins.io</a></p>
<p>插件：<a href="http://updates.jenkins-ci.org/download/plugins/">http://updates.jenkins-ci.org/download/plugins/</a></p>
<h5 id="1、安装-java-环境（jenkins-依赖-java-环境）"><a href="#1、安装-java-环境（jenkins-依赖-java-环境）" class="headerlink" title="1、安装 java 环境（jenkins 依赖 java 环境）"></a>1、安装 java 环境（jenkins 依赖 java 环境）</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com tools]# ls                 # 查看解压包</span><br><span class="line">jdk-8u45-linux-x64.tar.gz</span><br><span class="line">[root@qfedu.com tools]# tar zxf jdk-8u45-linux-x64.tar.gz    # 解压</span><br><span class="line">[root@qfedu.com tools]# mv jdk1.8.0_45/ /usr/local/jdk1.8    # 移动至指定目录</span><br><span class="line">[root@qfedu.com tools]# vim /etc/profile    # 配置环境变量</span><br><span class="line">JAVA_HOME=/usr/local/java</span><br><span class="line">export MAVEN_HOME=/usr/local/maven</span><br><span class="line">export JRE_HOME=/usr/local/java/jre</span><br><span class="line">export CLASSPATH=.:$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$MAVEN_HOME/bin:$PATH</span><br><span class="line">[root@qfedu.com tools]# source /etc/profile  # 配置生效</span><br><span class="line">[root@qfedu.com tools]# java -version        # 查看java版本</span><br><span class="line">java version &quot;1.8.0_45&quot;</span><br><span class="line">Java(TM) SE Runtime Environment (build 1.8.0_45-b14)</span><br><span class="line">Java HotSpot(TM) 64-Bit Server VM (build 25.45-b02, mixed mode)</span><br></pre></td></tr></table></figure>

<h5 id="2、yum-安装-jenkins"><a href="#2、yum-安装-jenkins" class="headerlink" title="2、yum 安装 jenkins"></a>2、yum 安装 jenkins</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# wget -O /etc/yum.repos.d/jenkins.repo https://pkg.jenkins.io/redhat-stable/jenkins.repo</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入jenkins源</span></span><br><span class="line">[root@qfedu.com ~]# rpm --import https://pkg.jenkins.io/redhat-stable/jenkins.io.key</span><br><span class="line"><span class="meta">#</span><span class="bash"> 导入jenkins官方证书</span></span><br><span class="line">[root@qfedu.com ~]# yum install -y jenkins</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装jenkins（安装的是最新的LTS版本）</span></span><br><span class="line"></span><br><span class="line">[root@qfedu.com ~]# rpm -ql jenkins   # 查看yum都安装了哪些东西</span><br><span class="line">/etc/init.d/jenkins</span><br><span class="line">/etc/logrotate.d/jenkins</span><br><span class="line">/etc/sysconfig/jenkins</span><br><span class="line">/usr/lib/jenkins</span><br><span class="line">/usr/lib/jenkins/jenkins.war</span><br><span class="line">/usr/sbin/rcjenkins</span><br><span class="line">/var/cache/jenkins</span><br><span class="line">/var/lib/jenkins</span><br><span class="line">/var/log/jenkins</span><br></pre></td></tr></table></figure>

<h4 id="2、配置文件"><a href="#2、配置文件" class="headerlink" title="2、配置文件"></a>2、配置文件</h4><h5 id="1、查询-yum-下载-Jenkins-安装的文件"><a href="#1、查询-yum-下载-Jenkins-安装的文件" class="headerlink" title="1、查询 yum 下载 Jenkins 安装的文件"></a>1、查询 yum 下载 Jenkins 安装的文件</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# rpm -ql jenkins</span><br><span class="line">/etc/init.d/jenkins         # 启动文件</span><br><span class="line">/etc/logrotate.d/jenkins    # 日志分割配置文件</span><br><span class="line">/etc/sysconfig/jenkins      # jenkins主配置文件</span><br><span class="line">/usr/lib/jenkins            # 存放war包目录</span><br><span class="line">/usr/lib/jenkins/jenkins.war   # war 包 </span><br><span class="line">/usr/sbin/rcjenkins         # 命令</span><br><span class="line">/var/cache/jenkins          # war包解压目录 jenkins网页代码目录</span><br><span class="line">/var/lib/jenkins            # jenkins 工作目录</span><br><span class="line">/var/log/jenkins            # 日志</span><br></pre></td></tr></table></figure>

<h5 id="2、修改配置文件"><a href="#2、修改配置文件" class="headerlink" title="2、修改配置文件"></a>2、修改配置文件</h5><p><strong>配置文件说明</strong>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# grep &quot;^[a-Z]&quot; /etc/sysconfig/jenkins</span><br><span class="line">JENKINS_HOME=&quot;/var/lib/jenkins&quot;    # jenkins工作目录</span><br><span class="line">JENKINS_JAVA_CMD=&quot;&quot;</span><br><span class="line">JENKINS_USER=&quot;jenkins&quot;             # jenkinx启动用户</span><br><span class="line">JENKINS_JAVA_OPTIONS=&quot;-Djava.awt.headless=true&quot;</span><br><span class="line">JENKINS_PORT=&quot;8080&quot;                # 端口</span><br><span class="line">JENKINS_LISTEN_ADDRESS=&quot;&quot;</span><br><span class="line">JENKINS_HTTPS_PORT=&quot;&quot;</span><br><span class="line">JENKINS_HTTPS_KEYSTORE=&quot;&quot;</span><br><span class="line">JENKINS_HTTPS_KEYSTORE_PASSWORD=&quot;&quot;</span><br><span class="line">JENKINS_HTTPS_LISTEN_ADDRESS=&quot;&quot;</span><br><span class="line">JENKINS_DEBUG_LEVEL=&quot;5&quot;</span><br><span class="line">JENKINS_ENABLE_ACCESS_LOG=&quot;no&quot;</span><br><span class="line">JENKINS_HANDLER_MAX=&quot;100&quot;          # 最大连接</span><br><span class="line">JENKINS_HANDLER_IDLE=&quot;20&quot;</span><br><span class="line">JENKINS_ARGS=&quot;&quot;</span><br></pre></td></tr></table></figure>

<h5 id="3、启动-jenkins"><a href="#3、启动-jenkins" class="headerlink" title="3、启动 jenkins"></a>3、启动 jenkins</h5><ul>
<li>首先需要修改一下启动脚本，文件在/etc/init.d/jenkins</li>
</ul>
<ul>
<li>因为jenkins的启动脚本默认java路径为：/usr/bin/java</li>
</ul>
<ul>
<li>但是我们新安装的java路径并不是在这个，所以我们需要新添加路径。如图下所示：</li>
</ul>
<ul>
<li>新路径地址为：/usr/local/jdk1.8/bin/java</li>
</ul>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831163720584-519105319.png" alt="img"></p>
<p>接下来启动：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# systemctl start jenkins</span><br></pre></td></tr></table></figure>

<h5 id="3、验证安装"><a href="#3、验证安装" class="headerlink" title="3、验证安装"></a>3、验证安装</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ps -ef|grep jenkins</span><br><span class="line">jenkins   16037      1  1 16:20 ?        00:00:13 /usr/local/jdk1.8/bin/java -Dcom.sun.akuma.Daemon=daemonized -Djava.awt.headless=true -DJENKINS_HOME=/var/lib/jenkins -jar /usr/lib/jenkins/jenkins.war --logfile=/var/log/jenkins/jenkins.log --webroot=/var/cache/jenkins/war --daemon --httpPort=8080 --debug=5 --handlerCountMax=100 --handlerCountMaxIdle=20</span><br><span class="line">root      16107   1215  0 16:39 pts/1    00:00:00 grep --color=auto jenkins</span><br><span class="line">[root@qfedu.com ~]# netstat -lnutp|grep jenkins</span><br><span class="line">[root@qfedu.com ~]# netstat -lnutp|grep 8080</span><br><span class="line">tcp6       0      0 :::8080                 :::*                    LISTEN      16037/java</span><br></pre></td></tr></table></figure>

<h4 id="3、jenkins配置（web页面）"><a href="#3、jenkins配置（web页面）" class="headerlink" title="3、jenkins配置（web页面）"></a>3、jenkins配置（web页面）</h4><h5 id="1、管理员密码获取"><a href="#1、管理员密码获取" class="headerlink" title="1、管理员密码获取"></a>1、管理员密码获取</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831164228925-1838027306.png" alt="img"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# cat /var/lib/jenkins/secrets/initialAdminPassword</span><br><span class="line">5d3f57bea6e546139fc48ea28f9d5ae5</span><br></pre></td></tr></table></figure>

<h5 id="2、安装插件-（选择在线安装）"><a href="#2、安装插件-（选择在线安装）" class="headerlink" title="2、安装插件 （选择在线安装）"></a>2、安装插件 （选择在线安装）</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831164323740-27120837.png" alt="img"></p>
<p>出现离线安装解决方法：</p>
<h6 id="1、修改-var-lib-jenkins-updates-default-json"><a href="#1、修改-var-lib-jenkins-updates-default-json" class="headerlink" title="1、修改 /var/lib/jenkins/updates/default.json"></a>1、修改 /var/lib/jenkins/updates/default.json</h6><p>jenkins 在下载插件之前会先检查网络连接，其会读取这个文件中的网址。默认是访问谷歌，肯定监测失败，所以将图下的google改为<a href="http://www.baidu.com/">www.baidu.com</a>即可，更改完重启服务。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831164343689-623098101.png" alt="img"></p>
<h6 id="2、-修改-var-lib-jenkins-hudson-model-UpdateCenter-xml"><a href="#2、-修改-var-lib-jenkins-hudson-model-UpdateCenter-xml" class="headerlink" title="2、 修改/var/lib/jenkins/hudson.model.UpdateCenter.xml"></a>2、 修改/var/lib/jenkins/hudson.model.UpdateCenter.xml</h6><p>该文件为jenkins下载插件的源地址，改地址默认jenkins默认为：<a href="https://updates.jenkins.io/update-center.json%EF%BC%8C%E5%B0%B1%E6%98%AF%E5%9B%A0%E4%B8%BAhttps%E7%9A%84%E9%97%AE%E9%A2%98%EF%BC%8C%E6%AD%A4%E5%A4%84%E6%88%91%E4%BB%AC%E5%B0%86%E5%85%B6%E6%94%B9%E4%B8%BAhttp%E5%8D%B3%E5%8F%AF%EF%BC%8C%E4%B9%8B%E5%90%8E%E9%87%8D%E5%90%AFjenkins%E6%9C%8D%E5%8A%A1%E5%8D%B3%E5%8F%AF%E3%80%82">https://updates.jenkins.io/update-center.json，就是因为https的问题，此处我们将其改为http即可，之后重启jenkins服务即可。</a></p>
<p>其他国内备用地址（也可以选择使用）：</p>
<p><a href="https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json">https://mirrors.tuna.tsinghua.edu.cn/jenkins/updates/update-center.json</a></p>
<p><a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p>
<p>在修复完之后，我们发现离线问题已经解决</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831164430177-1121878419.png" alt="img"></p>
<p>选择安装推荐的插件：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831164621224-1822838670.png" alt="img"></p>
<h5 id="3、创建第一个管理员用户"><a href="#3、创建第一个管理员用户" class="headerlink" title="3、创建第一个管理员用户"></a>3、创建第一个管理员用户</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200511143418502.png" alt="image-20200511143418502"></p>
<h5 id="4、url-配置"><a href="#4、url-配置" class="headerlink" title="4、url 配置"></a>4、url 配置</h5><p>之前版本没有这个选项，这里默认即可:</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200511144405337.png" alt="image-20200511144405337"></p>
<h5 id="5、安装完成"><a href="#5、安装完成" class="headerlink" title="5、安装完成"></a>5、安装完成</h5><p>出现如下页面时，表示安装完成</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200511144436540.png" alt="image-20200511144436540"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200511144551020.png" alt="image-20200511144551020"></p>
<p>这里面有很多配置，下面我们只介绍我们要用到的要修改的配置（之后案例会用到的）。我们不需要全部都配置，等需要什么的时候再去研究一下即可。</p>
<h5 id="6、配置-jdk、git、maven"><a href="#6、配置-jdk、git、maven" class="headerlink" title="6、配置 jdk、git、maven"></a>6、配置 jdk、git、maven</h5><p>系统管理-&gt;全局工具配置</p>
<p>jdk：可以自动安装，但是我们已经安装了，这里写入我们jdk的路径即可</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165049786-1605588288.png" alt="img"></p>
<p>git:</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165130860-316104310.png" alt="img"></p>
<p>maven：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165146493-1904811526.png" alt="img"></p>
<h5 id="7、jenkins-下载插件失败处理办法"><a href="#7、jenkins-下载插件失败处理办法" class="headerlink" title="7、jenkins 下载插件失败处理办法"></a>7、jenkins 下载插件失败处理办法</h5><p>jenkins 下载插件失败,提示：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java.io.IOException: Downloaded file /app/jenkins_home/plugins/jacoco.jpi.tmp does not match expected SHA-1, expected &#x27;CtK02wHdFOxTutqhUQzmue6uvpg=&#x27;, actual &#x27;YGO05utKyaaFzpGCgCE95GS0WsU=&#x27;</span><br><span class="line">	at hudson.model.UpdateCenter.verifyChecksums(UpdateCenter.java:1783)</span><br><span class="line">	at hudson.model.UpdateCenter.access$1100(UpdateCenter.java:147)</span><br><span class="line">	at hudson.model.UpdateCenter$InstallationJob.replace(UpdateCenter.java:1934)</span><br><span class="line">	at hudson.model.UpdateCenter$UpdateCenterConfiguration.install(UpdateCenter.java:1178)</span><br><span class="line">	at hudson.model.UpdateCenter$DownloadJob._run(UpdateCenter.java:1653)</span><br><span class="line">	at hudson.model.UpdateCenter$InstallationJob._run(UpdateCenter.java:1848)</span><br><span class="line">	at hudson.model.UpdateCenter$DownloadJob.run(UpdateCenter.java:1624)</span><br><span class="line">	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)</span><br><span class="line">	at java.util.concurrent.FutureTask.run(FutureTask.java:266)</span><br><span class="line">	at hudson.remoting.AtmostOneThreadExecutor$Worker.run(AtmostOneThreadExecutor.java:110)</span><br><span class="line">	at java.lang.Thread.run(Thread.java:745)</span><br></pre></td></tr></table></figure>

<p>中国源的问题。需要换个源就可，换源方法：</p>
<p>jenkins-&gt;系统管理-&gt;管理插件-&gt;高级<br>选择升级站点</p>
<p>把：<a href="http://updates.jenkins-ci.org/update-center.json">http://updates.jenkins-ci.org/update-center.json</a></p>
<p>换成：<a href="http://mirror.esuni.jp/jenkins/updates/update-center.json">http://mirror.esuni.jp/jenkins/updates/update-center.json</a></p>
<p>镜像地址查询：</p>
<p><a href="http://mirrors.jenkins-ci.org/status.html">http://mirrors.jenkins-ci.org/status.html</a> </p>
<h2 id="四、使用Jenkins"><a href="#四、使用Jenkins" class="headerlink" title="四、使用Jenkins"></a>四、使用Jenkins</h2><h3 id="1、Jenkins-用户权限管理"><a href="#1、Jenkins-用户权限管理" class="headerlink" title="1、Jenkins 用户权限管理"></a>1、Jenkins 用户权限管理</h3><h4 id="1、-用户管理背景"><a href="#1、-用户管理背景" class="headerlink" title="1、 用户管理背景"></a>1、 用户管理背景</h4><p>针对开发、运维、测试针对不同角色进行不同权限划分，</p>
<p>基于插件： Role-based Authorization Strategy ，Authorize Project 来实现。</p>
<h4 id="2、-安装用户管理插件"><a href="#2、-安装用户管理插件" class="headerlink" title="2、 安装用户管理插件"></a>2、 安装用户管理插件</h4><p>安装该插件：</p>
<p>系统管理-&gt;管理插件-可选插件-&gt;搜索该插件选中直接安装即可。</p>
<p> <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165508676-16362769.png" alt="img"></p>
<h4 id="3、-开启该插件功能"><a href="#3、-开启该插件功能" class="headerlink" title="3、 开启该插件功能"></a>3、 开启该插件功能</h4><p>系统管理-&gt;全局安全设置-授权策略-&gt;选中该插件功能即可-&gt;保存</p>
<p> <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165538054-922830046.png" alt="img"></p>
<h4 id="4、-验证用户管理"><a href="#4、-验证用户管理" class="headerlink" title="4、 验证用户管理"></a>4、 验证用户管理</h4><p>关闭用户管理功能来进行实践测试</p>
<h5 id="1、策略改回原来的（全局安全配置）"><a href="#1、策略改回原来的（全局安全配置）" class="headerlink" title="1、策略改回原来的（全局安全配置）"></a>1、策略改回原来的（全局安全配置）</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165635226-1917360681.png" alt="img"></p>
<h5 id="2、开启允许用户注册（全局安全配置）"><a href="#2、开启允许用户注册（全局安全配置）" class="headerlink" title="2、开启允许用户注册（全局安全配置）"></a>2、开启允许用户注册（全局安全配置）</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165700914-329576958.png" alt="img"></p>
<h5 id="3、注册一个新用户"><a href="#3、注册一个新用户" class="headerlink" title="3、注册一个新用户"></a>3、注册一个新用户</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165719453-1979689954.png" alt="img"></p>
<h5 id="4、登录之后，其默认就是管理员用户，可以进行任何操作"><a href="#4、登录之后，其默认就是管理员用户，可以进行任何操作" class="headerlink" title="4、登录之后，其默认就是管理员用户，可以进行任何操作"></a>4、登录之后，其默认就是管理员用户，可以进行任何操作</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165742247-244014865.png" alt="img"></p>
<h5 id="5、开启-Role-Based-Strategy"><a href="#5、开启-Role-Based-Strategy" class="headerlink" title="5、开启 Role-Based Strategy"></a>5、开启 Role-Based Strategy</h5><h5 id="6、重新登录新创建-test1-用户，显示已经没有任何权限了"><a href="#6、重新登录新创建-test1-用户，显示已经没有任何权限了" class="headerlink" title="6、重新登录新创建 test1 用户，显示已经没有任何权限了"></a>6、重新登录新创建 test1 用户，显示已经没有任何权限了</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165853876-101591569.png" alt="img"></p>
<h4 id="5、-权限划分"><a href="#5、-权限划分" class="headerlink" title="5、 权限划分"></a>5、 权限划分</h4><p>安装 Role-Based Strategy 插件后，<strong>系统管理</strong> 中多了如图下所示的一个功能，用户权限的划分就是靠他来做的。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165923312-691685234.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831165930038-36894234.png" alt="img"></p>
<h5 id="1、Manage-Roles（管理角色）"><a href="#1、Manage-Roles（管理角色）" class="headerlink" title="1、Manage Roles（管理角色）"></a>1、Manage Roles（管理角色）</h5><ul>
<li>Manage Roles：管理角色，相当于针对角色赋予不同权限，然后在将该角色分配给用户。角色就相当于一个组。其里面又有Global roles（全局）、Project roles（项目）、Slave roles（），来进行不同划分。</li>
</ul>
<p>默认如图下所示：</p>
<p> <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831170007658-2106612170.png" alt="img"></p>
<h6 id="1、Global-roles"><a href="#1、Global-roles" class="headerlink" title="1、Global roles"></a>1、Global roles</h6><p>默认是有一个admin用户的，是所有权限都有的，所有权限都是勾选了的。</p>
<p>接下来我们来添加一个角色：user</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831170026530-949346396.png" alt="img"></p>
<p>给其一个读的权限。</p>
<h6 id="2、Project-roles"><a href="#2、Project-roles" class="headerlink" title="2、Project roles"></a>2、Project roles</h6><ul>
<li>roles to add：表示项目角色</li>
</ul>
<ul>
<li>Pattern：是用来做正则匹配的（匹配的内容是Job(项目名)），比如说根据正则匹配到的项目项目角色就都有权限；</li>
</ul>
<p>接下来新建一个 ItemA 项目角色，改项目角色一般给其构建、取消、读取、读取空间权限，一般配置这4个即可</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831170046126-1725883669.png" alt="img"></p>
<p>还可以在新建一个 ItemB 项目角色：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831170101681-1099638023.png" alt="img"></p>
<ul>
<li>Slave roles（奴隶角色）：节点相关的权限</li>
</ul>
<ul>
<li>roles to add：表示项目角色</li>
</ul>
<ul>
<li>Pattern：是用来做正则匹配的（匹配的内容是节点(slavej节点）），比如说根据正则匹配到的项目项目角色就都有权限；</li>
</ul>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/360%E6%88%AA%E5%9B%BE168212206791118.png" alt="360截图168212206791118"></p>
<h5 id="2、Assigin-roles（分配角色）"><a href="#2、Assigin-roles（分配角色）" class="headerlink" title="2、Assigin roles（分配角色）"></a>2、Assigin roles（分配角色）</h5><h6 id="1、给予test1用户分配-user-角色"><a href="#1、给予test1用户分配-user-角色" class="headerlink" title="1、给予test1用户分配 user 角色"></a>1、给予test1用户分配 user 角色</h6><p>这样其就有 manage roles 中刚才创建的user角色的权限了。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831170141093-1106115356.png" alt="img"></p>
<p>此时再去看 test1用户，已有查看的权限了</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171312583-2109653620.png" alt="img"></p>
<h6 id="2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）"><a href="#2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）" class="headerlink" title="2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）"></a>2、针对指定用户分配项目角色（一般最常用的就是针对不同用户进行项目角色分配）</h6><p>比如将test1用户分配有 ItemA 项目角色，这样其就可以有刚才我们创建的 ItemA 项目角色正则匹配到的项目的权限了。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171359961-22018225.png" alt="img"></p>
<p>test2 也为其分配一个 ItemB 项目角色</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171420831-1902633716.png" alt="img"></p>
<p>此时可以在 test1 用户这里看到 ItemA 项目角色所匹配到的项目 A-web1</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171437298-1904913991.png" alt="img"></p>
<p>新建一个B-web1项目，同理 test2 用户这里看到I temB 项目角色所匹配到的项目B-web1</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171454823-363550384.png" alt="img"></p>
<p>为了方便项目管理，可以对不同项目进行分类（借助视图）：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171509279-1030579839.png" alt="img"></p>
<p>分类完如图下所示：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171525036-576038453.png" alt="img"></p>
<h3 id="2、Jenkins-参数化构建"><a href="#2、Jenkins-参数化构建" class="headerlink" title="2、Jenkins 参数化构建"></a>2、Jenkins 参数化构建</h3><h4 id="1、-参数化构建背景"><a href="#1、-参数化构建背景" class="headerlink" title="1、 参数化构建背景"></a>1、 参数化构建背景</h4><p> 如果只是简单的构建，jenkins自己默认的插件可以做，但是如果我们想要在构建过程中有更多功能，比如说：选择性构建、传参、项目指定变量等等其他功能，基础的参数化构建可以实现一些简单功能，但是要想使用更多功能这时候我们就需要借助参数化构建来实现交互的功能。此处我们来借助以下插件来进行实现：</p>
<ul>
<li>Extended Choice Parameter（更丰富的参数化构建插件）</li>
</ul>
<ul>
<li>Git Parameter</li>
</ul>
<h4 id="2、安装插件"><a href="#2、安装插件" class="headerlink" title="2、安装插件"></a>2、安装插件</h4><p>首先还是安装该插件，去管理插件里面进行安装 Extended Choice Parameter</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171721299-2027054343.png" alt="img"></p>
<h5 id="1、项目配置"><a href="#1、项目配置" class="headerlink" title="1、项目配置"></a>1、项目配置</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171807151-657567536.png" alt="img"></p>
<h5 id="2、选择安装过的插件"><a href="#2、选择安装过的插件" class="headerlink" title="2、选择安装过的插件"></a>2、选择安装过的插件</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171825735-1550501382.png" alt="img"></p>
<h5 id="3、进行配置"><a href="#3、进行配置" class="headerlink" title="3、进行配置"></a>3、进行配置</h5><p>​                                                             <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171852747-2039805021.png" alt="img"></p>
<p>这里这个branch 我们就相当于给其当做一个变量，然后来为其进行传参。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171908041-686186905.png" alt="img"></p>
<h5 id="4、构建选择执行shell进行测试"><a href="#4、构建选择执行shell进行测试" class="headerlink" title="4、构建选择执行shell进行测试"></a>4、构建选择执行shell进行测试</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171925310-877234848.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171931759-1794610138.png" alt="img"></p>
<h5 id="5、参数化配置已经生效"><a href="#5、参数化配置已经生效" class="headerlink" title="5、参数化配置已经生效"></a>5、参数化配置已经生效</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831171946619-1779475535.png" alt="img"></p>
<h5 id="6、构建-test02"><a href="#6、构建-test02" class="headerlink" title="6、构建 test02"></a>6、构建 test02</h5><p>可以发现控制台的输出也是成功了的</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172008888-985342835.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200823112054238.png" alt="image-20200823112054238"></p>
<h5 id="7、数据来源选择文件"><a href="#7、数据来源选择文件" class="headerlink" title="7、数据来源选择文件"></a>7、数据来源选择文件</h5><p>在jenkins所在服务器进行如下操作：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /opt/jenkins.property   # 建立一个文件</span><br><span class="line">abc=t1,t2,t3,t4</span><br></pre></td></tr></table></figure>

<p> web 端配置：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172044249-467635589.png" alt="img"></p>
<p>进行测试：</p>
<p>构建前：（可以发现也是生效的）</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172105902-1561453754.png" alt="img"></p>
<p>构建后查看结果：（也是成功的）</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172117350-824962931.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200823112204773.png" alt="image-20200823112204773"></p>
<h4 id="3、Git-插件"><a href="#3、Git-插件" class="headerlink" title="3、Git 插件"></a>3、Git 插件</h4><p>再用 git 时使用该插件是非常方便的。</p>
<h5 id="1、安装插件-Git-Parameter"><a href="#1、安装插件-Git-Parameter" class="headerlink" title="1、安装插件 Git Parameter"></a>1、安装插件 Git Parameter</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172312057-1192977432.png" alt="img"></p>
<h5 id="2、进行配置"><a href="#2、进行配置" class="headerlink" title="2、进行配置"></a>2、进行配置</h5><p>在配置之前我们先来说一个坑，当我们在配置git中写了远端地址后，会有如下报错：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172344503-595645026.png" alt="img"></p>
<p>这是因为 jenkins 我们 yum 装的运行用户是 jenkins 用户，此处是 jenkins 用户去 git 仓库进行拉取，而 jenkins 用户的话默认是 /bin/false 的，不但不能登录，也没有 git 命令权限，所以肯定是失败的。</p>
<p>解决此问题两种办法：</p>
<ul>
<li>更改jenkins用户为root用户；</li>
</ul>
<ul>
<li>更改jenkins用户为正常的普通用户/bin/bash，将其的公钥加入到git服务器的git用户中。</li>
</ul>
<p>此处暂时先用第一种解决办法，更改 jenkins 的运行用户为 root 用户，通过如下方式进行更改：</p>
<ul>
<li>将/etc/sysconfig/jenkins文件由<img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172403790-793357643.png" alt="img">改为<img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180831172419499-231798333.png" alt="img"></li>
</ul>
<ul>
<li>然后再重启即可。</li>
</ul>
<h5 id="3、进行相关配置"><a href="#3、进行相关配置" class="headerlink" title="3、进行相关配置"></a>3、进行相关配置</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174228683-1325675254.png" alt="img"></p>
<h5 id="4、配置-git-仓库"><a href="#4、配置-git-仓库" class="headerlink" title="4、配置 git 仓库"></a>4、配置 git 仓库</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174238241-1229199729.png" alt="img"></p>
<p>凭据这里有两种方式：</p>
<p>第一种：选择无</p>
<ul>
<li>其实就是基于免秘钥的。</li>
</ul>
<p>第二种：用户（其实就是git用户）</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174257903-1112577737.png" alt="img"></p>
<p>当构建时给一个选择列表，这个变量是代表分支。有哪些分支传递给这个变量。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174314569-1455405236.png" alt="img"></p>
<h5 id="5、进行构建"><a href="#5、进行构建" class="headerlink" title="5、进行构建"></a>5、进行构建</h5><h6 id="1、列表中已经有了可选的分支"><a href="#1、列表中已经有了可选的分支" class="headerlink" title="1、列表中已经有了可选的分支"></a>1、列表中已经有了可选的分支</h6><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174352937-817873860.png" alt="img"></p>
<h6 id="2、构建成功"><a href="#2、构建成功" class="headerlink" title="2、构建成功"></a>2、构建成功</h6><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174410958-2125207362.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/image-20200823112303658.png" alt="image-20200823112303658"></p>
<h6 id="3、新建分支增添内容再来验证插件"><a href="#3、新建分支增添内容再来验证插件" class="headerlink" title="3、新建分支增添内容再来验证插件"></a>3、新建分支增添内容再来验证插件</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com app]# git branch </span><br><span class="line">* master</span><br><span class="line">[root@qfedu.com app]# git branch test</span><br><span class="line">[root@qfedu.com app]# git checkout test</span><br><span class="line">Switched to branch &#x27;test&#x27;</span><br><span class="line">[root@qfedu.com app]# git branch</span><br><span class="line">  master</span><br><span class="line">* test</span><br><span class="line">[root@qfedu.com app]# touch a</span><br><span class="line">[root@qfedu.com app]# git add .</span><br><span class="line">[root@qfedu.com app]# git commit -m &quot;a&quot;</span><br><span class="line">[test c286460] a</span><br><span class="line"> 1 file changed, 0 insertions(+), 0 deletions(-)</span><br><span class="line"> create mode 100644 a</span><br><span class="line">[root@qfedu.com app]# git push origin test</span><br><span class="line">Counting objects: 3, done.</span><br><span class="line">Compressing objects: 100% (2/2), done.</span><br><span class="line">Writing objects: 100% (2/2), 231 bytes | 0 bytes/s, done.</span><br><span class="line">Total 2 (delta 0), reused 0 (delta 0)</span><br><span class="line">To git@172.16.1.3:/home/git/repos/app.git</span><br><span class="line"> * [new branch]      test -&gt; test</span><br></pre></td></tr></table></figure>

<h6 id="4、jenkins-构建查看"><a href="#4、jenkins-构建查看" class="headerlink" title="4、jenkins 构建查看"></a>4、jenkins 构建查看</h6><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174449507-511735917.png" alt="img"></p>
<p>可以发现已经有了我们新建的分支。</p>
<p>构建成功！！</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174509176-598896431.png" alt="img"></p>
<h3 id="3、Jenkins-Master-Slave-架构"><a href="#3、Jenkins-Master-Slave-架构" class="headerlink" title="3、Jenkins Master-Slave 架构"></a>3、Jenkins Master-Slave 架构</h3><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174647968-1070498866.png" alt="img"></p>
<ul>
<li>jenkins的Master-slave分布式架构主要是为了解决jenkins单点构建任务多、负载较高、性能不足的场景。</li>
</ul>
<ul>
<li>Master/Slave相当于Server和agent的概念。Master提供web接口让用户来管理job和slave，job可以运行在master本机或者被分配到slave上运行构建。一个master（jenkins服务所在机器）可以关联多个slave用来为不同的job或相同的job的不同配置来服务。</li>
</ul>
<h4 id="1、安装"><a href="#1、安装" class="headerlink" title="1、安装"></a>1、安装</h4><p><strong>前提：slave 所在服务器必须有 java环境</strong></p>
<p>jenkins web 端进行操作：</p>
<p>系统管理-&gt;管理节点-&gt;新建节点</p>
<p>1、进行基础配置</p>
<p>配置选项中的内容是可变的，根据情况来</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174740210-1910187239.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174812065-1298673844.png" alt="img"></p>
<p>注意这里需要配置凭据，也就是配置slave所在服务器用户和密码</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174833717-113155048.png" alt="img"></p>
<p>之后保存，如果无误的话就会直接启动了，如图下所示是有问题的</p>
<p> <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174858307-1689117384.png" alt="img"></p>
<p>通过看输出日志，发现是 jdk 的问题，一般来说，其会判断 slave 所在服务器有没有 jdk，如果有就会进行检测，如下图所示，就是没有检查到（因为jdk是我们自己装的，路径并不是默认的路径）。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905174933937-2072546466.png" alt="img"></p>
<p>没有检查到的话其就会去oracle官网下载，来为 slave 所在服务器进行安装，但是因为中国的原因，被墙了，所以也会下载失败，最终就导致彻底失败了，失败如图下：</p>
<p> <img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175013098-1305201866.png" alt="img"></p>
<p>有两种方法解决：推荐方法1：</p>
<p>方法1：</p>
<p>在配置时高级的选项里指定java路径：如下图所示：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175036117-145610379.png" alt="img"></p>
<p>方法2：</p>
<p>为 java 路径做一个软链接，保证 jenkins 可以检测到 java。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ln -s /usr/local/jdk1.8/bin/java /usr/bin/java</span><br><span class="line">[root@qfedu.com ~]# ll /usr/bin/java </span><br><span class="line">lrwxrwxrwx 1 root root 26 Jul 25 17:33 /usr/bin/java -&gt; /usr/local/jdk1.8/bin/java</span><br></pre></td></tr></table></figure>

<p> 之后在看已经成功了！</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175117966-1877923320.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175129896-1990617523.png" alt="img"></p>
<p>并且也可以在 slave 所在服务器看到：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175143501-1725798918.png" alt="img"></p>
<p>jar 包就是负责接收 master 任务的。</p>
<h4 id="2、配置"><a href="#2、配置" class="headerlink" title="2、配置"></a>2、配置</h4><p>在项目 job 中进行配置：</p>
<p>可通过标签或者名称进行匹配（标签可在安装时配置）</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175239298-1454561108.png" alt="img"></p>
<h4 id="3、构建"><a href="#3、构建" class="headerlink" title="3、构建"></a>3、构建</h4><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175325125-311183582.png" alt="img"></p>
<p>可以发现控制台的日志，其也是 slave 构建的</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175346873-1882059918.png" alt="img"></p>
<p>之后查看构建完的工作目录，也有预想中的文件。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175404104-944359554.png" alt="img"></p>
<p>这样基本上就实现了借助 jenkins 的 slave 去构建 job了。</p>
<p>目前是在 slave 构建也在 slave 上部署，之后我们可以通过脚本，比如借助 rsync、ansible 等部署在其他服务器上。</p>
<h4 id="4、扩展"><a href="#4、扩展" class="headerlink" title="4、扩展"></a>4、扩展</h4><p>可以为slave服务器在配置时候加上标签，这样也会方便我们选择，用法也不单单局限在一台服务器上，可以让多台 slave 去竞选。</p>
<h3 id="4、Jenkins-pipeline"><a href="#4、Jenkins-pipeline" class="headerlink" title="4、Jenkins pipeline"></a>4、Jenkins pipeline</h3><h4 id="1、概览"><a href="#1、概览" class="headerlink" title="1、概览"></a>1、概览</h4><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905175950688-621991737.png" alt="img"></p>
<h4 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h4><p>在对 jenkins 进行初始化安装时，默认已经安装了 jenkins 的相关插件，如下图所示：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180059074-2046998049.png" alt="img"></p>
<h4 id="3、实操"><a href="#3、实操" class="headerlink" title="3、实操"></a>3、实操</h4><h5 id="1、新建任务"><a href="#1、新建任务" class="headerlink" title="1、新建任务"></a>1、新建任务</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180134440-703318370.png" alt="img"></p>
<h5 id="2、编写-pipeline-脚本"><a href="#2、编写-pipeline-脚本" class="headerlink" title="2、编写 pipeline 脚本"></a>2、编写 pipeline 脚本</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180200172-202457638.png" alt="img"></p>
<p>可以借助流水线语法去做。</p>
<p>test 流水线脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node &#123;</span><br><span class="line">   def mvnHome</span><br><span class="line">   stage(&#x27;git checkout&#x27;) &#123; #for display purposes</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;*/master&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &#x27;git@172.16.1.3:/home/git/repos/app.git&#x27;]]])</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;maven Build&#x27;) &#123;</span><br><span class="line">        echo &quot;maven build.........&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;deploy&#x27;) &#123;</span><br><span class="line">        echo &quot;deploy...........&quot;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;test&#x27;) &#123;</span><br><span class="line">        echo &quot;test...........&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="3、构建测试"><a href="#3、构建测试" class="headerlink" title="3、构建测试"></a>3、构建测试</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180243809-1620313434.png" alt="img"></p>
<p>可以去服务器上验证一下（git checkout）刚才拉取下来的代码：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180256704-210794930.png" alt="img"></p>
<p>补充：</p>
<ul>
<li>可以从代码版本管理仓库中读取 pipeline 脚本（相当于将 pipeline 脚本放在仓库中）我们可以选择git。</li>
</ul>
<ul>
<li>首先需要将 pipeline 脚本提交到我们新建的 git仓库中（步骤再此忽略。）</li>
</ul>
<p>jenkins 项目中需要进行如下配置：</p>
<p>其中脚本路径的配置，一定要和版本仓库中的路径相一致。</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180344737-1469717868.png" alt="img"></p>
<p>之后如果要更改步骤，不需要再更改 jenkins 的步骤，直接更改文件即可。</p>
<p>补充：</p>
<p>此外之前的测试一直是在 master上构建的，我们还可以通过在 jenkinsfile 中指定节点在相应节点去构建</p>
<p>具体在 jenkinsfile 的 node 后进行指定：</p>
<p>如下图所示：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180411824-506078483-1581427002304.png" alt="img"></p>
<p>格式为：node (“节点名称”)</p>
<p><strong>具体配置详解请参考</strong> <a href="https://jenkins.io/doc/book/pipeline/">https://jenkins.io/doc/book/pipeline/</a></p>
<h3 id="5、Jenkins-构建邮件状态通知"><a href="#5、Jenkins-构建邮件状态通知" class="headerlink" title="5、Jenkins 构建邮件状态通知"></a>5、Jenkins 构建邮件状态通知</h3><h4 id="1、-前提"><a href="#1、-前提" class="headerlink" title="1、 前提"></a>1、 前提</h4><p>前提：服务器开启邮箱服务</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180750936-201397371-1581427002304.png" alt="img"></p>
<h4 id="2、-基础配置"><a href="#2、-基础配置" class="headerlink" title="2、 基础配置"></a>2、 基础配置</h4><p>需要安装一个插件：</p>
<p>插件： Email Extension Plugin</p>
<p>进行配置：</p>
<p>系统管理-&gt;系统设置-&gt;相关配置如下图：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905180920720-1267268825-1581427002304.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905181032556-219409886-1581427002304.png" alt="img"></p>
<p>可以在此处进行测试发送！检验配置是否正确</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905181105795-859970074-1581427002304.png" alt="img"></p>
<h4 id="3、-配置到项目中"><a href="#3、-配置到项目中" class="headerlink" title="3、 配置到项目中"></a>3、 配置到项目中</h4><p>在项目的配置中选择构建后操作</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905181815334-1545576302-1581427002304.png" alt="img"></p>
<p>选择我们对应的插件</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905181902914-1329981046-1581427002304.png" alt="img"></p>
<p>填写发件人信息</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905181920357-2050627859-1581427002304.png" alt="img"></p>
<p>配置构建成功发送邮件</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905181944795-1066960449-1581427002304.png" alt="img"></p>
<p>控制台也有邮件发送成功输出</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905182332647-1761846010-1581427002304.png" alt="img"></p>
<p>检查实际是否接收到邮件</p>
<h3 id="6、Jenkins-流水线自动化发布PHP项目"><a href="#6、Jenkins-流水线自动化发布PHP项目" class="headerlink" title="6、Jenkins 流水线自动化发布PHP项目"></a>6、Jenkins 流水线自动化发布PHP项目</h3><h4 id="1、前提"><a href="#1、前提" class="headerlink" title="1、前提"></a>1、前提</h4><p><strong>环境为</strong>：lnmp</p>
<p><strong>PHP项目</strong>：wordpress（此处我们下载一个wordpress的源码。将其模拟为我们的代码上传到我们的git仓库）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git config --global user.name &quot;Administrator&quot;</span><br><span class="line">[root@qfedu.com ~]# git config --global user.email &#x27;18611142071@163.com&#x27;</span><br><span class="line">[root@qfedu.com ~]# git status</span><br><span class="line">[root@qfedu.com ~]# git clone git@192.168.152.138:plat-sp/wordpress.git</span><br><span class="line">[root@qfedu.com ~]# tar xf wordpress-5.2.1.tar.gz</span><br><span class="line">[root@qfedu.com ~]# cd wordpress</span><br><span class="line">[root@qfedu.com ~]# mv /root/wordpress/* .</span><br><span class="line">[root@qfedu.com ~]# git add .</span><br><span class="line">[root@qfedu.com ~]# git commit -m &#x27;new1&#x27;</span><br><span class="line">[root@qfedu.com ~]# git push  -u origin master</span><br></pre></td></tr></table></figure>

<p><strong>部署节点</strong>： node 节点需要在系统管理中配置节点</p>
<h4 id="2、配置-1"><a href="#2、配置-1" class="headerlink" title="2、配置"></a>2、配置</h4><h5 id="1、创建job"><a href="#1、创建job" class="headerlink" title="1、创建job"></a>1、创建job</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905183039989-769081353-1581427002305.png" alt="img"></p>
<h5 id="2、参数化构建"><a href="#2、参数化构建" class="headerlink" title="2、参数化构建"></a>2、参数化构建</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905183208466-356358757-1581427002305.png" alt="img"></p>
<h5 id="3、配置pipeline脚本-（直接配置或者git获取）"><a href="#3、配置pipeline脚本-（直接配置或者git获取）" class="headerlink" title="3、配置pipeline脚本 （直接配置或者git获取）"></a>3、配置pipeline脚本 （直接配置或者git获取）</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/360%E6%88%AA%E5%9B%BE18620330175141-1581427002305.png" alt="360截图18620330175141"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/360%E6%88%AA%E5%9B%BE18260727588956-1581427002305.png" alt="360截图18260727588956"></p>
<h5 id="4、保存"><a href="#4、保存" class="headerlink" title="4、保存"></a>4、保存</h5><h4 id="3、编写-jenkinsfile"><a href="#3、编写-jenkinsfile" class="headerlink" title="3、编写 jenkinsfile"></a>3、编写 jenkinsfile</h4><p>接下里编写jenkinsfile文件：</p>
<p>jenkinsfile-PHP：</p>
<p>源码文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node (&quot;jenkins-slave2&quot;) &#123;</span><br><span class="line">   stage(&#x27;git checkout&#x27;) &#123;</span><br><span class="line">       checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;$&#123;branch&#125;&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &#x27;git@192.168.152.138:plat-sp/wordpress.git&#x27;]]])</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;code copy&#x27;) &#123;</span><br><span class="line">        sh &#x27;&#x27;&#x27;rm -rf $&#123;WORKSPACE&#125;/.git</span><br><span class="line">        mkdir -p /data/backup/web-$(date +&quot;%F&quot;)</span><br><span class="line">        mv /home/wwwroot/default/* /data/backup/web-$(date +&quot;%F&quot;)</span><br><span class="line">        cp -rf $&#123;WORKSPACE&#125;/* /home/wwwroot/default/&#x27;&#x27;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;test&#x27;) &#123;</span><br><span class="line">       sh &quot;curl http://192.168.152.153/status.html&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">node (&quot;slave01-172.16.1.2&quot;) &#123;</span><br><span class="line">   stage(&#x27;git checkout&#x27;) &#123;</span><br><span class="line">       checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;$&#123;branch&#125;&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], subm</span><br><span class="line">oduleCfg: [], userRemoteConfigs: [[url: &#x27;git@172.16.1.3:/home/git/repos/wordpress&#x27;]]])</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;code copy&#x27;) &#123;</span><br><span class="line">        sh &#x27;&#x27;&#x27;rm -rf $&#123;WORKSPACE&#125;/.git</span><br><span class="line">        mv /usr/share/nginx/html/wp.com /data/backup/wp.com-$(date +&quot;%F_%T&quot;)</span><br><span class="line">        cp -rf $&#123;WORKSPACE&#125; /usr/share/nginx/html/wp.com&#x27;&#x27;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;test&#x27;) &#123;</span><br><span class="line">       sh &quot;curl http://wp.test.com/status.html&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面为带解释版，但不可以使用，部分注释会造成问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node (&quot;slave01-172.16.1.2&quot;) &#123;   # 绑定到该节点去执行</span><br><span class="line">   stage(&#x27;git checkout&#x27;) &#123;      # 拉代码</span><br><span class="line">       checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;$&#123;branch&#125;&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], su</span><br><span class="line">bmoduleCfg: [], userRemoteConfigs: [[url: &#x27;git@172.16.1.3:/home/git/repos/wordpress&#x27;]]])</span><br><span class="line">   &#125;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> <span class="variable">$class</span>: <span class="string">&#x27;GitSCM&#x27;</span> git插件获取代码的工具</span></span><br><span class="line"><span class="meta">   #</span><span class="bash"> branches 分支名称</span></span><br><span class="line"><span class="meta">   #</span><span class="bash"> doGenerateSubmoduleConfigurations 是否包含子模块配置</span></span><br><span class="line"><span class="meta">   #</span><span class="bash"> extensions 扩展功能</span></span><br><span class="line"><span class="meta">   #</span><span class="bash"> submoduleCfg  子模块配置</span></span><br><span class="line"><span class="meta">   #</span><span class="bash"> userRemoteConfigs 远程用户配置（仓库地址）</span></span><br><span class="line">   stage(&#x27;code copy&#x27;) &#123;    # 复制代码</span><br><span class="line">        sh &#x27;&#x27;&#x27;rm -rf $&#123;WORKSPACE&#125;/.git   # 删除拉下来的项目的.git敏感文件</span><br><span class="line">        mv /usr/share/nginx/html/wp.com /data/backup/wp.com-$(date +&quot;%F_%T&quot;)  # 备份旧文件</span><br><span class="line">        cp -rf $&#123;WORKSPACE&#125; /usr/share/nginx/html/wp.com&#x27;&#x27;&#x27;  # 新文件复制到站点目录</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;test&#x27;) &#123;  # 测试</span><br><span class="line">       sh &quot;curl http://wp.test.com/status.html&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、构建"><a href="#4、构建" class="headerlink" title="4、构建"></a>4、构建</h4><p>构建概览：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184051509-1764641810-1581427002305.png" alt="img"></p>
<p>控制台输出详情：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184107686-644530379-1581427002305.png" alt="img"></p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184123455-512468351-1581427002305.png" alt="img"></p>
<p>可以看到每一步的执行详情，最后也是成功的！！！！！！</p>
<p>此外我们可以查看服务器及网页实际体验效果进行验证。</p>
<h3 id="7、Jenkins流水线自动化发布Java项目"><a href="#7、Jenkins流水线自动化发布Java项目" class="headerlink" title="7、Jenkins流水线自动化发布Java项目"></a>7、Jenkins流水线自动化发布Java项目</h3><h4 id="1、前提-1"><a href="#1、前提-1" class="headerlink" title="1、前提"></a>1、前提</h4><p><strong>插件</strong>：Maven Integration plugin</p>
<p><strong>环境：</strong>maven、tomcat，git</p>
<p>用的博客系统代码：</p>
<p>git clone <a href="https://github.com/b3log/solo.git">https://github.com/b3log/solo.git</a></p>
<p>远端git服务器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# mkdir -p solo</span><br><span class="line">[root@qfedu.com ~]# cd solo/</span><br><span class="line">[root@qfedu.com ~]# git --bare init</span><br><span class="line">Initialized empty Git repository in /home/git/repos/solo/</span><br></pre></td></tr></table></figure>

<p>本地web：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# git remote -v</span><br><span class="line">origin    git@172.16.1.3:/home/git/repos/solo (fetch)</span><br><span class="line">origin    git@172.16.1.3:/home/git/repos/solo (push)</span><br><span class="line">[root@qfedu.com ~]# git remote rm origin</span><br><span class="line">[root@qfedu.com ~]# git init</span><br><span class="line">Reinitialized existing Git repository in /root/solo/.git/</span><br><span class="line">[root@qfedu.com ~]# git remote add origin git@172.16.1.3:/home/git/repos/solo</span><br><span class="line">[root@qfedu.com ~]# git add .</span><br><span class="line">[root@qfedu.com ~]# git commit -m &quot;java solo all&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> On branch master</span></span><br><span class="line">nothing to commit, working directory clean</span><br><span class="line">[root@qfedu.com ~]# git push origin master</span><br><span class="line">Counting objects: 29058, done.</span><br><span class="line">Compressing objects: 100% (9854/9854), done.</span><br><span class="line">Writing objects: 100% (29058/29058), 47.77 MiB | 39.28 MiB/s, done.</span><br><span class="line">Total 29058 (delta 15768), reused 29058 (delta 15768)</span><br><span class="line">To git@172.16.1.3:/home/git/repos/solo</span><br><span class="line"> * [new branch]      master -&gt; master</span><br></pre></td></tr></table></figure>

<p>因为solo需要改如下配置才可以访问：（改serverhost为指定的域名）</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# vim /root/solo/src/main/resources/latke.properties</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184545173-2047374097-1581427002305.png" alt="img"></p>
<p>然后再重新提交上去</p>
<p><strong>部署节点：</strong> node 节点需要在系统管理中配置节点</p>
<h4 id="2、配置-2"><a href="#2、配置-2" class="headerlink" title="2、配置"></a>2、配置</h4><h5 id="1、新建job"><a href="#1、新建job" class="headerlink" title="1、新建job"></a>1、新建job</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184625352-2046318711-1581427002305.png" alt="img"></p>
<h5 id="2、参数化构建-1"><a href="#2、参数化构建-1" class="headerlink" title="2、参数化构建"></a>2、参数化构建</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184640513-596342130-1581427002305.png" alt="img"></p>
<h5 id="3、配置git仓库（针对jenkinsfile）"><a href="#3、配置git仓库（针对jenkinsfile）" class="headerlink" title="3、配置git仓库（针对jenkinsfile）"></a>3、配置git仓库（针对jenkinsfile）</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184651748-234872141-1581427002305.png" alt="img"></p>
<h4 id="3、编写Jenkinsfile"><a href="#3、编写Jenkinsfile" class="headerlink" title="3、编写Jenkinsfile"></a>3、编写Jenkinsfile</h4><p>源码配置文件：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node (&quot;slave02-172.16.1.3&quot;) &#123;</span><br><span class="line"><span class="meta">   #</span><span class="bash"> def mvnHome = <span class="string">&#x27;/usr/local/maven&#x27;</span></span></span><br><span class="line">   stage(&#x27;git checkout&#x27;) &#123;</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;$&#123;branch&#125;&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &#x27;git@172.16.1.3:/home/git/repos/solo&#x27;]]])</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;maven build&#x27;) &#123;</span><br><span class="line">        sh &#x27;&#x27;&#x27;export JAVA_HOME=/usr/local/java</span><br><span class="line">        /usr/local/maven/bin/mvn clean package -Dmaven.test.skip=true&#x27;&#x27;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;deploy&#x27;) &#123;</span><br><span class="line">        sh &#x27;&#x27;&#x27;</span><br><span class="line">    JENKINS_NODE_COOKIE=dontkillme</span><br><span class="line">    export JAVA_HOME=/usr/local/java</span><br><span class="line">        TOMCAT_NAME=tomcat</span><br><span class="line">        TOMCAT_HOME=/usr/local/$TOMCAT_NAME</span><br><span class="line">        WWWROOT=$TOMCAT_HOME/webapps/ROOT</span><br><span class="line"></span><br><span class="line">        if [ -d $WWWROOT ]; then</span><br><span class="line">           mv $WWWROOT /data/backup/$&#123;TOMCAT_NAME&#125;-$(date +&quot;%F_%T&quot;)</span><br><span class="line">        fi</span><br><span class="line">        unzip $&#123;WORKSPACE&#125;/target/*.war -d $WWWROOT</span><br><span class="line">        PID=$(ps -ef |grep $TOMCAT_NAME |egrep -v &quot;grep|$$&quot; |awk \&#x27;&#123;print $2&#125;\&#x27;)</span><br><span class="line">        [ -n &quot;$PID&quot; ] &amp;&amp; kill -9 $PID</span><br><span class="line">        /bin/bash $TOMCAT_HOME/bin/startup.sh</span><br><span class="line">       &#x27;&#x27;&#x27;</span><br><span class="line">    &#125;</span><br><span class="line">   stage(&#x27;test&#x27;) &#123;</span><br><span class="line">    sh &quot;curl http://192.168.152.138:8080/status.html&quot;</span><br><span class="line">    echo &quot;test ok!!!!!!!&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>下面为带解释版，但不可以使用，部分注释会造成问题</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node (&quot;slave02-172.16.1.3&quot;) &#123;   # 绑定到该节点构建</span><br><span class="line"><span class="meta">   #</span><span class="bash"> def mvnHome = <span class="string">&#x27;/usr/local/maven&#x27;</span></span></span><br><span class="line">   stage(&#x27;git checkout&#x27;) &#123;      # 拉代码</span><br><span class="line">        checkout([$class: &#x27;GitSCM&#x27;, branches: [[name: &#x27;$&#123;branch&#125;&#x27;]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: &#x27;git@172.16.1.3:/home/git/repos/solo&#x27;]]])</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;maven build&#x27;) &#123;    # maven build</span><br><span class="line">        sh &#x27;&#x27;&#x27;export JAVA_HOME=/usr/local/java    # 在指定java环境变量</span><br><span class="line">        /usr/local/maven/bin/mvn clean package -Dmaven.test.skip=true&#x27;&#x27;&#x27;   # 构建maven包 clean package表示构建之前会清理之前构建的包，-Dmaven.test.skip=true表示跳过单元测试</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;deploy&#x27;) &#123;   # 部署</span><br><span class="line">        sh &#x27;&#x27;&#x27;</span><br><span class="line">        JENKINS_NODE_COOKIE=dontkillme  # tomcat启动时会衍生出一些子进程，然后才能成功启动，但是jenkins会在构建结束杀掉tomcat的那些衍生子进程，造成tomcat启动失败，此处加上这个参数可以解决这个问题。</span><br><span class="line">        export JAVA_HOME=/usr/local/java</span><br><span class="line">        TOMCAT_NAME=tomcat</span><br><span class="line">        TOMCAT_HOME=/usr/local/$TOMCAT_NAME</span><br><span class="line">        WWWROOT=$TOMCAT_HOME/webapps/ROOT</span><br><span class="line"></span><br><span class="line">        if [ -d $WWWROOT ]; then   # 如果目录存在，先备份</span><br><span class="line">           mv $WWWROOT /data/backup/$&#123;TOMCAT_NAME&#125;-$(date +&quot;%F_%T&quot;)</span><br><span class="line">        fi</span><br><span class="line">        unzip $&#123;WORKSPACE&#125;/target/*.war -d $WWWROOT   # 项目包解压到站点目录</span><br><span class="line">        PID=$(ps -ef |grep $TOMCAT_NAME |egrep -v &quot;grep|$$&quot; |awk \&#x27;&#123;print $2&#125;\&#x27;)   # 重启tomcat</span><br><span class="line">        [ -n &quot;$PID&quot; ] &amp;&amp; kill -9 $PID</span><br><span class="line">        /bin/bash $TOMCAT_HOME/bin/startup.sh&#x27;&#x27;&#x27;</span><br><span class="line">   &#125;</span><br><span class="line">   stage(&#x27;test&#x27;) &#123;  # 测试</span><br><span class="line">        # sh &quot;curl http://wp.test.com/status.html&quot;</span><br><span class="line">        echo &quot;test ok!!!!!!!&quot;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="4、构建-1"><a href="#4、构建-1" class="headerlink" title="4、构建"></a>4、构建</h4><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184913443-2058202273-1581427002305.png" alt="img"></p>
<h4 id="5、访问"><a href="#5、访问" class="headerlink" title="5、访问"></a>5、访问</h4><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1235834-20180905184940777-1980161350-1581427002305.png" alt="img"></p>
<p><strong>报错处理</strong></p>
<p>pipeline script from SCM方式下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Started by user ***</span><br><span class="line">java.io.FileNotFoundException</span><br><span class="line">    at jenkins.plugins.git.GitSCMFile$3.invoke(GitSCMFile.java:167)</span><br><span class="line">    at jenkins.plugins.git.GitSCMFile$3.invoke(GitSCMFile.java:159)</span><br><span class="line">    at jenkins.plugins.git.GitSCMFileSystem$3.invoke(GitSCMFileSystem.java:193)</span><br><span class="line">    ...l</span><br><span class="line">Finished: FAILURE</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/4276633-a4aee92aa7677655-1581427002305.png" alt="img"></p>
<p>​                                                  <strong>原因是git工程下，没有找到Script Path路径下的脚本文件</strong>。</p>
<h3 id="8、Jenkins-结合-gitlab-使用"><a href="#8、Jenkins-结合-gitlab-使用" class="headerlink" title="8、Jenkins 结合 gitlab 使用"></a>8、Jenkins 结合 gitlab 使用</h3><h4 id="1、创建一个新的任务"><a href="#1、创建一个新的任务" class="headerlink" title="1、创建一个新的任务"></a>1、创建一个新的任务</h4><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192354042-830010134-1581427002305.png" alt="img"></p>
<p>输入项目的名称，选择构建只有分风格的软件</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192401401-883929242-1581427002305.png" alt="img"></p>
<h4 id="2、将Jenkins与gitlab联合"><a href="#2、将Jenkins与gitlab联合" class="headerlink" title="2、将Jenkins与gitlab联合"></a>2、将Jenkins与gitlab联合</h4><h5 id="1、Jenkins创建公钥和私钥"><a href="#1、Jenkins创建公钥和私钥" class="headerlink" title="1、Jenkins创建公钥和私钥"></a>1、Jenkins创建公钥和私钥</h5><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ssh-keygen </span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line"></span><br><span class="line">Enter file in which to save the key (/root/.ssh/id_rsa): Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in /root/.ssh/id_rsa.</span><br><span class="line">Your public key has been saved in /root/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">SHA256:5SGYye8oxCKFJjddb4W8JC0RAQhBWCvuG8aZL8eMJs4 root@Jenkins</span><br><span class="line">The key&#x27;s randomart image is:</span><br><span class="line">+---[RSA 2048]----+</span><br><span class="line">|==....=* ..      |</span><br><span class="line">|...o oo==.       |</span><br><span class="line">|+.= . =++.o      |</span><br><span class="line">|++ o   o.+ .     |</span><br><span class="line">|... o   S .      |</span><br><span class="line">|o.oo   o         |</span><br><span class="line">| B+ . . .        |</span><br><span class="line">|++++ .           |</span><br><span class="line">|+Eo.             |</span><br><span class="line">+----[SHA256]-----+</span><br><span class="line">[root@qfedu.com ~]# cat .ssh/id_rsa.pub </span><br><span class="line">[root@qfedu.com ~]# cat .ssh/id_rsa</span><br></pre></td></tr></table></figure>

<h5 id="2、在gitlab中添加公钥id-rsa-pub"><a href="#2、在gitlab中添加公钥id-rsa-pub" class="headerlink" title="2、在gitlab中添加公钥id_rsa.pub"></a>2、在gitlab中添加公钥id_rsa.pub</h5><p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192426354-684435689-1581427002305.png" alt="img"></p>
<h5 id="3、在jenkins中添加私钥id-rsa"><a href="#3、在jenkins中添加私钥id-rsa" class="headerlink" title="3、在jenkins中添加私钥id_rsa"></a>3、在jenkins中添加私钥id_rsa</h5><p>​         在首页中，点击项目名称的下拉监听</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192438933-1952523900-1581427002305.png" alt="img"></p>
<p>​         选择源码管理，先将gitlab的项目地址复制过来</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192448667-1624864487-1581427002305.png" alt="img"></p>
<p>​         选择SSH密钥和证书，然后选择直接输入，将私钥复制到下框中即可</p>
<p>​         添加完成后，点击保存</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192456448-898723804-1581427002305.png" alt="img"></p>
<p>​         选择刚才创建的证书，完成后，选择构建</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192504808-1018752536-1581427002305.png" alt="img"></p>
<p><strong>选择构建</strong></p>
<p>​         拉到最底部，选择使用shell脚本</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192512214-519514729-1581427002305.png" alt="img"></p>
<p>​         脚本内容</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192518948-2060407751-1581427002305.png" alt="img"></p>
<p>​         创建测试环境</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# mkdir -p /data/www</span><br><span class="line">[root@qfedu.com ~]# chown -R jenkins.jenkins /data/</span><br></pre></td></tr></table></figure>

<p>​         选择构建后的操作，让每次构建完成后都将结果发送给管理员</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192536214-662773016-1581427002307.png" alt="img"></p>
<h4 id="3、测试手动集成"><a href="#3、测试手动集成" class="headerlink" title="3、测试手动集成"></a>3、测试手动集成</h4><p>回到主页，点击右侧的按钮进行测试</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192552839-1669748311-1581427002307.png" alt="img"></p>
<p>部署完成</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192558886-1289295614-1581427002307.png" alt="img"></p>
<p>查看部署日志</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192606261-1352544543-1581427002307.png" alt="img"></p>
<p>查看部署结果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@qfedu.com ~]# ll &#x2F;data&#x2F;www&#x2F;</span><br><span class="line">总用量 4</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 4 11月 30 21:22 flag</span><br><span class="line">-rw-r--r-- 1 jenkins jenkins 0 11月 30 21:22 README.md</span><br></pre></td></tr></table></figure>

<h4 id="4、自动测试（gitlab主动通知Jenkins测试）"><a href="#4、自动测试（gitlab主动通知Jenkins测试）" class="headerlink" title="4、自动测试（gitlab主动通知Jenkins测试）"></a>4、自动测试（gitlab主动通知Jenkins测试）</h4><p>该功能会使用到一个插件 <strong>gitlab plugin</strong></p>
<p>配置gitlab认证</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192624433-157495203-1581427002307.png" alt="img"></p>
<p>添加一个新的凭证</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192631683-372513748-1581427002307.png" alt="img"></p>
<p>   从gitlab的设置中将 token复制过来（需要手动创建token）</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/360%E6%88%AA%E5%9B%BE18620331606393-1581427002307.png" alt="360截图18620331606393"></p>
<p> 将复制的token粘贴到api token中，点ok</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192651667-606045732-1581427002307.png" alt="img"></p>
<p> 在系统配置中找到<strong>Gitlab</strong> 将信息进行填写，Credentials 选择刚刚创建对的即可</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192700729-449236192-1581427002307.png" alt="img"></p>
<p>打开项目，编辑项目的构建触发器</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192710183-1810385177-1581427002307.png" alt="img"></p>
<p>在gitlab上配置连接jenkins ，将Jenkins的Secret token 与Build URL 复制到gitlab中</p>
<p>注意： 在项目设置中的集成</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192718448-1860661215-1581427002307.png" alt="img"></p>
<p>保存之前先进程测试，测试成功后进行保存</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192726448-895582851-1581427002307.png" alt="img"></p>
<p> 在gitlab进行上传文件，可以测试。</p>
<p>在日志中显示是 Started by GitLab push by Administrator 即表示自动集成成功</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/1190037-20171201192733104-716903443-1581427002307.png" alt="img"></p>
<h4 id="5、错误解决"><a href="#5、错误解决" class="headerlink" title="5、错误解决"></a>5、错误解决</h4><ul>
<li><p><strong>错误提示：</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#很多朋友使用最新版本的gitlab做自动部署时，在增加web钩子那一步，</span><br><span class="line">#点击test  push events时会报错：Url is blocked: Requests to the local network are not allowed</span><br></pre></td></tr></table></figure>

<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/b36a6a1bc5d58b0186618d020a801cc7-1581427002307.png" alt="Gitlab+Jenkins实现自动部署"></p>
</li>
<li><p>解决方法：</p>
<p>这是因为新版的gitlab为了安全默认禁止了本地局域网地址调用web hook<br>我们在设置里允许就行，具体步骤如下：</p>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/2ac7f84e086f61d521781c3027576b1e-1581427002308.png" alt="Gitlab+Jenkins实现自动部署"><br><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/f13e07e857b8d7677bb04f2631692e06-1581427002308.png" alt="Gitlab+Jenkins实现自动部署"></p>
</li>
</ul>
<p><img src="/2021/08/07/%E7%AC%AC3%E5%A4%A9-Jenkins%E8%AF%A6%E8%A7%A3/360%E6%88%AA%E5%9B%BE17370510273154-1581427002308.png" alt="360截图17370510273154"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>CICD</category>
      </categories>
      <tags>
        <tag>CICD</tag>
      </tags>
  </entry>
</search>
