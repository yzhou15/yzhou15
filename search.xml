<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>ECMA Script6</title>
    <url>/2021/07/11/2021-07-11-React/</url>
    <content><![CDATA[<hr>
<p><em><a href="https://www.notion.so/React-9d89c52f006147f49d9b01d7675adef9">top</a></em></p>
<h1 id="一-React"><a href="#一-React" class="headerlink" title="一. React"></a>一. React</h1><h2 id="1-React-概述"><a href="#1-React-概述" class="headerlink" title="1.React 概述"></a>1.React 概述</h2><h3 id="1-1-什么是React"><a href="#1-1-什么是React" class="headerlink" title="1.1 什么是React"></a>1.1 什么是React</h3><p>用于构建用户界面的JavaScript库</p>
<p>用户界面: HTML页面(前端)</p>
<p>React主要用来写HTML页面,或者构建Web应用</p>
<p>如果从MVC的角度来看,React仅仅是视图层(V), 也就是只负责试图的渲染,而非提供了完整的M和C功能</p>
<h3 id="1-2-React的特点"><a href="#1-2-React的特点" class="headerlink" title="1.2 React的特点"></a>1.2 React的特点</h3><ul>
<li>声明式 (只需要描述UI看起来是什么样,都跟写HTML一样)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> jsx = <span class="xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">className</span> = <span class="string">&quot;app&quot;</span>&gt;</span></span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello React! 动态变化数据: &#123;count&#125; <span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ul>
<li>基于组件<ul>
<li>组件是Reat最重要的内容</li>
<li>组件表示页面中的部分内容</li>
<li>组合、复用多个组件,可以实现完整的页面功能</li>
</ul>
</li>
<li>学习一次,随处使用<ul>
<li>使用 React可以开发Web应用</li>
<li>使用 React可以开发移动端原生应用( react- native)</li>
<li>使用 React可以开发VR(虚拟现实)应用( react360)</li>
</ul>
</li>
</ul>
<h2 id="2-React-的基本使用"><a href="#2-React-的基本使用" class="headerlink" title="2. React 的基本使用"></a>2. React 的基本使用</h2><h3 id="2-1-React的安装"><a href="#2-1-React的安装" class="headerlink" title="2.1 React的安装"></a>2.1 React的安装</h3><p>安装命令: <code>npm i react react-dom</code></p>
<ul>
<li>react 包是核心,提供创建元素,组件等功能</li>
<li>react-dom包提供DOM相关功能等</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 引入react和react-dom两个js文件</span></span><br><span class="line">&lt;script src=<span class="string">&quot;./node_modules/react/umd/react.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&quot;./node_modules/react-dom/umd/react-dom.development.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line"><span class="comment">// 2. 创建React元素</span></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	<span class="comment">// 参数一: 元素名称</span></span><br><span class="line">	<span class="comment">// 参数二: 元素属性</span></span><br><span class="line">	<span class="comment">// 参数三: 元素的子节点</span></span><br><span class="line">	<span class="keyword">const</span> title = React.createElement(<span class="string">&#x27;h1&#x27;</span>, <span class="literal">null</span>, <span class="string">&#x27;Hello React&#x27;</span>)</span><br><span class="line">&lt;/script&gt; </span><br><span class="line"><span class="comment">// 3. 渲染React元素到页面中</span></span><br><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/创建id属性为root的元素</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	const title = React.createElement(&#x27;h1&#x27;, null, &#x27;Hello React&#x27;)</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数一: 要渲染的react元素</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数二: 挂载点</span></span><br><span class="line"><span class="regexp">	ReactDOM.render(title, document.getElementById(&#x27;root&#x27;))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-2-方法说明"><a href="#2-2-方法说明" class="headerlink" title="2.2 方法说明"></a>2.2 方法说明</h3><ul>
<li>React.creatElement()说明(知道)</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;root&quot;</span>&gt;&lt;<span class="regexp">/div&gt; /</span><span class="regexp">/创建id属性为root的元素</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数一: 要渲染的react元素</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数二: 挂载点</span></span><br><span class="line"><span class="regexp">  /</span><span class="regexp">/ 第三个及其后面的参数: 元素的子节点</span></span><br><span class="line"><span class="regexp">	const title = React.createElement(</span></span><br><span class="line"><span class="regexp">		&#x27;p&#x27;, </span></span><br><span class="line"><span class="regexp">		&#123; title: &#x27;我是标题&#x27;, id: &#x27;p1&#x27; &#125;,</span></span><br><span class="line"><span class="regexp">	  &#x27;Hello React&#x27;,</span></span><br><span class="line"><span class="regexp">		React.createElement(&#x27;span&#x27;, null, &#x27;我是span节点&#x27;)</span></span><br><span class="line"><span class="regexp">		)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数一: 要渲染的react元素</span></span><br><span class="line"><span class="regexp">	/</span><span class="regexp">/ 参数二: 挂载点</span></span><br><span class="line"><span class="regexp">	ReactDOM.render(title, document.getElementById(&#x27;root&#x27;))</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li><strong>ReactDOM.render()说明</strong></li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 第一个参数: 要渲染的React元素</span></span><br><span class="line"><span class="comment">// 第二个参数: DOM对象, 用于指定渲染到页面中的位置</span></span><br><span class="line">ReactDOM.render(el, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="3-React脚手架的使用"><a href="#3-React脚手架的使用" class="headerlink" title="3. React脚手架的使用"></a>3. React脚手架的使用</h2><h3 id="3-1-React脚手架意义"><a href="#3-1-React脚手架意义" class="headerlink" title="3.1 React脚手架意义"></a>3.1 React脚手架意义</h3><ol>
<li>脚手架是开发现代Web应用的必备</li>
<li>充分利用Webpack, Babel, ESlint等工具辅助项目开发</li>
<li>零配置,无需手动配置繁琐的工具即可使用</li>
<li>关注业务而不是工具配置</li>
</ol>
<h3 id="3-2-使用React脚手架初始化项目"><a href="#3-2-使用React脚手架初始化项目" class="headerlink" title="3.2 使用React脚手架初始化项目"></a>3.2 使用React脚手架初始化项目</h3><ol>
<li>初始化项目,命令: <code>npx create-react-app my-app</code></li>
<li>启动项目,在项目根目录执行 <code>npm start</code></li>
</ol>
<h3 id="3-3-在脚手架中使用React"><a href="#3-3-在脚手架中使用React" class="headerlink" title="3.3 在脚手架中使用React"></a>3.3 在脚手架中使用React</h3><ol>
<li>导入react 和react-dom两个包</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">imoort React <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span></span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">&#x27;react-dom&#x27;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>调用React.createElement()方法来创建React元素</li>
<li>调用ReactDOM.render()方法渲染react元素到页面中</li>
</ol>
<h3 id="3-4-React基础总结"><a href="#3-4-React基础总结" class="headerlink" title="3.4 React基础总结"></a>3.4 React基础总结</h3><ol>
<li>Reat是构建用户界面的 JavaScript库</li>
<li>使用 react时,推荐使用脚手架方式</li>
<li>初始化项目命令: npx create- react- app my-app</li>
<li>启动项目命令: yarn start(或 npm start)</li>
<li>React. createElement0方法用于创建 react元素(知道)</li>
<li>ReactDoM. render0方法负责渲染 react元素到页面中</li>
</ol>
<h1 id="二-JSX"><a href="#二-JSX" class="headerlink" title="二. JSX"></a>二. JSX</h1><p>目标:</p>
<ul>
<li>能够知道什么是JSX</li>
<li>能够使用JSX创建 React元素</li>
<li>能够在JsX中使用 JavaScript表达式</li>
<li>能够使用JSX的条件渲染和列表渲染</li>
<li>能够给JsX添加样式</li>
<li>JSX的基本使用</li>
<li>JSX中使用 JavaScript表达式</li>
<li>JSX的条件渲染</li>
<li>JSX的列表渲染</li>
<li>JSX的样式处理</li>
</ul>
<h2 id="1-JSX的基本使用"><a href="#1-JSX的基本使用" class="headerlink" title="1. JSX的基本使用"></a>1. JSX的基本使用</h2><h3 id="1-1-creatElement-的问题"><a href="#1-1-creatElement-的问题" class="headerlink" title="1.1 creatElement()的问题"></a>1.1 creatElement()的问题</h3><ul>
<li>繁琐不简洁</li>
<li>不直观,无法一眼看出所描述的结构</li>
<li>不优雅,用户体验不爽</li>
</ul>
<h3 id="1-2-JSX简介"><a href="#1-2-JSX简介" class="headerlink" title="1.2 JSX简介"></a>1.2 JSX简介</h3><p>JsX是 JavaScript XML的简写,表示在 JavaScript代码中写XML(HTML)格式的代码 优势:声明式语法更加直观、与HTM结构相同,降低了学习成本、提升开发效率</p>
<p>JSX的React的核心内容</p>
<ul>
<li>推荐使用JSX语法创建 React元素</li>
<li>写JSX就跟写HTML一样,更加直观、友好</li>
<li>JSX语法更能体现 React的声明式特点(描述U长什么样子)</li>
<li>使用步骤</li>
</ul>
<ol>
<li>使用JSX语法创建React元素</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 使用JSX语法,创建React元素</span></span><br><span class="line"><span class="keyword">const</span> tltle = <span class="xml"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello JSX<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li>使用ReactDOM.render()方法渲染react元素到页面中</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 渲染创建好的React元素</span></span><br><span class="line">ReactDOM.render(title,root)</span><br></pre></td></tr></table></figure>

<h3 id="1-3-思考"><a href="#1-3-思考" class="headerlink" title="1.3 思考"></a>1.3 思考</h3><p>为什么脚手架中可以使用JSX语法? 1.J5X不是标准的 ECMAScript语法,它是 ECMAScript的语法扩展 2.需要使用 babel编译处理后,才能在浏览器环境中使用。 3. create-react-app脚手架中已经默认有该配置,无需手动配置 4.编译SX语法的包为:@ babel/preset-react</p>
<h3 id="1-4-注意点"><a href="#1-4-注意点" class="headerlink" title="1.4 注意点"></a>1.4 注意点</h3><ol>
<li>React元素的属性名使用驼峰命名法</li>
<li>特殊属性名: class-&gt; <strong>className</strong>、for-&gt; htmlFor、 tabindex-&gt; tabIndex</li>
<li>没有子节点的Reac元素可以用**/&gt;**结束</li>
<li>推荐:使用<strong>小括号包裹JSX</strong>,从而避免JS中的自动插入分号陷阱</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> title = <span class="xml"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">className</span>=<span class="string">&quot;title&quot;</span>&gt;</span>Hello JSX <span class="tag">&lt;<span class="name">span</span> /&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用小括号包裹JSX</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">	&lt;div&gt;Hello JSX&lt;/div&gt;</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">	&lt;h1 className=<span class="string">&quot;title&quot;</span>&gt;</span><br><span class="line">	Hello JSX </span><br><span class="line">	&lt;span /&gt;</span><br><span class="line">	&lt;/h1&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h2 id="2-JSX中使用JavaScript表达式"><a href="#2-JSX中使用JavaScript表达式" class="headerlink" title="2. JSX中使用JavaScript表达式"></a>2. JSX中使用JavaScript表达式</h2><h3 id="嵌入JS表达式"><a href="#嵌入JS表达式" class="headerlink" title="嵌入JS表达式"></a>嵌入JS表达式</h3><ul>
<li>数据存储在JS中</li>
<li>语法: <strong>{JavaScript表达式}</strong></li>
<li>注意:语法中是单大括号,不是双大括号</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;Jack&#x27;</span></span><br><span class="line"><span class="keyword">const</span> dv = (</span><br><span class="line">	&lt;div&gt;你好,我叫: &#123;name&#125;&lt;/div&gt;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点:"></a>注意点:</h3><ol>
<li>单大括号中可以使用任意的 JavaScript表达式</li>
<li>JSX自身也是JS表达式</li>
<li>注意:JS中的对象是一个例外,一般只会出现在stye属性中</li>
<li>注意:不能在中出现语句(比如:if/for等</li>
</ol>
<h2 id="3-JSX的条件渲染"><a href="#3-JSX的条件渲染" class="headerlink" title="3. JSX的条件渲染"></a>3. JSX的条件渲染</h2><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 条件渲染</span></span><br><span class="line"><span class="comment">// if-else</span></span><br><span class="line"><span class="keyword">const</span> isloading = <span class="literal">true</span></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span> (isLoading) &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成,此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 三元表达式</span></span><br><span class="line"><span class="keyword">const</span> loadData = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">return</span> isloading ? (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>) : (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>数据加载完成,此处显示加载后的数据<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 逻辑与运算符</span></span><br><span class="line"><span class="keyword">const</span> loadData = () +&gt; &#123;</span><br><span class="line">	<span class="keyword">return</span> isLoading &amp;&amp; (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> title = (</span><br><span class="line">	&lt;h1&gt;</span><br><span class="line">	条件渲染:</span><br><span class="line">	&#123;loadData()&#125;</span><br><span class="line">	&lt;/h1&gt;</span><br><span class="line">)</span><br><span class="line"><span class="comment">// 渲染react元素</span></span><br><span class="line">ReactDOM.render(title, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="4-JSX的列表渲染"><a href="#4-JSX的列表渲染" class="headerlink" title="4. JSX的列表渲染"></a>4. JSX的列表渲染</h2><ul>
<li>如果要渲染一组数据,应该使用数组的map0方法</li>
<li>注意:渲染列表时应该添加key属性,key属性的值要保证唯一</li>
<li>原则:map0遍历谁,就给谁添加key属性</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> songs = [</span><br><span class="line">	&#123;<span class="attr">id</span>:<span class="number">1</span>,<span class="attr">name</span>:<span class="string">&quot;痴心绝对&#x27;&#125;</span></span><br><span class="line"><span class="string">	&#123;id:2,name:·像我这样的人&#x27;&#125;,</span></span><br><span class="line"><span class="string">	&#123;id:3,name:&quot;</span>南山南<span class="string">&#x27;&#125;,</span></span><br><span class="line"><span class="string">]</span></span><br><span class="line"><span class="string">const list = (</span></span><br><span class="line"><span class="string">	&lt;ul&gt;</span></span><br><span class="line"><span class="string">	  &#123;songs. map(item =&gt;&lt;li key=&#123;item id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;)&#125;</span></span><br><span class="line"><span class="string">	&lt;/u1&gt;</span></span><br><span class="line"><span class="string">)</span></span><br></pre></td></tr></table></figure>

<h2 id="5-JSX的样式处理"><a href="#5-JSX的样式处理" class="headerlink" title="5. JSX的样式处理"></a>5. JSX的样式处理</h2><h3 id="1-行内样式-style"><a href="#1-行内样式-style" class="headerlink" title="1. 行内样式 - style"></a>1. 行内样式 - style</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h1 style=&#123;&#123;<span class="attr">color</span>: <span class="string">&#x27;red&#x27;</span>, <span class="attr">backgroundColor</span>: <span class="string">&#x27;skyblue&#x27;</span>&#125;&#125;&gt;</span><br><span class="line">	JSX的样式处理</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="2-类名-className-推荐"><a href="#2-类名-className-推荐" class="headerlink" title="2. 类名 - className(推荐)"></a>2. 类名 - className(推荐)</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&lt;h1 className = <span class="string">&#x27;title&#x27;</span>&gt;</span><br><span class="line">	JSX的样式处理</span><br><span class="line">&lt;/h1&gt;</span><br></pre></td></tr></table></figure>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结:"></a>总结:</h3><p>JSX</p>
<ol>
<li>JSX是React的核心内容</li>
<li>JSX表示在J5代码中写HTML结构,是React声明式的体现</li>
<li>使用J5X配合嵌入的J5表达式、条件渲染、列表渲染,可以描述任意UI结构</li>
<li>推荐使用[lassName的方式给JSX添加样式</li>
<li>React完全利用J语言自身的能力来编写圈,而不是造轮子增强HTML功能</li>
</ol>
<h1 id="三-React组件基础"><a href="#三-React组件基础" class="headerlink" title="三. React组件基础"></a>三. React组件基础</h1><h3 id="1-React组件介绍"><a href="#1-React组件介绍" class="headerlink" title="1. React组件介绍"></a>1. React组件介绍</h3><ul>
<li>组件是Reat的一等公民,使用 React就是在用组件</li>
<li>组件表示页面中的部分功能</li>
<li>组合多个组件实现完整的页面功能</li>
<li>特点:可复用、独立、可组合</li>
</ul>
<h3 id="2-React组件的两种创建方式"><a href="#2-React组件的两种创建方式" class="headerlink" title="2. React组件的两种创建方式"></a>2. React组件的两种创建方式</h3><ul>
<li>使用函数创建组件</li>
<li>使用类创建组件</li>
</ul>
<h3 id="2-1-使用函数创建组件"><a href="#2-1-使用函数创建组件" class="headerlink" title="2.1 使用函数创建组件"></a>2.1 使用函数创建组件</h3><ul>
<li>函数组件:使用js的函数(或箭头函数)创建的组件叫做:函数组件</li>
<li>约定1:函数名称必须以大写字母开头,React据此区分组件和普通的 React元素</li>
<li>约定2: 函数组件必须有返回值,表示该组件的结构</li>
<li>如果返回值为null, 表示不渲染任何内容</li>
<li>渲染函数组件:  用函数名作为组件标签名</li>
<li>组件标签可以是单标签也可以是双标签</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数组件</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Hello</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;div&gt;这是我的第一个函数组件!&lt;/div&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 箭头函数写法</span></span><br><span class="line"><span class="keyword">const</span> Hello = <span class="function">() =&gt;</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>这是我的第一个函数组件!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-2-使用类创建组件"><a href="#2-2-使用类创建组件" class="headerlink" title="2.2 使用类创建组件"></a>2.2 使用类创建组件</h3><ul>
<li>类组件: 使用ES6的class创建的组</li>
<li>约定1: 类名称也必须以大写字母开头</li>
<li>约定2: 类组件应该继承React.Component父类,从而可以使用父类中提供的方法或属性</li>
<li>约定3: 类组件必须提供 render0方法</li>
<li>约定4: render0方法必须有返回值,表示该组件的结构</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Compontent</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">reder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Hello Class Component!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="2-3-抽离为独立JS文件"><a href="#2-3-抽离为独立JS文件" class="headerlink" title="2.3 抽离为独立JS文件"></a>2.3 抽离为独立JS文件</h3><p>组件作为一个独立的个体,一般都会放到一个单独的JS文件中</p>
<ol>
<li>创建 Hello.js</li>
<li>在 Hello.js中导入 React</li>
<li>创建组件(函数或类)</li>
<li>在 Hello.js中导出该组件</li>
<li>在 index.js中导入Hllo组件</li>
<li>渲染组件</li>
</ol>
<h2 id="3-React事件处理"><a href="#3-React事件处理" class="headerlink" title="3. React事件处理"></a>3. React事件处理</h2><h3 id="3-1-事件绑定"><a href="#3-1-事件绑定" class="headerlink" title="3.1 事件绑定"></a>3.1 事件绑定</h3><ul>
<li>React事件绑定语法与DOM事件语法相似</li>
<li>语法: on+事件名称={事件处理程序}, 比如: onClick={() = &gt; {}}</li>
<li>注意: React事件采用<strong>驼峰命名法</strong>, 比如: onMouseEnter, onFocus</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 类组件事件绑定</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Compontent</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">handleClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;单击事件触发了&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">reder</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;button onClick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;点我&lt;/buttom&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">Hello</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 函数组件事件绑定</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">App</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">handClick</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;函数组件中的事件绑定,单击事件触发了&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> (</span><br><span class="line">		&lt;button onClick=&#123;handleClick&#125;&gt;点我&lt;<span class="regexp">/buttom&gt; /</span><span class="regexp">/函数组件中没有this</span></span><br><span class="line"><span class="regexp">	)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 渲染组件</span></span><br><span class="line"><span class="regexp">ReactDOM.render(&lt;Hello /</span>&gt;, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="3-2-事件对象"><a href="#3-2-事件对象" class="headerlink" title="3.2 事件对象"></a>3.2 事件对象</h3><ul>
<li>可以通过事件处理程序的参数获取到事件对象</li>
<li>React中的事件对象叫做: 合成事件(对象)</li>
<li>合成事件: 兼容所有浏览器, 无需担心跨浏览器兼容的问题</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* React事件对象 */</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">handleClick</span>(<span class="params">e</span>)</span> &#123;</span><br><span class="line">		<span class="comment">// 阻止浏览器的默认行为</span></span><br><span class="line">		e.preventDefault()</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;a标签的单机事件触发了&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span>(</span><br><span class="line">			&lt;a href=<span class="string">&quot;&lt;https://www.baidu.com/&gt;&quot;</span> onCLick=&#123;<span class="built_in">this</span>.handleClick&#125;&gt;baidu&lt;/a&gt;&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementById(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h2 id="4-有状态组件和无状态组件"><a href="#4-有状态组件和无状态组件" class="headerlink" title="4. 有状态组件和无状态组件"></a>4. 有状态组件和无状态组件</h2><ul>
<li>函数组件又叫做无状态组件,类组件又叫做有状态组件</li>
<li>状态( state)即数据</li>
<li>函数组件没有自己的状态,只负责数据展示(静)</li>
<li>类组件有自己的状态,负责更新UI,让页面“动”起来</li>
</ul>
<h2 id="5-组件中的state-和setState"><a href="#5-组件中的state-和setState" class="headerlink" title="5. 组件中的state 和setState"></a>5. 组件中的state 和setState</h2><h3 id="5-1-state的基本使用"><a href="#5-1-state的基本使用" class="headerlink" title="5.1 state的基本使用"></a>5.1 state的基本使用</h3><ul>
<li>状态( state)即数据,是组件内部的私有数据,只能在组件内部使用</li>
<li>state的值是对象,表示一个组件中可以有多个数据</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>()</span><br><span class="line">		<span class="comment">// 初始化state</span></span><br><span class="line">		<span class="built_in">this</span>.state = &#123;</span><br><span class="line">			count: <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="comment">// 简化语法初始化state</span></span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<h3 id="5-2-setState-修改状态"><a href="#5-2-setState-修改状态" class="headerlink" title="5.2 setState()修改状态"></a>5.2 setState()修改状态</h3><ul>
<li>状态是可变的</li>
<li>语法: this setstate((要修改的数据</li>
<li>注意:不要直接修改 state中的值,这是错误的!!</li>
</ul>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="function">() =&gt;</span> &#123;</span><br><span class="line">				<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">					count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">				&#125;)</span><br><span class="line">			&#125;&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure>

<ul>
<li>setState()作用: 1.修改state 2.更新UI</li>
<li>思想: 数据驱动视图</li>
</ul>
<h2 id="6-事件绑定this指向"><a href="#6-事件绑定this指向" class="headerlink" title="6. 事件绑定this指向"></a>6. 事件绑定this指向</h2><h3 id="6-1-从JSX中抽离事件处理程序"><a href="#6-1-从JSX中抽离事件处理程序" class="headerlink" title="6.1 从JSX中抽离事件处理程序"></a>6.1 从JSX中抽离事件处理程序</h3><ul>
<li>JSX中掺杂过多的JS逻辑代码,会显得非常混乱</li>
<li>推荐: 将逻辑抽离到单独的方法中,保证JSX结构清晰</li>
</ul>
<p><img src="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2b35525-3f95-4f8d-b980-937bd84d1a13/Untitled.png" alt="https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a2b35525-3f95-4f8d-b980-937bd84d1a13/Untitled.png"></p>
<ul>
<li>原因: 事件处理程序中this的值为undefined</li>
<li>希望: this指向组件实例(render方法中的this即为组件实例)</li>
</ul>
<h3 id="6-2-如何处理事件绑定this指向的问题"><a href="#6-2-如何处理事件绑定this指向的问题" class="headerlink" title="6.2 如何处理事件绑定this指向的问题"></a>6.2 如何处理事件绑定this指向的问题</h3><ol>
<li><p>箭头函数</p>
<ol>
<li>利用箭头函数自身不绑定this的特点</li>
<li>render()方法中的this为组件实例,可以获取到setState()</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	state = &#123;</span><br><span class="line">		count: <span class="number">0</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	<span class="function"><span class="title">onIncrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;事件处理程序中的this:&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">			count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="function">() =&gt;</span> <span class="built_in">this</span>.onIncrement()&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">			<span class="comment">// &lt;button onClick=&#123;this.onIncrement&#125;&gt;+1&lt;/button&gt;</span></span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>Function.prototype.bind()</p>
<ol>
<li>利用ES5中的bind方法,将事件处理程序中的this与组件实例绑定到一起</li>
</ol>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hello</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="title">constructor</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">super</span>()</span><br><span class="line">		<span class="built_in">this</span>.state = &#123;</span><br><span class="line">			count: <span class="number">0</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="built_in">this</span>.onIncrement = <span class="built_in">this</span>.onIncrement.bind(<span class="built_in">this</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// 事件处理程序</span></span><br><span class="line">	<span class="function"><span class="title">onIncrement</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="string">&#x27;事件处理程序中的this:&#x27;</span>, <span class="built_in">this</span>)</span><br><span class="line">		<span class="built_in">this</span>.setState(&#123;</span><br><span class="line">			count: <span class="built_in">this</span>.state.count + <span class="number">1</span></span><br><span class="line">		&#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="title">render</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> (</span><br><span class="line">			&lt;div&gt;计数器: &#123;<span class="built_in">this</span>.state.count&#125;&lt;/div&gt;</span><br><span class="line">			&lt;button onClick=&#123;<span class="built_in">this</span>.onIncrement&#125;&gt;+<span class="number">1</span>&lt;/button&gt;</span><br><span class="line">		)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 渲染组件</span></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">APP</span> /&gt;</span></span>, <span class="built_in">document</span>.getElementVyId(<span class="string">&#x27;root&#x27;</span>))</span><br></pre></td></tr></table></figure></li>
<li><p>class的实例方法</p>
</li>
</ol>
<p><a href="https://www.notion.so/React-9d89c52f006147f49d9b01d7675adef9">GG</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>React</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>ECMA Script6</title>
    <url>/2021/06/30/ECMA%20Script6/</url>
    <content><![CDATA[<h3 id="一-let声明变量"><a href="#一-let声明变量" class="headerlink" title="一. let声明变量"></a>一. let声明变量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a;</span><br><span class="line"><span class="keyword">let</span> b,c,d;</span><br><span class="line"><span class="keyword">let</span> e = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">let</span> f = <span class="number">521</span>, g = <span class="string">&#x27;iloveyou&#x27;</span>, h = [];</span><br></pre></td></tr></table></figure>

<ol>
<li>变量不能重复声明</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;罗志祥&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> star = <span class="string">&#x27;小猪&#x27;</span>;</span><br><span class="line"><span class="comment">// &quot;star&quot; has already been declared</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>块级作用域</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> girl = <span class="string">&#x27;周扬青&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(girl);</span><br><span class="line"><span class="comment">// referenceError: girl is not defined</span></span><br><span class="line"><span class="comment">// if else while for循环</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>不存在变量提升</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="keyword">var</span> = song = <span class="string">&#x27;恋爱达人&#x27;</span>;</span><br><span class="line"><span class="comment">// Cannot access &#x27;song&#x27; before initialization</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>不影响作用域链</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> school = <span class="string">&#x27;peking&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(school);</span><br><span class="line">  &#125;</span><br><span class="line">  fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// peking</span></span><br></pre></td></tr></table></figure>

<h3 id="二-const声明常量"><a href="#二-const声明常量" class="headerlink" title="二. const声明常量"></a>二. const声明常量</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> SCHOOL = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(SCHOOL);</span><br></pre></td></tr></table></figure>

<ol>
<li>一定要赋初始值</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> A;</span><br><span class="line"><span class="comment">// Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>一般常量使用大写(潜规则)</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="number">100</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>常量的值不能修改</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">SCHOOL = <span class="string">&#x27;ATGUIGU&#x27;</span>;</span><br><span class="line"><span class="comment">// Assignment to constant variable</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>块级作用域</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> PLAYER = <span class="string">&#x27;UZI&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(PLAYER);</span><br><span class="line"><span class="comment">// PLAYER is not defined</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>对于数组和对象的元素修改,不算做对常量的修改,不会报错</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> TEAM = [<span class="string">&#x27;UZI&#x27;</span>, <span class="string">&#x27;MXLG&#x27;</span>, <span class="string">&#x27;Letme&#x27;</span>];</span><br><span class="line">TEAM.push(<span class="string">&#x27;Meiko&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="三-变量解构赋值"><a href="#三-变量解构赋值" class="headerlink" title="三. 变量解构赋值"></a>三. 变量解构赋值</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许按照一定模式从数组和对象中提取值,对变量进行复制</span></span><br><span class="line"><span class="comment">// 这被称为解构赋值</span></span><br><span class="line"><span class="comment">// 1. 数组的解构</span></span><br><span class="line"><span class="keyword">const</span> F4 = [<span class="string">&#x27;小沈阳&#x27;</span>, <span class="string">&#x27;刘能&#x27;</span>, <span class="string">&#x27;赵四&#x27;</span>, <span class="string">&#x27;宋小宝&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> [xiao, liu, zhao, song] = F4;</span><br><span class="line"><span class="built_in">console</span>.log(xiao);</span><br><span class="line"><span class="built_in">console</span>.log(liu);</span><br><span class="line"><span class="built_in">console</span>.log(zhao);</span><br><span class="line"><span class="built_in">console</span>.log(song);</span><br><span class="line"><span class="comment">//小沈阳</span></span><br><span class="line"><span class="comment">//刘能</span></span><br><span class="line"><span class="comment">//赵四</span></span><br><span class="line"><span class="comment">//宋小宝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 对象的解构</span></span><br><span class="line"><span class="keyword">const</span> zhao = &#123;</span><br><span class="line">  name: <span class="string">&#x27;赵本山&#x27;</span>,</span><br><span class="line">  age: <span class="string">&#x27;不详&#x27;</span>,</span><br><span class="line">  xiaopin: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我可以演小品&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;name, age, xiaopin&#125; = zhao;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br><span class="line"><span class="built_in">console</span>.log(age);</span><br><span class="line"><span class="built_in">console</span>.log(xiaopin);</span><br><span class="line">xiaopin();</span><br><span class="line"><span class="comment">//赵本山</span></span><br><span class="line"><span class="comment">//不详</span></span><br><span class="line"><span class="comment">//f ()&#123;</span></span><br><span class="line"><span class="comment">// console.log(&quot;我可以演小品&quot;);</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 我可以演小品</span></span><br></pre></td></tr></table></figure>

<h3 id="四-ES6引入新的声明字符串的方式-‘-‘-“-“"><a href="#四-ES6引入新的声明字符串的方式-‘-‘-“-“" class="headerlink" title="四. ES6引入新的声明字符串的方式 [``]  ‘ ‘  “ “"></a>四. ES6引入新的声明字符串的方式 [``]  ‘ ‘  “ “</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 声明</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`我也是一个字符串哦!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(str, <span class="keyword">typeof</span> str);</span><br><span class="line"><span class="comment">//我也是一个字符串哦! string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 内容中可以直接出现换行符</span></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">`&lt;ul&gt;</span></span><br><span class="line"><span class="string">						&lt;li&gt;沈腾&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;li&gt;玛丽&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;li&gt;魏翔&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;li&gt;艾伦&lt;li&gt;</span></span><br><span class="line"><span class="string">    				&lt;ul&gt;`</span>;</span><br><span class="line"><span class="comment">// 3. 变量拼接</span></span><br><span class="line"><span class="keyword">let</span> lovest = <span class="string">&#x27;魏翔&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> out = <span class="string">`<span class="subst">$&#123;lovest&#125;</span>是我心目中最搞笑的演员!!`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(out);</span><br><span class="line"><span class="comment">// 魏翔是我心目中最搞笑的演员!!</span></span><br></pre></td></tr></table></figure>

<h3 id="五-简化对象写法"><a href="#五-简化对象写法" class="headerlink" title="五. 简化对象写法"></a>五. 简化对象写法</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6 允许在大括号里面,直接写入变量和函数,作为对象的属性和方法</span></span><br><span class="line"><span class="comment">// 这样的书写更加简洁</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;尚硅谷&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> change = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;我们可以改变你&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  name, <span class="comment">// name: name,</span></span><br><span class="line">  change,</span><br><span class="line">  improve: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;我们可以提高你的技能&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(school);</span><br></pre></td></tr></table></figure>

<h3 id="六-箭头函数"><a href="#六-箭头函数" class="headerlink" title="六. 箭头函数"></a>六. 箭头函数</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES6允许使用[箭头] (=&gt;)定义函数</span></span><br><span class="line"><span class="comment">// 声明一个函数</span></span><br><span class="line"><span class="comment">// let fn = function()&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line"><span class="comment">// 声明</span></span><br><span class="line"><span class="keyword">let</span> fn = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 调用函数</span></span><br><span class="line"><span class="keyword">let</span> result = fn(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 和之前区别:</span></span><br><span class="line"><span class="comment">// 1. this 是静态的. this 始终指向函数声明时所在作用域下的this的值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> getName2 = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设置 window对象的name属性</span></span><br><span class="line"><span class="built_in">window</span>.name = <span class="string">&#x27;乐乐&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> school = &#123;</span><br><span class="line">  name: <span class="string">&quot;LELE&quot;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接调用</span></span><br><span class="line">getName();</span><br><span class="line">getName2();</span><br><span class="line"><span class="comment">// 乐乐</span></span><br><span class="line"><span class="comment">// 乐乐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// call方法调用</span></span><br><span class="line">getName.call(school);</span><br><span class="line">getName2.call(school);</span><br><span class="line"><span class="comment">// LELE</span></span><br><span class="line"><span class="comment">// 乐乐</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 不能作为构造实例化对象</span></span><br><span class="line"><span class="keyword">let</span> Person = <span class="function">(<span class="params">name, age</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> me = <span class="keyword">new</span> Person(<span class="string">&#x27;xiao&#x27;</span>, <span class="number">30</span>);</span><br><span class="line"><span class="built_in">console</span>.log(me);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 不能使用arguments变量</span></span><br></pre></td></tr></table></figure>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC07-Ajax</title>
    <url>/2021/03/06/SpringMVC07%20Ajax/</url>
    <content><![CDATA[<p>[转发]</p>
<p>Ajax研究</p>
<blockquote>
<p>简介</p>
</blockquote>
<ul>
<li><p><strong>AJAX = Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）。</strong></p>
</li>
<li><p>AJAX 是一种在无需重新加载整个网页的情况下，能够更新部分网页的技术。</p>
</li>
<li><p><strong>Ajax 不是一种新的编程语言，而是一种用于创建更好更快以及交互性更强的Web应用程序的技术。</strong></p>
</li>
<li><p>在 2005 年，Google 通过其 Google Suggest 使 AJAX 变得流行起来。Google Suggest能够自动帮你完成搜索单词。</p>
</li>
<li><p>Google Suggest 使用 AJAX 创造出动态性极强的 web 界面：当您在谷歌的搜索框输入关键字时，JavaScript 会把这些字符发送到服务器，然后服务器会返回一个搜索建议的列表。</p>
</li>
<li><p>就和国内百度的搜索框一样!</p>
</li>
<li><p>传统的网页(即不用ajax技术的网页)，想要更新内容或者提交一个表单，都需要重新加载整个网页。</p>
</li>
<li><p>使用ajax技术的网页，通过在后台服务器进行少量的数据交换，就可以实现异步局部更新。</p>
</li>
<li><p>使用Ajax，用户可以创建接近本地桌面应用的直接、高可用、更丰富、更动态的Web用户界面。</p>
</li>
</ul>
<blockquote>
<p>伪造Ajax</p>
</blockquote>
<p>我们可以使用前端的一个标签来伪造一个ajax的样子。iframe标签</p>
<p>1、新建一个module ：sspringmvc-06-ajax ， 导入web支持！</p>
<p>2、编写一个 ajax-frame.html 使用 iframe 测试，感受下效果</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head lang&#x3D;&quot;en&quot;&gt;</span><br><span class="line">   &lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;kuangshen&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class="line">   window.onload &#x3D; function()&#123;</span><br><span class="line">       var myDate &#x3D; new Date();</span><br><span class="line">       document.getElementById(&#39;currentTime&#39;).innerText &#x3D; myDate.getTime();</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">   function LoadPage()&#123;</span><br><span class="line">       var targetUrl &#x3D;  document.getElementById(&#39;url&#39;).value;</span><br><span class="line">       console.log(targetUrl);</span><br><span class="line">       document.getElementById(&quot;iframePosition&quot;).src &#x3D; targetUrl;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;p&gt;请输入要加载的地址：&lt;span id&#x3D;&quot;currentTime&quot;&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br><span class="line">   &lt;p&gt;</span><br><span class="line">       &lt;input id&#x3D;&quot;url&quot; type&#x3D;&quot;text&quot; value&#x3D;&quot;https:&#x2F;&#x2F;www.baidu.com&#x2F;&quot;&#x2F;&gt;</span><br><span class="line">       &lt;input type&#x3D;&quot;button&quot; value&#x3D;&quot;提交&quot; onclick&#x3D;&quot;LoadPage()&quot;&gt;</span><br><span class="line">   &lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line">   &lt;h3&gt;加载页面位置：&lt;&#x2F;h3&gt;</span><br><span class="line">   &lt;iframe id&#x3D;&quot;iframePosition&quot; style&#x3D;&quot;width: 100%;height: 500px;&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>3、使用IDEA开浏览器测试一下！</p>
<p><strong>利用AJAX可以做：</strong></p>
<ul>
<li>注册时，输入用户名自动检测用户是否已经存在。</li>
<li>登陆时，提示用户名密码错误</li>
<li>删除数据行时，将行ID发送到后台，后台在数据库中删除，数据库删除成功后，在页面DOM中将数据行也删除。</li>
<li>….等等</li>
</ul>
<blockquote>
<p>jQuery.ajax</p>
</blockquote>
<p>纯JS原生实现Ajax我们不去讲解这里，直接使用jquery提供的，方便学习和使用，避免重复造轮子，有兴趣的同学可以去了解下JS原生XMLHttpRequest ！</p>
<p>Ajax的核心是XMLHttpRequest对象(XHR)。XHR为向服务器发送请求和解析服务器响应提供了接口。能够以异步方式从服务器获取新数据。</p>
<p>jQuery 提供多个与 AJAX 有关的方法。</p>
<p>通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON – 同时您能够把这些外部数据直接载入网页的被选元素中。</p>
<p>jQuery 不是生产者，而是大自然搬运工。</p>
<p>jQuery Ajax本质就是 XMLHttpRequest，对他进行了封装，方便调用！</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">jQuery.ajax(...)</span><br><span class="line">      部分参数：</span><br><span class="line">            url：请求地址</span><br><span class="line">            type：请求方式，GET、POST（1.9.0之后用method）</span><br><span class="line">        headers：请求头</span><br><span class="line">            data：要发送的数据</span><br><span class="line">    contentType：即将发送信息至服务器的内容编码类型(默认: &quot;application&#x2F;x-www-form-urlencoded; charset&#x3D;UTF-8&quot;)</span><br><span class="line">          async：是否异步</span><br><span class="line">        timeout：设置请求超时时间（毫秒）</span><br><span class="line">      beforeSend：发送请求前执行的函数(全局)</span><br><span class="line">        complete：完成之后执行的回调函数(全局)</span><br><span class="line">        success：成功之后执行的回调函数(全局)</span><br><span class="line">          error：失败之后执行的回调函数(全局)</span><br><span class="line">        accepts：通过请求头发送给服务器，告诉服务器当前客户端可接受的数据类型</span><br><span class="line">        dataType：将服务器端返回的数据转换成指定类型</span><br><span class="line">          &quot;xml&quot;: 将服务器端返回的内容转换成xml格式</span><br><span class="line">          &quot;text&quot;: 将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;html&quot;: 将服务器端返回的内容转换成普通文本格式，在插入DOM中时，如果包含JavaScript标签，则会尝试去执行。</span><br><span class="line">        &quot;script&quot;: 尝试将返回值当作JavaScript去执行，然后再将服务器端返回的内容转换成普通文本格式</span><br><span class="line">          &quot;json&quot;: 将服务器端返回的内容转换成相应的JavaScript对象</span><br><span class="line">        &quot;jsonp&quot;: JSONP 格式使用 JSONP 形式调用函数时，如 &quot;myurl?callback&#x3D;?&quot; jQuery 将自动替换 ? 为正确的函数名，以执行回调函数</span><br></pre></td></tr></table></figure>

<p><strong>我们来个简单的测试，使用最原始的HttpServletResponse处理 , .最简单 , 最通用</strong></p>
<p>1、配置web.xml 和 springmvc的配置文件，复制上面案例的即可 【记得静态资源过滤和注解驱动配置上】</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&quot;1.0&quot; encoding&#x3D;&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;beans xmlns&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&quot;</span><br><span class="line">      xmlns:xsi&#x3D;&quot;http:&#x2F;&#x2F;www.w3.org&#x2F;2001&#x2F;XMLSchema-instance&quot;</span><br><span class="line">      xmlns:context&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&quot;</span><br><span class="line">      xmlns:mvc&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&quot;</span><br><span class="line">      xsi:schemaLocation&#x3D;&quot;http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;beans&#x2F;spring-beans.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;context&#x2F;spring-context.xsd</span><br><span class="line">       http:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc</span><br><span class="line">       https:&#x2F;&#x2F;www.springframework.org&#x2F;schema&#x2F;mvc&#x2F;spring-mvc.xsd&quot;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 自动扫描指定的包，下面所有注解类交给IOC容器管理 --&gt;</span><br><span class="line">   &lt;context:component-scan base-package&#x3D;&quot;com.kuang.controller&quot;&#x2F;&gt;</span><br><span class="line">   &lt;mvc:default-servlet-handler &#x2F;&gt;</span><br><span class="line">   &lt;mvc:annotation-driven &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">   &lt;!-- 视图解析器 --&gt;</span><br><span class="line">   &lt;bean class&#x3D;&quot;org.springframework.web.servlet.view.InternalResourceViewResolver&quot;</span><br><span class="line">         id&#x3D;&quot;internalResourceViewResolver&quot;&gt;</span><br><span class="line">       &lt;!-- 前缀 --&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;prefix&quot; value&#x3D;&quot;&#x2F;WEB-INF&#x2F;jsp&#x2F;&quot; &#x2F;&gt;</span><br><span class="line">       &lt;!-- 后缀 --&gt;</span><br><span class="line">       &lt;property name&#x3D;&quot;suffix&quot; value&#x3D;&quot;.jsp&quot; &#x2F;&gt;</span><br><span class="line">   &lt;&#x2F;bean&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;beans&gt;</span><br></pre></td></tr></table></figure>

<p>2、编写一个AjaxController</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Controller</span><br><span class="line">public class AjaxController &#123;</span><br><span class="line"></span><br><span class="line">   @RequestMapping(&quot;&#x2F;a1&quot;)</span><br><span class="line">   public void ajax1(String name , HttpServletResponse response) throws IOException &#123;</span><br><span class="line">       if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">           response.getWriter().print(&quot;true&quot;);</span><br><span class="line">      &#125;else&#123;</span><br><span class="line">           response.getWriter().print(&quot;false&quot;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、导入jquery ， 可以使用在线的CDN ， 也可以下载导入</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>4、编写index.jsp测试</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line"> &lt;head&gt;</span><br><span class="line">   &lt;title&gt;$Title$&lt;&#x2F;title&gt;</span><br><span class="line">  &lt;%--&lt;script src&#x3D;&quot;https:&#x2F;&#x2F;code.jquery.com&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;--%&gt;</span><br><span class="line">   &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line">       function a1()&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a1&quot;,</span><br><span class="line">               data:&#123;&#39;name&#39;:$(&quot;#txtName&quot;).val()&#125;,</span><br><span class="line">               success:function (data,status) &#123;</span><br><span class="line">                   alert(data);</span><br><span class="line">                   alert(status);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line"> &lt;&#x2F;head&gt;</span><br><span class="line"> &lt;body&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--onblur：失去焦点触发事件--%&gt;</span><br><span class="line">用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;txtName&quot; onblur&#x3D;&quot;a1()&quot;&#x2F;&gt;</span><br><span class="line"></span><br><span class="line"> &lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>5、启动tomcat测试！打开浏览器的控制台，当我们鼠标离开输入框的时候，可以看到发出了一个ajax的请求！是后台返回给我们的结果！测试成功！</p>
<p><strong>Springmvc实现</strong></p>
<p>实体类user</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@Data</span><br><span class="line">@AllArgsConstructor</span><br><span class="line">@NoArgsConstructor</span><br><span class="line">public class User &#123;</span><br><span class="line"></span><br><span class="line">   private String name;</span><br><span class="line">   private int age;</span><br><span class="line">   private String sex;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>我们来获取一个集合对象，展示到前端页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;a2&quot;)</span><br><span class="line">public List&lt;User&gt; ajax2()&#123;</span><br><span class="line">   List&lt;User&gt; list &#x3D; new ArrayList&lt;User&gt;();</span><br><span class="line">   list.add(new User(&quot;秦疆1号&quot;,3,&quot;男&quot;));</span><br><span class="line">   list.add(new User(&quot;秦疆2号&quot;,3,&quot;男&quot;));</span><br><span class="line">   list.add(new User(&quot;秦疆3号&quot;,3,&quot;男&quot;));</span><br><span class="line">   return list; &#x2F;&#x2F;由于@RestController注解，将list转成json格式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端页面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;Title&lt;&#x2F;title&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;button&quot; id&#x3D;&quot;btn&quot; value&#x3D;&quot;获取数据&quot;&#x2F;&gt;</span><br><span class="line">&lt;table width&#x3D;&quot;80%&quot; align&#x3D;&quot;center&quot;&gt;</span><br><span class="line">   &lt;tr&gt;</span><br><span class="line">       &lt;td&gt;姓名&lt;&#x2F;td&gt;</span><br><span class="line">       &lt;td&gt;年龄&lt;&#x2F;td&gt;</span><br><span class="line">       &lt;td&gt;性别&lt;&#x2F;td&gt;</span><br><span class="line">   &lt;&#x2F;tr&gt;</span><br><span class="line">   &lt;tbody id&#x3D;&quot;content&quot;&gt;</span><br><span class="line">   &lt;&#x2F;tbody&gt;</span><br><span class="line">&lt;&#x2F;table&gt;</span><br><span class="line"></span><br><span class="line">&lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line"></span><br><span class="line">   $(function () &#123;</span><br><span class="line">       $(&quot;#btn&quot;).click(function () &#123;</span><br><span class="line">           $.post(&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a2&quot;,function (data) &#123;</span><br><span class="line">               console.log(data)</span><br><span class="line">               var html&#x3D;&quot;&quot;;</span><br><span class="line">               for (var i &#x3D; 0; i &lt;data.length ; i++) &#123;</span><br><span class="line">                   html+&#x3D; &quot;&lt;tr&gt;&quot; +</span><br><span class="line">                       &quot;&lt;td&gt;&quot; + data[i].name + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                       &quot;&lt;td&gt;&quot; + data[i].age + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                       &quot;&lt;td&gt;&quot; + data[i].sex + &quot;&lt;&#x2F;td&gt;&quot; +</span><br><span class="line">                       &quot;&lt;&#x2F;tr&gt;&quot;</span><br><span class="line">              &#125;</span><br><span class="line">               $(&quot;#content&quot;).html(html);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>成功实现了数据回显！可以体会一下Ajax的好处！</strong></p>
<blockquote>
<p>注册提示效果</p>
</blockquote>
<p>我们再测试一个小Demo，思考一下我们平时注册时候，输入框后面的实时提示怎么做到的；如何优化</p>
<p>我们写一个Controller</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">@RequestMapping(&quot;&#x2F;a3&quot;)</span><br><span class="line">public String ajax3(String name,String pwd)&#123;</span><br><span class="line">   String msg &#x3D; &quot;&quot;;</span><br><span class="line">   &#x2F;&#x2F;模拟数据库中存在数据</span><br><span class="line">   if (name!&#x3D;null)&#123;</span><br><span class="line">       if (&quot;admin&quot;.equals(name))&#123;</span><br><span class="line">           msg &#x3D; &quot;OK&quot;;</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">           msg &#x3D; &quot;用户名输入错误&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   if (pwd!&#x3D;null)&#123;</span><br><span class="line">       if (&quot;123456&quot;.equals(pwd))&#123;</span><br><span class="line">           msg &#x3D; &quot;OK&quot;;</span><br><span class="line">      &#125;else &#123;</span><br><span class="line">           msg &#x3D; &quot;密码输入有误&quot;;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">   return msg; &#x2F;&#x2F;由于@RestController注解，将msg转成json格式返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>前端页面 login.jsp</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType&#x3D;&quot;text&#x2F;html;charset&#x3D;UTF-8&quot; language&#x3D;&quot;java&quot; %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;title&gt;ajax&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;script src&#x3D;&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;statics&#x2F;js&#x2F;jquery-3.1.1.min.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       function a1()&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,</span><br><span class="line">               data:&#123;&#39;name&#39;:$(&quot;#name&quot;).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   if (data.toString()&#x3D;&#x3D;&#39;OK&#39;)&#123;</span><br><span class="line">                       $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                  &#125;else &#123;</span><br><span class="line">                       $(&quot;#userInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(&quot;#userInfo&quot;).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">       function a2()&#123;</span><br><span class="line">           $.post(&#123;</span><br><span class="line">               url:&quot;$&#123;pageContext.request.contextPath&#125;&#x2F;a3&quot;,</span><br><span class="line">               data:&#123;&#39;pwd&#39;:$(&quot;#pwd&quot;).val()&#125;,</span><br><span class="line">               success:function (data) &#123;</span><br><span class="line">                   if (data.toString()&#x3D;&#x3D;&#39;OK&#39;)&#123;</span><br><span class="line">                       $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;green&quot;);</span><br><span class="line">                  &#125;else &#123;</span><br><span class="line">                       $(&quot;#pwdInfo&quot;).css(&quot;color&quot;,&quot;red&quot;);</span><br><span class="line">                  &#125;</span><br><span class="line">                   $(&quot;#pwdInfo&quot;).html(data);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  用户名:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;name&quot; onblur&#x3D;&quot;a1()&quot;&#x2F;&gt;</span><br><span class="line">   &lt;span id&#x3D;&quot;userInfo&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">  密码:&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;pwd&quot; onblur&#x3D;&quot;a2()&quot;&#x2F;&gt;</span><br><span class="line">   &lt;span id&#x3D;&quot;pwdInfo&quot;&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>

<p>【记得处理json乱码问题】</p>
<p>测试一下效果，动态请求响应，局部刷新，就是如此！</p>
<p><img src="https://mmbiz.qpic.cn/mmbiz_png/uJDAUKrGC7KZibKx8mbpgp9uicB6eJRNyNtU7ek8sJ1kpbFia5e5IoMRtGFwBiaylw7iakYBws0icEAqyH22l6Y7FMzQ/640?wx_fmt=png" alt="图片"></p>
<blockquote>
<p>获取baidu接口Demo</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE HTML&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">   &lt;meta http-equiv&#x3D;&quot;Content-Type&quot; content&#x3D;&quot;text&#x2F;html; charset&#x3D;utf-8&quot;&gt;</span><br><span class="line">   &lt;title&gt;JSONP百度搜索&lt;&#x2F;title&gt;</span><br><span class="line">   &lt;style&gt;</span><br><span class="line">       #q&#123;</span><br><span class="line">           width: 500px;</span><br><span class="line">           height: 30px;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           display: block;</span><br><span class="line">           margin: 0 auto;</span><br><span class="line">           padding: 0 10px;</span><br><span class="line">           font-size: 14px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul&#123;</span><br><span class="line">           width: 520px;</span><br><span class="line">           list-style: none;</span><br><span class="line">           margin: 0 auto;</span><br><span class="line">           padding: 0;</span><br><span class="line">           border:1px solid #ddd;</span><br><span class="line">           margin-top: -1px;</span><br><span class="line">           display: none;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li&#123;</span><br><span class="line">           line-height: 30px;</span><br><span class="line">           padding: 0 10px;</span><br><span class="line">      &#125;</span><br><span class="line">       #ul li:hover&#123;</span><br><span class="line">           background-color: #f60;</span><br><span class="line">           color: #fff;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;&#x2F;style&gt;</span><br><span class="line">   &lt;script&gt;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 2.步骤二</span><br><span class="line">       &#x2F;&#x2F; 定义demo函数 (分析接口、数据)</span><br><span class="line">       function demo(data)&#123;</span><br><span class="line">           var Ul &#x3D; document.getElementById(&#39;ul&#39;);</span><br><span class="line">           var html &#x3D; &#39;&#39;;</span><br><span class="line">           &#x2F;&#x2F; 如果搜索数据存在 把内容添加进去</span><br><span class="line">           if (data.s.length) &#123;</span><br><span class="line">               &#x2F;&#x2F; 隐藏掉的ul显示出来</span><br><span class="line">               Ul.style.display &#x3D; &#39;block&#39;;</span><br><span class="line">               &#x2F;&#x2F; 搜索到的数据循环追加到li里</span><br><span class="line">               for(var i &#x3D; 0;i&lt;data.s.length;i++)&#123;</span><br><span class="line">                   html +&#x3D; &#39;&lt;li&gt;&#39;+data.s[i]+&#39;&lt;&#x2F;li&gt;&#39;;</span><br><span class="line">              &#125;</span><br><span class="line">               &#x2F;&#x2F; 循环的li写入ul</span><br><span class="line">               Ul.innerHTML &#x3D; html;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">       &#x2F;&#x2F; 1.步骤一</span><br><span class="line">       window.onload &#x3D; function()&#123;</span><br><span class="line">           &#x2F;&#x2F; 获取输入框和ul</span><br><span class="line">           var Q &#x3D; document.getElementById(&#39;q&#39;);</span><br><span class="line">           var Ul &#x3D; document.getElementById(&#39;ul&#39;);</span><br><span class="line"></span><br><span class="line">           &#x2F;&#x2F; 事件鼠标抬起时候</span><br><span class="line">           Q.onkeyup &#x3D; function()&#123;</span><br><span class="line">               &#x2F;&#x2F; 如果输入框不等于空</span><br><span class="line">               if (this.value !&#x3D; &#39;&#39;) &#123;</span><br><span class="line">                   &#x2F;&#x2F; ☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆JSONPz重点☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆☆</span><br><span class="line">                   &#x2F;&#x2F; 创建标签</span><br><span class="line">                   var script &#x3D; document.createElement(&#39;script&#39;);</span><br><span class="line">                   &#x2F;&#x2F;给定要跨域的地址 赋值给src</span><br><span class="line">                   &#x2F;&#x2F;这里是要请求的跨域的地址 我写的是百度搜索的跨域地址</span><br><span class="line">                   script.src &#x3D; &#39;https:&#x2F;&#x2F;sp0.baidu.com&#x2F;5a1Fazu8AA54nxGko9WTAnF6hhy&#x2F;su?wd&#x3D;&#39;+this.value+&#39;&amp;cb&#x3D;demo&#39;;</span><br><span class="line">                   &#x2F;&#x2F; 将组合好的带src的script标签追加到body里</span><br><span class="line">                   document.body.appendChild(script);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">   &lt;&#x2F;script&gt;</span><br><span class="line">&lt;&#x2F;head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;text&quot; id&#x3D;&quot;q&quot; &#x2F;&gt;</span><br><span class="line">&lt;ul id&#x3D;&quot;ul&quot;&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ul&gt;</span><br><span class="line">&lt;&#x2F;body&gt;</span><br><span class="line">&lt;&#x2F;html&gt;</span><br></pre></td></tr></table></figure>



<p>Ajax在我们开发中十分重要，一定要学会使用！</p>
<p>end</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>ajax</category>
      </categories>
      <tags>
        <tag>ajax</tag>
      </tags>
  </entry>
  <entry>
    <title>vue生命周期</title>
    <url>/2021/04/20/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
    <content><![CDATA[<p>生命周期：事物从诞生到消亡的整个过程</p>
<p>debug开发的版本</p>
<p>build:release稳定的版本</p>
<p>Vue生命周期：（钩子函数）</p>
<p>new Vue会执行一系列操作，通过钩子回调函数call hook</p>
<p>created：可以做网络请求</p>
<p>mounted</p>
<p>vbom更新</p>
<p>destroyed</p>
<p><img src="/2021/04/20/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1619080274893.webp"></p>
<p><img src="/2021/04/20/Vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/vue%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F1-1619074903376-1619080278796.webp"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js-MongoDB</title>
    <url>/2021/03/04/%5B%E8%BD%AC%E5%8F%91%5DNode.js%20%E8%BF%9E%E6%8E%A5%20MongoDB/</url>
    <content><![CDATA[<p>[转发]</p>
<p>MongoDB是一种文档导向数据库管理系统，由C++撰写而成。</p>
<h3 id="安装驱动"><a href="#安装驱动" class="headerlink" title="安装驱动"></a>安装驱动</h3><p>使用淘宝定制的 cnpm 命令](<a href="https://www.runoob.com/nodejs/nodejs-npm.html#taobaonpm)%E8%BF%9B%E8%A1%8C%E5%AE%89%E8%A3%85%EF%BC%9A">https://www.runoob.com/nodejs/nodejs-npm.html#taobaonpm)进行安装：</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ cnpm install mongodb</span><br></pre></td></tr></table></figure>

<p>接下来我们来实现增删改查功能。</p>
<hr>
<h2 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h2><p>要在 MongoDB 中创建一个数据库，首先我们需要创建一个 MongoClient 对象，然后配置好指定的 URL 和 端口号。</p>
<p>如果数据库不存在，MongoDB 将创建数据库并建立连接。</p>
<h2 id="创建连接"><a href="#创建连接" class="headerlink" title="创建连接"></a>创建连接</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/runoob”;  MongoClient.connect(url, function(err, db) {  if (err) throw err;  console.log(“数据库已创建!”);  db.close(); });</p>
<hr>
<h2 id="创建集合"><a href="#创建集合" class="headerlink" title="创建集合"></a>创建集合</h2><p>我们可以使用 createCollection() 方法来创建集合：</p>
<h2 id="创建集合-1"><a href="#创建集合-1" class="headerlink" title="创建集合"></a>创建集合</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = ‘mongodb://localhost:27017/runoob’; MongoClient.connect(url, function (err, db) {    if (err) throw err;    console.log(‘数据库已创建’);    var dbase = db.db(“runoob”);    dbase.createCollection(‘site’, function (err, res) {        if (err) throw err;        console.log(“创建集合!”);        db.close();    }); });</p>
<hr>
<h2 id="数据库操作-CURD"><a href="#数据库操作-CURD" class="headerlink" title="数据库操作( CURD )"></a>数据库操作( CURD )</h2><p>与 MySQL 不同的是 MongoDB 会自动创建数据库和集合，所以使用前我们不需要手动去创建。</p>
<h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><p>以下实例我们连接数据库 runoob 的 site 表，并插入一条数据条数据，使用 **insertOne()**：</p>
<h2 id="插入一条数据"><a href="#插入一条数据" class="headerlink" title="插入一条数据"></a>插入一条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var myobj = { name: “菜鸟教程”, url: “<a href="http://www.runoob&quot;/">www.runoob&quot;</a> };    dbo.collection(“site”).insertOne(myobj, function(err, res) {        if (err) throw err;        console.log(“文档插入成功”);        db.close();    }); });</p>
<p>执行以下命令输出就结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">$ node test.js</span><br><span class="line">文档插入成功</span><br></pre></td></tr></table></figure>

<p>从输出结果来看，数据已插入成功。</p>
<p>我们也可以打开 MongoDB 的客户端查看数据，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; show dbs</span><br><span class="line">runoob  0.000GB          # 自动创建了 runoob 数据库</span><br><span class="line">&gt; show tables</span><br><span class="line">site                     # 自动创建了 site 集合（数据表）</span><br><span class="line">&gt; db.site.find()</span><br><span class="line">&#123; &quot;_id&quot; : ObjectId(&quot;5a794e36763eb821b24db854&quot;), &quot;name&quot; : &quot;菜鸟教程&quot;, &quot;url&quot; : &quot;www.runoob&quot; &#125;</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure>

<p>如果要插入多条数据可以使用 **insertMany()**：</p>
<h2 id="插入多条数据"><a href="#插入多条数据" class="headerlink" title="插入多条数据"></a>插入多条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var myobj =  [        { name: ‘菜鸟工具’, url: ‘<a href="https://c.runoob.com&/#39;">https://c.runoob.com&#39;</a>, type: ‘cn’},        { name: ‘Google’, url: ‘<a href="https://www.google.com&/#39;">https://www.google.com&#39;</a>, type: ‘en’},        { name: ‘Facebook’, url: ‘<a href="https://www.google.com&/#39;">https://www.google.com&#39;</a>, type: ‘en’}       ];    dbo.collection(“site”).insertMany(myobj, function(err, res) {        if (err) throw err;        console.log(“插入的文档数量为: “ + res.insertedCount);        db.close();    }); });</p>
<p>res.insertedCount 为插入的条数。</p>
<h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><p>可以使用 find() 来查找数据, find() 可以返回匹配条件的所有数据。 如果未指定条件，find() 返回集合中的所有数据。</p>
<h2 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    dbo.collection(“site”). find({}).toArray(function(err, result) { // 返回集合中所有数据        if (err) throw err;        console.log(result);        db.close();    }); });</p>
<p>以下实例检索 name 为 “菜鸟教程” 的实例：</p>
<h2 id="查询指定条件的数据"><a href="#查询指定条件的数据" class="headerlink" title="查询指定条件的数据"></a>查询指定条件的数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);     var whereStr = {“name”:’菜鸟教程’};  // 查询条件    dbo.collection(“site”).find(whereStr).toArray(function(err, result) {        if (err) throw err;        console.log(result);        db.close();    }); });</p>
<p>执行以下命令输出就结果为：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[ &#123; _id: 5a794e36763eb821b24db854,</span><br><span class="line">    name: &#39;菜鸟教程&#39;,</span><br><span class="line">    url: &#39;www.runoob&#39; &#125; ]</span><br></pre></td></tr></table></figure>

<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>我们也可以对数据库的数据进行修改，以下实例将 name 为 “菜鸟教程” 的 url 改为 <a href="https://www.runoob.com：">https://www.runoob.com：</a></p>
<h2 id="更新一条数据"><a href="#更新一条数据" class="headerlink" title="更新一条数据"></a>更新一条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var whereStr = {“name”:’菜鸟教程’};  // 查询条件    var updateStr = {$set: { “url” : “<a href="https://www.runoob.com&quot;/">https://www.runoob.com&quot;</a> }};    dbo.collection(“site”).updateOne(whereStr, updateStr, function(err, res) {        if (err) throw err;        console.log(“文档更新成功”);        db.close();    }); });</p>
<p>执行成功后，进入 mongo 管理工具查看数据已修改：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.site.find().pretty()</span><br><span class="line">&#123;</span><br><span class="line">    &quot;_id&quot; : ObjectId(&quot;5a794e36763eb821b24db854&quot;),</span><br><span class="line">    &quot;name&quot; : &quot;菜鸟教程&quot;,</span><br><span class="line">    &quot;url&quot; : &quot;https:&#x2F;&#x2F;www.runoob.com&quot;     &#x2F;&#x2F; 已修改为 https</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果要更新所有符合条的文档数据可以使用 **updateMany()**：</p>
<h2 id="更新多条数据"><a href="#更新多条数据" class="headerlink" title="更新多条数据"></a>更新多条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var whereStr = {“type”:’en’};  // 查询条件    var updateStr = {$set: { “url” : “<a href="https://www.runoob.com&quot;/">https://www.runoob.com&quot;</a> }};    dbo.collection(“site”).updateMany(whereStr, updateStr, function(err, res) {        if (err) throw err;         console.log(res.result.nModified + “ 条文档被更新”);        db.close();    }); });</p>
<p>result.nModified 为更新的条数。</p>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>以下实例将 name 为 “菜鸟教程” 的数据删除 :</p>
<h2 id="删除一条数据"><a href="#删除一条数据" class="headerlink" title="删除一条数据"></a>删除一条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var whereStr = {“name”:’菜鸟教程’};  // 查询条件    dbo.collection(“site”).deleteOne(whereStr, function(err, obj) {        if (err) throw err;        console.log(“文档删除成功”);        db.close();    }); });</p>
<p>执行成功后，进入 mongo 管理工具查看数据已删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt; db.site.find()</span><br><span class="line">&gt; </span><br></pre></td></tr></table></figure>

<p>如果要删除多条语句可以使用 <strong>deleteMany()</strong> 方法</p>
<p>以下实例将 type 为 en 的所有数据删除 :</p>
<h2 id="删除多条数据"><a href="#删除多条数据" class="headerlink" title="删除多条数据"></a>删除多条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var whereStr = { type: “en” };  // 查询条件    dbo.collection(“site”).deleteMany(whereStr, function(err, obj) {        if (err) throw err;        console.log(obj.result.n + “ 条文档被删除”);        db.close();    }); });</p>
<p>obj.result.n 删除的条数。</p>
<h3 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h3><p>排序 使用 sort() 方法，该方法接受一个参数，规定是升序(1)还是降序(-1)。</p>
<p>例如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123; type: 1 &#125;  &#x2F;&#x2F; 按 type 字段升序</span><br><span class="line">&#123; type: -1 &#125; &#x2F;&#x2F; 按 type 字段降序</span><br></pre></td></tr></table></figure>

<p>按 type 升序排列:</p>
<h2 id="排序-1"><a href="#排序-1" class="headerlink" title="排序"></a>排序</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    var mysort = { type: 1 };    dbo.collection(“site”).find().sort(mysort).toArray(function(err, result) {        if (err) throw err;        console.log(result);        db.close();    }); });</p>
<h3 id="查询分页"><a href="#查询分页" class="headerlink" title="查询分页"></a>查询分页</h3><p>如果要设置指定的返回条数可以使用 <strong>limit()</strong> 方法，该方法只接受一个参数，指定了返回的条数。</p>
<h2 id="limit-：读取两条数据"><a href="#limit-：读取两条数据" class="headerlink" title="limit()：读取两条数据"></a>limit()：读取两条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    dbo.collection(“site”).find().limit(2).toArray(function(err, result) {        if (err) throw err;        console.log(result);        db.close();  }); });</p>
<p>如果要指定跳过的条数，可以使用 <strong>skip()</strong> 方法。</p>
<h2 id="skip-跳过前面两条数据，读取两条数据"><a href="#skip-跳过前面两条数据，读取两条数据" class="headerlink" title="skip(): 跳过前面两条数据，读取两条数据"></a>skip(): 跳过前面两条数据，读取两条数据</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    dbo.collection(“site”).find().skip(2).limit(2).toArray(function(err, result) {        if (err) throw err;        console.log(result);        db.close();  }); });</p>
<h3 id="连接操作"><a href="#连接操作" class="headerlink" title="连接操作"></a>连接操作</h3><p>mongoDB 不是一个关系型数据库，但我们可以使用 <strong>$lookup</strong> 来实现左连接。</p>
<p>例如我们有两个集合数据分别为：</p>
<p>集合1：orders</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; _id: 1, product_id: 154, status: 1 &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>集合2：products</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123; _id: 154, name: &#39;笔记本电脑&#39; &#125;,</span><br><span class="line">  &#123; _id: 155, name: &#39;耳机&#39; &#125;,</span><br><span class="line">  &#123; _id: 156, name: &#39;台式电脑&#39; &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h2 id="lookup-实现左连接"><a href="#lookup-实现左连接" class="headerlink" title="$lookup 实现左连接"></a>$lookup 实现左连接</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://127.0.0.1:27017/“;  MongoClient.connect(url, function(err, db) {  if (err) throw err;  var dbo = db.db(“runoob”);  dbo.collection(‘orders’).aggregate([    { $lookup:       {         from: ‘products’,            // 右集合         localField: ‘product_id’,    // 左集合 join 字段         foreignField: ‘_id’,         // 右集合 join 字段         as: ‘orderdetails’           // 新生成字段（类型array）       }     }    ]).toArray(function(err, res) {    if (err) throw err;    console.log(JSON.stringify(res));    db.close();  }); });</p>
<h3 id="删除集合"><a href="#删除集合" class="headerlink" title="删除集合"></a>删除集合</h3><p>我们可以使用 <strong>drop()</strong> 方法来删除集合：</p>
<h2 id="drop"><a href="#drop" class="headerlink" title="drop()"></a>drop()</h2><p>var MongoClient = require(‘mongodb’).MongoClient; var url = “mongodb://localhost:27017/“;  MongoClient.connect(url, function(err, db) {    if (err) throw err;    var dbo = db.db(“runoob”);    // 删除 test 集合    dbo.collection(“test”).drop(function(err, delOK) {  // 执行成功 delOK 返回 true，否则返回 false        if (err) throw err;        if (delOK) console.log(“集合已删除”);        db.close();    }); });</p>
<hr>
<h2 id="使用-Promise"><a href="#使用-Promise" class="headerlink" title="使用 Promise"></a>使用 Promise</h2><p>Promise 是一个 ECMAScript 6 提供的类，目的是更加优雅地书写复杂的异步任务。</p>
<p>如果你还不了解 Promise，可以参考 <a href="https://www.runoob.com/js/js-promise.html">JavaScript Promise</a>。</p>
<p>以下实例使用 Promise 创建集合：</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>const MongoClient = require(“mongodb”).MongoClient; const url = “mongodb://localhost/runoob”; MongoClient.connect(url).then((conn) =&gt; {    console.log(“数据库已连接”);    var dbase = conn.db(“runoob”);    dbase.createCollection(“site”).then((res) =&gt; {        console.log(“已创建集合”);    }).catch((err) =&gt; {        console.log(“数据库操作错误”);    }).finally(() =&gt; {        conn.close();    }); }).catch((err) =&gt; {    console.log(“数据库连接失败”); });</p>
<h3 id="Promise-数据操作"><a href="#Promise-数据操作" class="headerlink" title="Promise 数据操作"></a>Promise 数据操作</h3><p>现在我们在一个程序中实现四个连续操作：增加 、查询 、更改 、删除。</p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>const MongoClient = require(“mongodb”).MongoClient; const url = “mongodb://localhost/“; MongoClient.connect(url).then((conn) =&gt; {    console.log(“数据库已连接”);    const test = conn.db(“testdb”).collection(“test”);    // 增加    test.insertOne({ “site”: “runoob.com” }).then((res) =&gt; {        // 查询        return test.find().toArray().then((arr) =&gt; {            console.log(arr);        });    }).then(() =&gt; {        // 更改        return test.updateMany({ “site”: “runoob.com” },            { $set: { “site”: “example.com” } });    }).then((res) =&gt; {        // 查询        return test.find().toArray().then((arr) =&gt; {            console.log(arr);        });    }).then(() =&gt; {        // 删除        return test.deleteMany({ “site”: “example.com” });    }).then((res) =&gt; {        // 查询        return test.find().toArray().then((arr) =&gt; {            console.log(arr);        });    }).catch((err) =&gt; {        console.log(“数据操作失败” + err.message);    }).finally(() =&gt; {        conn.close();    }); }).catch((err) =&gt; {    console.log(“数据库连接失败”); });</p>
<p>执行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库已连接</span><br><span class="line">[ &#123; _id: 5f1664966833e531d83d3ac6, site: &#39;runoob.com&#39; &#125; ]</span><br><span class="line">[ &#123; _id: 5f1664966833e531d83d3ac6, site: &#39;example.com&#39; &#125; ]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<h3 id="用异步函数实现相同的数据操作"><a href="#用异步函数实现相同的数据操作" class="headerlink" title="用异步函数实现相同的数据操作"></a>用异步函数实现相同的数据操作</h3><h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><p>const MongoClient = require(“mongodb”).MongoClient; const url = “mongodb://localhost/“;  async function dataOperate() {    var conn = null;    try {        conn = await MongoClient.connect(url);        console.log(“数据库已连接”);        const test = conn.db(“testdb”).collection(“test”);        // 增加        await test.insertOne({ “site”: “runoob.com” });        // 查询        var arr = await test.find().toArray();        console.log(arr);        // 更改        await test.updateMany({ “site”: “runoob.com” },            { $set: { “site”: “example.com” } });        // 查询        arr = await test.find().toArray();        console.log(arr);        // 删除        await test.deleteMany({ “site”: “example.com” });        // 查询        arr = await test.find().toArray();        console.log(arr);    } catch (err) {        console.log(“错误：” + err.message);    } finally {        if (conn != null) conn.close();    } }  dataOperate();</p>
<p>运行结果：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">数据库已连接</span><br><span class="line">[ &#123; _id: 5f169006a2780f0cd4ea640b, site: &#39;runoob.com&#39; &#125; ]</span><br><span class="line">[ &#123; _id: 5f169006a2780f0cd4ea640b, site: &#39;example.com&#39; &#125; ]</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>

<p>运行结果完全一样。</p>
<p>很显然，异步函数是一种非常良好的编程风格，在多次使用异步操作的时候非常实用。</p>
<p>但是请勿在低于 7.6.0 版本的 node.js 上使用异步函数。</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>node.js</category>
      </categories>
      <tags>
        <tag>node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>dnpicture</title>
    <url>/2021/04/30/dnpicture/</url>
    <content><![CDATA[<h1 id="1-uni-app学习"><a href="#1-uni-app学习" class="headerlink" title="1 uni-app学习"></a>1 uni-app学习</h1><h2 id="1-1-什么是uni-app"><a href="#1-1-什么是uni-app" class="headerlink" title="1.1 什么是uni-app"></a>1.1 什么是uni-app</h2><blockquote>
<p>uni-app是一个使用Vue.js语法来开发所有前端应用的框架（也称之为全端开发框架）<br> 技术栈：JavaScript，vue， 微信小程序， uni-app</p>
</blockquote>
<h2 id="1-2-有哪些uni-app的作品"><a href="#1-2-有哪些uni-app的作品" class="headerlink" title="1.2 有哪些uni-app的作品"></a>1.2 有哪些uni-app的作品</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-2fc52ebbd53a339d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/736/format/webp" alt="img"></p>
<p>线上项目.png</p>
<h2 id="1-3-uni-app的社区规模"><a href="#1-3-uni-app的社区规模" class="headerlink" title="1.3. uni-app的社区规模"></a>1.3. uni-app的社区规模</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-7180ee5e356118f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/322/format/webp" alt="img"></p>
<p>社区规模.png</p>
<h1 id="2-uni-app基础"><a href="#2-uni-app基础" class="headerlink" title="2 uni-app基础"></a>2 uni-app基础</h1><h2 id="2-1-如何创建项目"><a href="#2-1-如何创建项目" class="headerlink" title="2.1 如何创建项目"></a>2.1 如何创建项目</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">脚手架搭建项目</span><br><span class="line"><span class="number">1</span>.全局安装  </span><br><span class="line">    npm install -g <span class="keyword">@vue</span>/cli  </span><br><span class="line"><span class="number">2</span>.创建项目      </span><br><span class="line">    vue create -p dcloudio/uni-preset-vue my-project     </span><br><span class="line"><span class="number">3</span>.启动项目（微信小程序）   </span><br><span class="line">    npm run <span class="attribute">dev</span>:mp-weixin    </span><br><span class="line"><span class="number">4</span>.微信小程序开发者工具导入项目         </span><br></pre></td></tr></table></figure>

<p>（搭建过程中可能会遇到的问题）</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-9da64783adf69fea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/839/format/webp" alt="img"></p>
<p>脚手架搭建版本不一致.png</p>
<h2 id="2-2-如何编写代码"><a href="#2-2-如何编写代码" class="headerlink" title="2.2 如何编写代码"></a>2.2 如何编写代码</h2><h2 id="2-3-uni-app初体验"><a href="#2-3-uni-app初体验" class="headerlink" title="2.3 uni-app初体验"></a>2.3 uni-app初体验</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-4af44e5f0de56ddd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1200/format/webp" alt="img"></p>
<p>初始界面.png</p>
<h2 id="2-4-项目结构介绍"><a href="#2-4-项目结构介绍" class="headerlink" title="2.4 项目结构介绍"></a>2.4 项目结构介绍</h2><p><img src="https://upload-images.jianshu.io/upload_images/19729056-ed390f395e18208a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/747/format/webp" alt="img"></p>
<p>项目目录.png</p>
<h2 id="2-5-样式和sass"><a href="#2-5-样式和sass" class="headerlink" title="2.5 样式和sass"></a>2.5 样式和sass</h2><ul>
<li>支持小程序的rpx 和 h5的vw，vh。<br> <code>rpx 小程序中的单位 750rpx = 屏幕宽度 vw h5单位 100vw = 屏幕的宽度， 100vh = 屏幕的高度</code></li>
<li>内置sass的配置， 只需要安装对应的依赖即可  <code>npm install sass-loader node-sass</code></li>
<li>vue组件中，在style标签上加入属性<code>&lt;style lang= &#39;scss&#39;&gt;</code>即可</li>
</ul>
<h2 id="2-6-基本语法"><a href="#2-6-基本语法" class="headerlink" title="2.6 基本语法"></a>2.6 基本语法</h2><p>学过vue的同学应该很容易上手,大胆去尝试吧</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;dataObj.name&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;dataObj.age&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span>&#123;&#123;dataObj.boolean&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">view</span> <span class="attr">v-for</span>=<span class="string">&quot;item in filterList&quot;</span> <span class="attr">:key</span>= <span class="string">&#x27;item.id&#x27;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">                dataObj: &#123;</span><br><span class="line"><span class="javascript">                    name: <span class="string">&#x27;Davidsofter&#x27;</span>,</span></span><br><span class="line">                    age: 23,</span><br><span class="line"><span class="javascript">                    boolean: <span class="literal">true</span>,</span></span><br><span class="line">                &#125;,</span><br><span class="line"><span class="javascript">                fruitList: [&#123;<span class="attr">id</span>: <span class="number">0</span>, <span class="attr">text</span>: <span class="string">&#x27;🍎&#x27;</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">1</span>, <span class="attr">text</span>: <span class="string">&#x27;🍌&#x27;</span>&#125;,&#123;<span class="attr">id</span>: <span class="number">2</span>, <span class="attr">text</span>: <span class="string">&#x27;🍇&#x27;</span>&#125;]</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        computed: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">filterList</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="built_in">this</span>.fruitList.filter(<span class="function"><span class="params">v</span> =&gt;</span> v.id&lt;=<span class="number">0</span>)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<p><img src="https://upload-images.jianshu.io/upload_images/19729056-42f5f95a4bceb39f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/403/format/webp" alt="img"></p>
<p>基本语法显示.png</p>
<h2 id="2-7-事件"><a href="#2-7-事件" class="headerlink" title="2.7 事件"></a>2.7 事件</h2><p>添加点击事件，自定义参数和传参</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">view</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">button</span> <span class="attr">data-item</span>=<span class="string">&quot;123&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;btclick(1,$event)&quot;</span>&gt;</span>点击我试试<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        methods: &#123;</span><br><span class="line"><span class="javascript">            <span class="function"><span class="title">btclick</span>(<span class="params">data,event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&quot;我不想努力了😘&quot;</span>)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data)</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(event)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>查看打印出的结果：</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-3c0d4e0b2ed9808c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/406/format/webp" alt="img"></p>
<p>点击事件.png</p>
<h2 id="2-8-组件"><a href="#2-8-组件" class="headerlink" title="2.8 组件"></a>2.8 组件</h2><h3 id="1-组件的定义-引入-注册-使用"><a href="#1-组件的定义-引入-注册-使用" class="headerlink" title="1 组件的定义/引入/注册/使用"></a>1 组件的定义/引入/注册/使用</h3><blockquote>
<p>重点章节，组件化思想是前端必备思想之一，灵活的使用组件可以提高网页开发效率，提高代码复用率，降低块与块之间的耦合性。</p>
</blockquote>
<h4 id="1-1-组件的定义"><a href="#1-1-组件的定义" class="headerlink" title="1.1 组件的定义"></a>1.1 组件的定义</h4><ul>
<li>在src目录下新建文件夹components用来存放组件</li>
<li>在components目录下直接新建vue文件</li>
</ul>
<h4 id="1-2-组件的引入"><a href="#1-2-组件的引入" class="headerlink" title="1.2 组件的引入"></a>1.2 组件的引入</h4><ul>
<li>在页面中引入组件 “import 组件名 from ‘组件路径’”</li>
</ul>
<h4 id="1-3-组件的注册"><a href="#1-3-组件的注册" class="headerlink" title="1.3 组件的注册"></a>1.3 组件的注册</h4><ul>
<li>在页面的实例中，新增属性 components</li>
<li>属性components是一个对象， 在里面添加要注册的组件</li>
</ul>
<h4 id="1-4-组件的使用"><a href="#1-4-组件的使用" class="headerlink" title="1.4 组件的使用"></a>1.4 组件的使用</h4><p>+在页面的template中添加组件标签 “&lt;组件&gt;&lt;组件/&gt;”</p>
<h4 id="1-5-全局数据传递"><a href="#1-5-全局数据传递" class="headerlink" title="1.5 全局数据传递"></a>1.5 全局数据传递</h4><ul>
<li>通过prototype在vue的原型上添加属性</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-766fd5caa2499a5c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/362/format/webp" alt="img"></p>
<p>全局数据传递.png</p>
<ul>
<li><p>在App.vue文件中向外暴露一个全局对象</p>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-31c83f46a6e86b69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/418/format/webp" alt="img"></p>
<p>globalData数据传递.png</p>
</li>
<li><p>以上两种方法的拿值</p>
</li>
</ul>
<p><img src="https://upload-images.jianshu.io/upload_images/19729056-fa3ecd57d30964b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/301/format/webp" alt="img"></p>
<p>拿全局数据方法.png</p>
<h4 id="1-6-使用插槽实现动态更新组件"><a href="#1-6-使用插槽实现动态更新组件" class="headerlink" title="1.6 使用插槽实现动态更新组件"></a>1.6 使用插槽实现动态更新组件</h4><p><img src="https://upload-images.jianshu.io/upload_images/19729056-68f1138d3744e626.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/853/format/webp" alt="img"></p>
<p>插槽.png</p>
<h2 id="2-9-生命周期"><a href="#2-9-生命周期" class="headerlink" title="2.9 生命周期"></a>2.9 生命周期</h2><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="1 介绍"></a>1 介绍</h4><ul>
<li>uni-app框架的生命周期结合了vue和微信小程序的生命周期</li>
<li>全局APP中使用 onLaunch 表示应用启动时</li>
<li>页面中使用 onLoad 或者 onShow 分别表示页面加载完成 和 页面显示时</li>
<li>组件中使用mounted 表示组件挂载完毕时</li>
</ul>
<h4 id="2-完整生命周期"><a href="#2-完整生命周期" class="headerlink" title="2 完整生命周期"></a>2 完整生命周期</h4><ul>
<li><a href="https://links.jianshu.com/go?to=https://uniapp.dcloud.io/frame?id=%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F">uni-app生命周期</a></li>
<li><a href="https://links.jianshu.com/go?to=https://cn.vuejs.org/v2/guide/instance.html%23%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%9B%BE%E7%A4%BA">vue生命周期图示</a></li>
<li><a href="https://links.jianshu.com/go?to=https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html">微信小程序生命周期</a></li>
</ul>
<h1 id="3-uni-app项目"><a href="#3-uni-app项目" class="headerlink" title="3.uni-app项目"></a>3.uni-app项目</h1><ul>
<li>懂你找图</li>
</ul>
<blockquote>
<p>本文结合黑马程序员教学视频，部分截图来自原视频<br> 黑马视频链接： <a href="https://links.jianshu.com/go?to=https://www.bilibili.com/video/BV1Sc41187nZ?p=1">https://www.bilibili.com/video/BV1Sc41187nZ?p=1</a></p>
</blockquote>
<blockquote>
<p>作者：VinSmokeW<br>链接：<a href="https://www.jianshu.com/p/3dec2cc2e30b">https://www.jianshu.com/p/3dec2cc2e30b</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p>
</blockquote>
<h4 id="1-脚手架搭建项目"><a href="#1-脚手架搭建项目" class="headerlink" title="1.脚手架搭建项目"></a>1.脚手架搭建项目</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//1. 全局安装</span></span><br><span class="line">npm install -g @vue/cli</span><br><span class="line"><span class="comment">//2. 创建项目</span></span><br><span class="line">vue create -p dcloudio/uni-preset-vue my-project</span><br><span class="line"><span class="comment">//3. 启动项目（微信小程序）</span></span><br><span class="line">npm run dev:mp-weixin</span><br><span class="line"><span class="comment">//4. 微信小程序开发者工具导入项目</span></span><br></pre></td></tr></table></figure>

<h4 id="2-项目目录"><a href="#2-项目目录" class="headerlink" title="2.项目目录"></a>2.项目目录</h4><p><img src="/2021/04/30/dnpicture/%E9%A1%B9%E7%9B%AE%E7%9B%AE%E5%BD%95.jpg" alt="项目目录"></p>
<h5 id="2-1-样式和sass"><a href="#2-1-样式和sass" class="headerlink" title="2.1.样式和sass"></a>2.1.样式和sass</h5><p><img src="/2021/04/30/dnpicture/Snipaste_2021-05-01_00-35-52.jpg" alt="Snipaste_2021-05-01_00-35-52"></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i sass-loader@<span class="number">4.13</span><span class="number">.0</span> node-sass@<span class="number">8.0</span><span class="number">.2</span></span><br></pre></td></tr></table></figure>

<h5 id="2-2-uni-ui和接口使用"><a href="#2-2-uni-ui和接口使用" class="headerlink" title="2.2.uni-ui和接口使用"></a>2.2.uni-ui和接口使用</h5><blockquote>
<p>unu-ui :<a href="https://www.npmjs.com/package/@dcloudio/uni-ui">https://www.npmjs.com/package/@dcloudio/uni-ui</a></p>
<p>接口文档：<a href="https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602">https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602</a></p>
<p>比如 <a href="http://157.122.54.189:9088/image/v3/homepage/vertical">http://157.122.54.189:9088/image/v3/homepage/vertical</a> 这个接口不能用，带上参数之后<br><a href="http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2">http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2</a><br>就可以用了</p>
</blockquote>
<p>index.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;view&gt;首页</span><br><span class="line">    &lt;text <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;iconfont iconvideocamera&quot;</span>&gt;&lt;/text&gt;</span><br><span class="line">    &lt;uni-badge text=<span class="string">&quot;1&quot;</span>&gt;&lt;<span class="regexp">/uni-badge&gt;&lt;uni-badge text=&quot;2&quot; type=&quot;success&quot; &gt;&lt;/u</span>ni-badge&gt;</span><br><span class="line">    &lt;uni-badge text=<span class="string">&quot;3&quot;</span> type=<span class="string">&quot;primary&quot;</span> :inverted=<span class="string">&quot;true&quot;</span>&gt;&lt;/uni-badge&gt;</span><br><span class="line"></span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123;uniBadge&#125; <span class="keyword">from</span> <span class="string">&#x27;@dcloudio/uni-ui&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&quot;index&quot;</span>,</span><br><span class="line">  components:&#123;</span><br><span class="line">    uniBadge</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function"><span class="title">onload</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// http://157.122.54.189:9088/image/v3/homepage/vertical</span></span><br><span class="line">    <span class="comment">// 1.原生的微信小程序的api</span></span><br><span class="line">    wx.request(&#123;</span><br><span class="line">      url:<span class="string">&quot;http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2&quot;</span>,</span><br><span class="line">      <span class="function"><span class="title">success</span>(<span class="params">res</span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. uni-api</span></span><br><span class="line">    uni.request(&#123;</span><br><span class="line">      uni:<span class="string">&quot;http://157.122.54.189:9088/image/v3/homepage/vertical?limit=10&amp;order=hot&amp;skip=2&quot;</span></span><br><span class="line">    &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>





<h5 id="2-2-首页模块"><a href="#2-2-首页模块" class="headerlink" title="2.2. 首页模块"></a>2.2. 首页模块</h5><ul>
<li><p>功能分析</p>
<ul>
<li>修改导航栏的外观</li>
<li>使用分段器组件搭建子页面</li>
<li>封装自己异步请求</li>
</ul>
</li>
<li><p>搭建子页面</p>
<ul>
<li>首页模块分为4个部分,分别是推荐、分类、最新、专辑</li>
<li>新建自定义组件来代替上述的4个页面<ul>
<li>home-recommend</li>
<li>home-category</li>
<li>home-new</li>
<li>home-album</li>
</ul>
</li>
<li>分段器介绍<ul>
<li>分段器指的是uni-ui中的一个组件,其实就是我们俗称的标签页,tab栏</li>
<li><a href="https://ext.dcloud.net.cn/plugin?id=54">https://ext.dcloud.net.cn/plugin?id=54</a></li>
</ul>
</li>
</ul>
</li>
<li><p>封装自己的异步请求</p>
<ul>
<li>封装的原因<ul>
<li>原生的请求不支持 promise</li>
<li>unl-apl的请求不能够方便的添加请求中效果</li>
<li>uni-api的请求返回值是个数组,不方便</li>
</ul>
</li>
<li>封装的思路<ul>
<li>基于原生的 promise来封装</li>
<li>挂载到vue的原型上</li>
<li>通过 this request的方式来使用</li>
</ul>
</li>
</ul>
<h5 id="2-3-首页模块-推荐模块"><a href="#2-3-首页模块-推荐模块" class="headerlink" title="2.3.首页模块-推荐模块"></a>2.3.首页模块-推荐模块</h5><ul>
<li><p>接口文档<br><a href="https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602">https://www.showdoc.com.cn/414855720281749?page_id=3678621017219602</a></p>
</li>
<li><p>数据动态渲染</p>
</li>
<li><p>moment. Js的使用</p>
</li>
<li><p>“热门”列表的基于 scroll-view的分页加载</p>
</li>
</ul>
</li>
<li><p>页面</p>
</li>
</ul>
<h5 id="2-4-首页模块-专辑模块"><a href="#2-4-首页模块-专辑模块" class="headerlink" title="2.4.首页模块-专辑模块"></a>2.4.首页模块-专辑模块</h5><ul>
<li>专辑列表</li>
<li>专辑详情</li>
</ul>
<p>1.专辑列表</p>
<p>1.1功能分析</p>
<ul>
<li>使用 setNavigation BarTitle修改页面标题</li>
<li>发送请求获取数据</li>
<li>使用 swiper轮播图组件</li>
<li>使用 scroll-view组件实现分页</li>
<li>点击跳转到专辑详情页</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序 vue</tag>
      </tags>
  </entry>
  <entry>
    <title>docker</title>
    <url>/2021/04/20/docker/</url>
    <content><![CDATA[<p>什么是 Docker</p>
<p>◆使用最广泛的开源容器引擎</p>
<p>◆一种操作系统级的虚拟化技术</p>
<p>◆依赖于 Linux内核特性：Namespace和 Groups个简单的应用程序打包工具</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">root@localhost -] docker run -i -t centos/bin/bash</span><br><span class="line">Unable to find image centos: latest locally</span><br><span class="line">Latest: Pulling <span class="keyword">from</span> Library/centos</span><br><span class="line">256b176beaff: Pull complete</span><br><span class="line">Digest: sha256: 5d9lc5535c41fd1bb48d4058la2c8b 53d38fc2eb26df774556b 53c 5a0bd4d44e</span><br><span class="line">Status: Downloaded newer image <span class="keyword">for</span> centos: latest</span><br></pre></td></tr></table></figure>

<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Git基本配置</title>
    <url>/2021/01/17/git/</url>
    <content><![CDATA[<p>1.全局配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name **</span><br><span class="line">git config --global user.email ***@**.com</span><br><span class="line">git config --global push.default matching</span><br><span class="line">git config --global core.quotepath false</span><br><span class="line">git config --global core.editor &quot;vim&quot;</span><br><span class="line">git config -l;</span><br></pre></td></tr></table></figure>

<p>2.密钥生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C ***@qq.com</span><br><span class="line">cat ~&#x2F;.ssh&#x2F;id_rsa.pub</span><br><span class="line">ssh -T git@github.com</span><br><span class="line">ssh -T git@gitee.com</span><br></pre></td></tr></table></figure>

<p>3.远程仓库连接</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote rm origin</span><br><span class="line">git remote add github git@github.com:****&#x2F;learngit.git</span><br><span class="line">git remote add gitee git@gitee.com:*****&#x2F;learngit.git</span><br><span class="line">git remote -v</span><br><span class="line">git push github master</span><br><span class="line">git push gitee master</span><br></pre></td></tr></table></figure>

<p><img src="/2021/01/17/git/git.png"></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo install</title>
    <url>/2021/01/13/hexo%20install/</url>
    <content><![CDATA[<p>1、安装之前可以先设置一下淘宝镜像加速器<br>    <code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code><br>2、全局安装框架<br>    <code>npm install hexo-cli -g</code><br>1、创建你的博客目录<br>     <code>hexo init 你博客的文件夹名字</code><br>2、进入你博客的目录<br>    <code>cd 你博客的文件夹名字</code><br>3、复制文件到你博客的目录<br>    <code>npm install</code><br>4、安装Hexo部署插件<br>5、请在你博客的目录下启动cmd，再执行以下代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>

<p>6、打开你博客根目录的 _config.yml 文件，将以下信息添加到里面去。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@gitee.com:yzhou15&#x2F;yzhou15.git</span><br><span class="line">  # https:&#x2F;&#x2F;github.com&#x2F;&lt;username&gt;&#x2F;&lt;project&gt;</span><br><span class="line">  # example, https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexojs.github.io</span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>

<p>7、hexo cl&amp;hexo g&amp; hexo s<br>8、hexo d<br>每次部署完git pages要点更新</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>外卖项目</title>
    <url>/2021/04/20/guiguwaimai/</url>
    <content><![CDATA[<p>1.基于 Vue 的最新版本； </p>
<p>2.项目是关于外卖业务的前后台分离Web App，功能模块包含商家, 商品, 购物车, 用户管理等多个模块； </p>
<p>3.后台应用技术架构为: Node + Express + Mongodb + Mongoose；</p>
<p>4.前台应用技术架构为: vue + vuex + vue-router + webpack + ES6； 5.采用模块化、组件化、工程化的模式开发；</p>
<p>项目描述：一个外卖Web App(SPA)前后台分离项目，包括商家，商品，购物车，用户等多个子模块；使用Vue全家桶+ES6+Webpack等，采用模块化、组件化、工程化的模式开发</p>
<p>技术选型：</p>
<ul>
<li>前台数据处理、交互、组件化：<ul>
<li>vue全家桶、技术栈：<ul>
<li>vue</li>
<li>vue-router(路由)</li>
<li>vuex(管理状态)</li>
<li>mint-ui(ui组件库)</li>
<li>vue-lazyload(懒家，实现图片惰加载)</li>
</ul>
</li>
<li>滑动库：<ul>
<li>vue-scroller(插件)</li>
<li>better-scroll</li>
</ul>
</li>
<li>日期处理<ul>
<li>swiper(滑动，做轮播)</li>
<li>monent</li>
<li>date-fns</li>
</ul>
</li>
</ul>
</li>
<li>前后台交互<ul>
<li>mock数据：mockjs(模拟)</li>
<li>接口测试：postman</li>
<li>ajax请求<ul>
<li>vue-resource</li>
<li>axios</li>
</ul>
</li>
</ul>
</li>
<li>模块化<ul>
<li>ES6</li>
<li>babel</li>
</ul>
</li>
<li>项目构建、工程化<ul>
<li>webpack(项目构建)</li>
<li>vue-cli(创建工程化项目)</li>
<li>eslint(检查语法是否规范)</li>
</ul>
</li>
<li>css预编译器<ul>
<li>stylus</li>
</ul>
</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2021/01/13/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
  </entry>
  <entry>
    <title>hexo使用技巧</title>
    <url>/2021/02/22/hexo%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>切换主题报错：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">extends</span> <span class="string">&#x27;_layout.swig&#x27;</span> %&#125; &#123;% <span class="keyword">import</span> <span class="string">&#x27;_macro/post.swig&#x27;</span> <span class="keyword">as</span> post_template %&#125; &#123;% <span class="keyword">import</span> <span class="string">&#x27;_macro/sidebar.swig&#x27;</span> <span class="keyword">as</span> sidebar_template %&#125; &#123;% block title %&#125;&#123;&#123; config.title &#125;&#125;&#123;% <span class="keyword">if</span> theme.index_with_subtitle and config.subtitle %&#125; - &#123;&#123;config.subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125; &#123;% block page_class %&#125; &#123;% <span class="keyword">if</span> is_home() %&#125;page-home&#123;% endif -%&#125; &#123;% endblock %&#125; &#123;% block content %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% <span class="keyword">for</span> post <span class="keyword">in</span> page.posts %&#125; &#123;&#123; post_template.render(post, <span class="literal">true</span>) &#125;&#125; &#123;% endfor %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% include <span class="string">&#x27;_partials/pagination.swig&#x27;</span> %&#125; &#123;% endblock %&#125; &#123;% block sidebar %&#125; &#123;&#123; sidebar_template.render(<span class="literal">false</span>) &#125;&#125; &#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>原因是hexo在5.0之后把swig给删除了需要自己手动安装</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure>





<p>转载自： <a href="https://inertia42.com/tips/tipsofhexo/">https://inertia42.com/tips/tipsofhexo/</a></p>
<h2 id="Hexo添加阅读全文标签"><a href="#Hexo添加阅读全文标签" class="headerlink" title="Hexo添加阅读全文标签"></a>Hexo添加阅读全文标签</h2><p>在文章中添加<code>&lt;!--more--&gt;</code>标签可以使文章显示摘要和阅读全文按钮</p>
<h2 id="Hexo中的Markdown"><a href="#Hexo中的Markdown" class="headerlink" title="Hexo中的Markdown"></a>Hexo中的Markdown</h2><p>Hexo支持GitHub Flavored Markdown语法</p>
<h2 id="在首页隐藏某些特定文章"><a href="#在首页隐藏某些特定文章" class="headerlink" title="在首页隐藏某些特定文章"></a>在首页隐藏某些特定文章</h2><p>该方法取自<a href="https://www.jianshu.com/p/79fe9fb9dfa0">淡之梦的文章</a></p>
<p>在hexo安装目录下找到\theme\next\layout\index.swig,打开后会看到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% extends &#39;_layout.swig&#39; %&#125;</span><br><span class="line">&#123;% import &#39;_macro&#x2F;post.swig&#39; as post_template %&#125;</span><br><span class="line">&#123;% import &#39;_macro&#x2F;sidebar.swig&#39; as sidebar_template %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block title %&#125;&#123;&#123; title &#125;&#125;&#123;% if theme.index_with_subtitle and subtitle %&#125; – &#123;&#123; subtitle &#125;&#125;&#123;% endif %&#125;&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block page_class %&#125;</span><br><span class="line">  &#123;% if is_home() %&#125;page-home&#123;% endif -%&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id&#x3D;&quot;posts&quot; class&#x3D;&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">	&#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% block sidebar %&#125;</span><br><span class="line">  &#123;&#123; sidebar_template.render(false) &#125;&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>将其中的</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id&#x3D;&quot;posts&quot; class&#x3D;&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">        &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>修改为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;% block content %&#125;</span><br><span class="line">  &lt;section id&#x3D;&quot;posts&quot; class&#x3D;&quot;posts-expand&quot;&gt;</span><br><span class="line">    &#123;% for post in page.posts %&#125;</span><br><span class="line">        &#123;% if post.notshow !&#x3D; true %&#125;</span><br><span class="line">            &#123;&#123; post_template.render(post, true) &#125;&#125;</span><br><span class="line">        &#123;% endif %&#125;</span><br><span class="line">    &#123;% endfor %&#125;</span><br><span class="line">  &lt;&#x2F;section&gt;</span><br><span class="line"></span><br><span class="line">  &#123;% include &#39;_partials&#x2F;pagination.swig&#39; %&#125;</span><br><span class="line">&#123;% endblock %&#125;</span><br></pre></td></tr></table></figure>



<p>之后在博文头部使用<code>notshow</code>参数隐藏文章，加入<code>notshow: true</code>即可</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: title</span><br><span class="line">date: 2018-06-12 11:45:43</span><br><span class="line">tags: </span><br><span class="line">notshow: true</span><br></pre></td></tr></table></figure>



<h2 id="在文章底部显示copyright信息"><a href="#在文章底部显示copyright信息" class="headerlink" title="在文章底部显示copyright信息"></a>在文章底部显示copyright信息</h2><p>以<code>next</code>主题为例，在<strong>主题</strong>配置文件中找到以下内容：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">post_copyright:</span><br><span class="line">  enable: false</span><br><span class="line">  license: &lt;a href&#x3D;&quot;https:&#x2F;&#x2F;creativecommons.org&#x2F;licenses&#x2F;by-nc-sa&#x2F;4.0&#x2F;&quot; rel&#x3D;&quot;external nofollow&quot; target&#x3D;&quot;_blank&quot;&gt;CC BY-NC-SA 4.0&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>



<p>将其中的<code>false</code>改为<code>true</code>，然后在<strong>博客</strong>配置文件中找到：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">url: http:&#x2F;&#x2F;yoursite.com</span><br></pre></td></tr></table></figure>



<blockquote>
<p>注意，如果你的博客使用了https加密，请把url改为<code>https://yoursite.com</code><br>将其中的地址改为自己的博客地址即可。</p>
</blockquote>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>next配置</title>
    <url>/2021/04/10/next%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<p>转载自：<a href="https://blog.csdn.net/qq_35396510/article/details/105953460">https://blog.csdn.net/qq_35396510/article/details/105953460</a></p>
<p>hexo 主题 next7.8 版本配置美化</p>
<p>转载自：<a href="https://www.jianshu.com/p/6f9e732b1f9f">https://www.jianshu.com/p/6f9e732b1f9f</a></p>
<p>Hexo的Next主题详细配置</p>
<p>72017.11.29 16:21:02字数 1,902阅读 53,047</p>
<p>经过一番不懈的努力，我们终于按照<a href="https://www.jianshu.com/p/51617690f8ca">Hexo免费搭建一个属于自己的博客</a>搭建好了一个属于自己的博客，并且还安装了一个Next主题，但是我们的博客一开始还是很简陋的，我们需要把她装修一下。</p>
<blockquote>
<ul>
<li>在 Hexo 中有两份主要的配置文件，其名称都是 _config.yml。 其中，一份位于站点根目录下，主要包含 Hexo 本身的配置；另一份位于主题目录下，这份配置由主题作者提供，主要用于配置主题相关的选项。<br>为了描述方便，在以下说明中，将前者称为**<em>站点配置文件*<strong>， 后者称为</strong></em>主题配置文件***。</li>
<li>以下所有终端执行的命令都在你的Hexo根目录下</li>
</ul>
</blockquote>
<h2 id="1、基本信息配置"><a href="#1、基本信息配置" class="headerlink" title="1、基本信息配置"></a>1、基本信息配置</h2><blockquote>
<p>基本信息包括：博客标题、作者、描述、语言等等。</p>
</blockquote>
<p>打开 *<strong>站点配置文件*</strong> ，找到Site模块</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标题</span><br><span class="line">subtitle: 副标题</span><br><span class="line">description: 描述</span><br><span class="line">author: 作者</span><br><span class="line">language: 语言（简体中文是zh-Hans）</span><br><span class="line">timezone: 网站时区（Hexo 默认使用您电脑的时区，不用写）</span><br></pre></td></tr></table></figure>

<p>关于 *<strong>站点配置文件*</strong> 中的其他配置可参考<a href="https://links.jianshu.com/go?to=https://hexo.io/zh-cn/docs/configuration.html">站点配置</a></p>
<h2 id="2、菜单设置"><a href="#2、菜单设置" class="headerlink" title="2、菜单设置"></a>2、菜单设置</h2><blockquote>
<p>菜单包括：首页、归档、分类、标签、关于等等</p>
</blockquote>
<p>我们刚开始默认的菜单只有首页和归档两个，不能够满足我们的要求，所以需要添加菜单，打开 *<strong>主题配置文件*</strong> 找到<code>Menu Settings</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home                          <span class="comment">//首页</span></span><br><span class="line">  archives: /archives/ || archive          <span class="comment">//归档</span></span><br><span class="line">  categories: /categories/ || th           <span class="comment">//分类</span></span><br><span class="line">  tags: /tags/ || tags                     <span class="comment">//标签</span></span><br><span class="line">  about: /about/ || user                   <span class="comment">//关于</span></span><br><span class="line">  <span class="meta">#schedule: /schedule/ || calendar        <span class="comment">//日程表</span></span></span><br><span class="line">  <span class="meta">#sitemap: /sitemap.xml || sitemap        <span class="comment">//站点地图</span></span></span><br><span class="line">  <span class="meta">#commonweal: /404/ || heartbeat          <span class="comment">//公益404</span></span></span><br></pre></td></tr></table></figure>

<p>看看你需要哪个菜单就把哪个取消注释打开就行了；<br>关于后面的格式，以<code>archives: /archives/ || archive</code>为例：<br><code>||</code> 之前的<code>/archives/</code>表示标题“归档”，关于标题的格式可以去<code>themes/next/languages/zh-Hans.yml</code>中参考或修改<br><code>||</code>之后的<code>archive</code>表示图标，可以去<a href="https://links.jianshu.com/go?to=http://fontawesome.io/icons/">Font Awesome</a>中查看或修改，Next主题所有的图标都来自Font Awesome。</p>
<h2 id="3、Next主题样式设置"><a href="#3、Next主题样式设置" class="headerlink" title="3、Next主题样式设置"></a>3、Next主题样式设置</h2><p>我们百里挑一选择了Next主题，不过Next主题还有4种风格供我们选择，打开 *<strong>主题配置文件*</strong> 找到<code>Scheme Settings</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Schemes</span></span><br><span class="line"><span class="comment"># scheme: Muse</span></span><br><span class="line"><span class="comment"># scheme: Mist</span></span><br><span class="line"><span class="comment"># scheme: Pisces</span></span><br><span class="line">scheme: Gemini</span><br></pre></td></tr></table></figure>

<p>4种风格大同小异，本人用的是<a href="https://links.jianshu.com/go?to=https://youngerli.github.io">Gemini</a>风格，你们可以选择自己喜欢的风格。</p>
<h2 id="4、侧栏设置"><a href="#4、侧栏设置" class="headerlink" title="4、侧栏设置"></a>4、侧栏设置</h2><blockquote>
<p>侧栏设置包括：侧栏位置、侧栏显示与否、文章间距、返回顶部按钮等等</p>
</blockquote>
<p>打开 *<strong>主题配置文件*</strong> 找到<code>sidebar</code>字段</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">sidebar:</span><br><span class="line"># Sidebar Position - 侧栏位置（只对Pisces | Gemini两种风格有效）</span><br><span class="line">  position: left        <span class="comment">//靠左放置</span></span><br><span class="line">  <span class="meta">#position: right      <span class="comment">//靠右放置</span></span></span><br><span class="line"></span><br><span class="line"># Sidebar Display - 侧栏显示时机（只对Muse | Mist两种风格有效）</span><br><span class="line">  <span class="meta">#display: post        <span class="comment">//默认行为，在文章页面（拥有目录列表）时显示</span></span></span><br><span class="line">  display: always       <span class="comment">//在所有页面中都显示</span></span><br><span class="line">  <span class="meta">#display: hide        <span class="comment">//在所有页面中都隐藏（可以手动展开）</span></span></span><br><span class="line">  <span class="meta">#display: remove      <span class="comment">//完全移除</span></span></span><br><span class="line"></span><br><span class="line">  offset: <span class="number">12</span>            <span class="comment">//文章间距（只对Pisces | Gemini两种风格有效）</span></span><br><span class="line"></span><br><span class="line">  b2t: <span class="literal">false</span>            <span class="comment">//返回顶部按钮（只对Pisces | Gemini两种风格有效）</span></span><br><span class="line"></span><br><span class="line">  scrollpercent: <span class="literal">true</span>   <span class="comment">//返回顶部按钮的百分比</span></span><br></pre></td></tr></table></figure>

<h2 id="5、头像设置"><a href="#5、头像设置" class="headerlink" title="5、头像设置"></a>5、头像设置</h2><p>打开 *<strong>主题配置文件*</strong> 找到<code>Sidebar Avatar</code>字段</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line">avatar: /images/header.jpg</span><br></pre></td></tr></table></figure>

<p>这是头像的路径，只需把你的头像命名为<code>header.jpg</code>（随便命名）放入<code>themes/next/source/images</code>中，将<code>avatar</code>的路径名改成你的头像名就OK啦！</p>
<h2 id="6、设置RSS"><a href="#6、设置RSS" class="headerlink" title="6、设置RSS"></a>6、设置RSS</h2><p>1、先安装 <a href="https://links.jianshu.com/go?to=https://github.com/hexojs/hexo-generator-feed">hexo-generator-feed</a> 插件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>

<p>2、打开 *<strong>站点配置文件*</strong> 找到<code>Extensions</code>在下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RSS订阅</span></span><br><span class="line">feed:</span><br><span class="line">  <span class="built_in">type</span>: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  <span class="built_in">limit</span>: 20</span><br><span class="line">  hub:</span><br><span class="line">  content:</span><br><span class="line">  content_limit: 140</span><br><span class="line">  content_limit_delim: <span class="string">&#x27; &#x27;</span></span><br></pre></td></tr></table></figure>

<p>3、打开 *<strong>主题配置文件*</strong> 找到<code>rss</code>，设置为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rss: &#x2F;atom.xml</span><br></pre></td></tr></table></figure>

<h2 id="7、添加分类模块"><a href="#7、添加分类模块" class="headerlink" title="7、添加分类模块"></a>7、添加分类模块</h2><p>1、新建一个分类页面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page categories</span><br></pre></td></tr></table></figure>

<p>2、你会发现你的<code>source</code>文件夹下有了<code>categorcies/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 分类</code><br>3、打开 *<strong>主题配置文件*</strong> 找到<code>menu</code>，将categorcies取消注释<br>4、把文章归入分类只需在文章的顶部标题下方添加<code>categories</code>字段，即可自动创建分类名并加入对应的分类中<br>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 分类测试文章标题</span><br><span class="line">categories: 分类名</span><br></pre></td></tr></table></figure>

<h2 id="8、添加标签模块"><a href="#8、添加标签模块" class="headerlink" title="8、添加标签模块"></a>8、添加标签模块</h2><p>1、新建一个标签页面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page tags</span><br></pre></td></tr></table></figure>

<p>2、你会发现你的<code>source</code>文件夹下有了<code>tags/index.md</code>，打开<code>index.md</code>文件将title设置为<code>title: 标签</code><br>3、打开 *<strong>主题配置文件*</strong> 找到<code>menu</code>，将tags取消注释<br>4、把文章添加标签只需在文章的顶部标题下方添加<code>tags</code>字段，即可自动创建标签名并归入对应的标签中<br>举个栗子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">title: 标签测试文章标题</span><br><span class="line">tags: </span><br><span class="line">  - 标签1</span><br><span class="line">  - 标签2</span><br><span class="line">  ...</span><br></pre></td></tr></table></figure>

<h2 id="9、添加关于模块"><a href="#9、添加关于模块" class="headerlink" title="9、添加关于模块"></a>9、添加关于模块</h2><p>1、新建一个关于页面</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">$ hexo <span class="keyword">new</span> page about</span><br></pre></td></tr></table></figure>

<p>2、你会发现你的<code>source</code>文件夹下有了<code>about/index.md</code>，打开<code>index.md</code>文件即可编辑关于你的信息，可以随便编辑。<br>3、打开 *<strong>主题配置文件*</strong> 找到<code>menu</code>，将about取消注释</p>
<h2 id="10、添加搜索功能"><a href="#10、添加搜索功能" class="headerlink" title="10、添加搜索功能"></a>10、添加搜索功能</h2><p>1、安装 <a href="https://links.jianshu.com/go?to=https://github.com/flashlab/hexo-generator-search">hexo-generator-searchdb</a> 插件</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable">$ </span>npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>

<p>2、打开 *<strong>站点配置文件*</strong> 找到<code>Extensions</code>在下面添加</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 搜索</span></span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  <span class="built_in">limit</span>: 10000</span><br></pre></td></tr></table></figure>

<p>3、打开 *<strong>主题配置文件*</strong> 找到<code>Local search</code>，将<code>enable</code>设置为<code>true</code></p>
<h2 id="11、添加阅读全文按钮"><a href="#11、添加阅读全文按钮" class="headerlink" title="11、添加阅读全文按钮"></a>11、添加阅读全文按钮</h2><p>因为在你的博客主页会有多篇文章，如果你想让你的文章只显示一部分，多余的可以点击阅读全文来查看，那么你需要在你的文章中添加</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure>

<p>其后面的部分就不会显示了，只能点击阅读全文才能看</p>
<h2 id="12、修改文章内链接文本样式"><a href="#12、修改文章内链接文本样式" class="headerlink" title="12、修改文章内链接文本样式"></a>12、修改文章内链接文本样式</h2><p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-9cd87c2cc2d0c78f.gif" alt="img"></p>
<p>效果图</p>
<p>打开文件 <code>themes/next/source/css/_common/components/post/post.styl</code>，在末尾添加</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">.post-body p a &#123;</span><br><span class="line">  <span class="symbol">color:</span> <span class="comment">#0593d3;</span></span><br><span class="line">  border-<span class="symbol">bottom:</span> none;</span><br><span class="line">  border-<span class="symbol">bottom:</span> 1px solid <span class="comment">#0593d3;</span></span><br><span class="line">  &amp;<span class="symbol">:hover</span> &#123;</span><br><span class="line">    <span class="symbol">color:</span> <span class="comment">#fc6423;</span></span><br><span class="line">    border-<span class="symbol">bottom:</span> none;</span><br><span class="line">    border-<span class="symbol">bottom:</span> 1px solid <span class="comment">#fc6423;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中选择 .post-body 是为了不影响标题，选择 p 是为了不影响首页“阅读全文”的显示样式,颜色可以自己定义。</p>
<h2 id="13、设置网站缩略图标"><a href="#13、设置网站缩略图标" class="headerlink" title="13、设置网站缩略图标"></a>13、设置网站缩略图标</h2><blockquote>
<p>从网上看了很多设置方法都是说把favicon.ico放到站点目录的source目录下就可以了，可是我试了好多遍，并不行。</p>
</blockquote>
<p>我的设置方法是这样的：把你的图片（png或jpg格式，不是favicon.ico）放在<code>themes/next/source/images</code>里，然后打开 *<strong>主题配置文件*</strong> 找到<code>favicon</code>，将<code>small、medium、apple_touch_icon</code>三个字段的值都设置成<code>/images/图片名.jpg</code>就可以了，其他字段都注释掉。</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-61a0cc555a25548e.png" alt="img"></p>
<h2 id="14、设置文章字体的颜色、大小"><a href="#14、设置文章字体的颜色、大小" class="headerlink" title="14、设置文章字体的颜色、大小"></a>14、设置文章字体的颜色、大小</h2><p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-e471abbb2b1f459f.png" alt="img"></p>
<p>效果图</p>
<p>如果想设置某一句的颜色或大小，只需用html语法写出来就行了</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">接下来就是见证奇迹的时刻</span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span>&gt;</span> 我可以设置这一句的颜色哈哈 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">6</span>&gt;</span> 我还可以设置这一句的大小嘻嘻 <span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">font</span> <span class="attr">size</span>=<span class="string">5</span> <span class="attr">color</span>=<span class="string">&quot;#FF0000&quot;</span>&gt;</span> 我甚至可以设置这一句的颜色和大小呵呵<span class="tag">&lt;/<span class="name">font</span>&gt;</span> </span><br></pre></td></tr></table></figure>

<h2 id="15、设置文字居中"><a href="#15、设置文字居中" class="headerlink" title="15、设置文字居中"></a>15、设置文字居中</h2><p>设置方法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">center</span>&gt;</span>这一行需要居中<span class="tag">&lt;/<span class="name">center</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意：简书中此方法无效</p>
</blockquote>
<h2 id="16、添加评论系统"><a href="#16、添加评论系统" class="headerlink" title="16、添加评论系统"></a>16、添加评论系统</h2><blockquote>
<p>目前国内比较有名的多说、网易云跟帖评论系统都已停止服务了，国外的Disqus评论系统还得需要翻墙，所以不推荐使用，剩下的还有搜狐畅言、友言、来必力等。<br>本来想使用畅言的，结果注册完之后还得要求备案，我只想说F开头的那个单词，果断放弃。<br>后来选择了友言</p>
</blockquote>
<p>1、进入<a href="https://links.jianshu.com/go?to=http://www.uyan.cc">友言官网</a>注册、登录步骤我就不介绍了<br>2、登录完成之后，点击获取代码，你会发现出来了一段代码，里面有你的<code>uid=1234567</code><br>3、打开 *<strong>主题配置文件*</strong> 找到<code>youyan_uid</code>将值设置为上面的uid就可以了</p>
<h2 id="17、添加站点访问计数"><a href="#17、添加站点访问计数" class="headerlink" title="17、添加站点访问计数"></a>17、添加站点访问计数</h2><p>站点访问计数有名的就是<a href="https://links.jianshu.com/go?to=http://busuanzi.ibruce.info">不蒜子</a>，使用起来非常方便<br>1、安装脚本<br>打开 <strong>themes/next/layout/_partial/footer.swig</strong>，将下面这段代码添加到里面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">&quot;//busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_pv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">    本站总访问量 <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_pv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span> 次</span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;</span>|<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_container_site_uv&quot;</span> <span class="attr">style</span>=<span class="string">&#x27;display:none&#x27;</span>&gt;</span></span><br><span class="line">    有<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;busuanzi_value_site_uv&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span>人看过我的博客啦</span><br><span class="line"><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>添加的位置如下图，可自行根据个人喜好更换位置</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-690e9b69d7901c54.png" alt="img"></p>
<p>2、以上只是显示站点的访问次数，如果想显示每篇文章的访问次数，打开 <strong>themes/next/layout/_macro/post.swig</strong>，在第一行增加<code>is_pv</code>字段</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">macro</span> render(post, is_index, is_pv, post_extra_class) %&#125;</span><br></pre></td></tr></table></figure>

<p>然后将这段代码插入到里面</p>
<figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line">&#123;% <span class="keyword">if</span> is_pv %&#125;</span><br><span class="line">  &lt;span <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;post-meta-divider&quot;</span>&gt;|&lt;/span&gt;</span><br><span class="line">  &lt;span id=<span class="string">&quot;busuanzi_value_page_pv&quot;</span>&gt;&lt;/span&gt;次阅读</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>

<p>插入的位置</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-bdbc90ff2c4285a0.png" alt="img"></p>
<p>然后再打开 <strong>themes/next/layout/post.swig</strong>，这个文件是文章的模板，给render方法传入参数（对应刚才添加的<code>is_pv</code>字段）</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-8418d415c31ff529.png" alt="img"></p>
<p>最后再打开 <strong>themes/next/layout/index.swig</strong>，这个文件是首页的模板，给render方法传入参数（对应刚才添加的is_pv字段）</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-5d89c00ea392bf01.png" alt="img"></p>
<p>OK！设置完毕。</p>
<h2 id="18、去掉文章目录标题的自动编号"><a href="#18、去掉文章目录标题的自动编号" class="headerlink" title="18、去掉文章目录标题的自动编号"></a>18、去掉文章目录标题的自动编号</h2><p>我们自己写文章的时候一般都会自己带上标题编号，但是默认的主题会给我们带上编号，很是别扭，如何去掉呢？<br>打开***主题配置文件***，找到</p>
<p><img src="/2021/04/10/next%E9%85%8D%E7%BD%AE/4120931-dcd17d644851e21f.png" alt="img"></p>
<p>将<code>number</code>改为<code>false</code>即可</p>
<h2 id="18、更多"><a href="#18、更多" class="headerlink" title="18、更多"></a>18、更多</h2><p>1、还有其他更多的主题配置，请查看<a href="https://links.jianshu.com/go?to=http://theme-next.iissnan.com/theme-settings.html">主题配置</a><br>2、还有其他更多的插件，请查看<a href="https://links.jianshu.com/go?to=https://hexo.io/plugins/">Hexo插件</a></p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>python使用技巧</title>
    <url>/2021/02/22/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<p>转载自： <a href="https://inertia42.com/tips/pythontips/">https://inertia42.com/tips/pythontips/</a></p>
<h2 id="在没有GUI的情况下使用matplotlib"><a href="#在没有GUI的情况下使用matplotlib" class="headerlink" title="在没有GUI的情况下使用matplotlib"></a>在没有GUI的情况下使用matplotlib</h2><p>在vps上运行调用matplotlib的python脚本时需在<code>import matplotlib.pyplot</code>前加上</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import matplotlib as mpl</span><br><span class="line">mpl.use(&#39;Agg&#39;)</span><br></pre></td></tr></table></figure>



<p>一定要加在<code>import matplotlib.pyplot</code>前</p>
<h2 id="给pip更换源"><a href="#给pip更换源" class="headerlink" title="给pip更换源"></a>给pip更换源</h2><p>将windows下的pip源换为清华的源</p>
<p>只需要在user文件夹下新建pip文件夹，并在其中新建<code>pip.ini</code>文件，并写入：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url &#x3D; https:&#x2F;&#x2F;pypi.tuna.tsinghua.edu.cn&#x2F;simple</span><br></pre></td></tr></table></figure>



<p>即可</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue Day 01</title>
    <url>/2021/01/14/vueDay1/</url>
    <content><![CDATA[<p>Vue Day 01</p>
<hr>
<h3 id="一、邂逅Vuejs"><a href="#一、邂逅Vuejs" class="headerlink" title="一、邂逅Vuejs"></a>一、邂逅Vuejs</h3><h4 id="1-1-认识Vuejs"><a href="#1-1-认识Vuejs" class="headerlink" title="1.1. 认识Vuejs"></a>1.1. 认识Vuejs</h4><ul>
<li>为什么要学习Vuejs</li>
<li>Vue的读音</li>
<li>Vue的渐进式</li>
<li>Vue的特点</li>
</ul>
<h4 id="1-2-安装Vue"><a href="#1-2-安装Vue" class="headerlink" title="1.2. 安装Vue"></a>1.2. 安装Vue</h4><ul>
<li>CDN引入</li>
<li>下载引入</li>
<li>npm安装</li>
</ul>
<h4 id="1-3-Vue的初体验"><a href="#1-3-Vue的初体验" class="headerlink" title="1.3. Vue的初体验"></a>1.3. Vue的初体验</h4><ul>
<li>Hello Vuejs<ul>
<li>mustache-体验vue响应式</li>
</ul>
</li>
<li>Vue列表展示<ul>
<li>v-for</li>
<li>后面给数组追加元素的时候，新的元素也可以在界面中渲染出来</li>
</ul>
</li>
<li>Vue计数器小案例<ul>
<li>事件监听：click-methods</li>
</ul>
</li>
</ul>
<h4 id="1-4-Vue-中的MVVM"><a href="#1-4-Vue-中的MVVM" class="headerlink" title="1.4. Vue 中的MVVM"></a>1.4. Vue 中的MVVM</h4><h4 id="1-5-创建Vue-时，-options-可以放哪些东西"><a href="#1-5-创建Vue-时，-options-可以放哪些东西" class="headerlink" title="1.5. 创建Vue 时， options 可以放哪些东西"></a>1.5. 创建Vue 时， options 可以放哪些东西</h4><ul>
<li>el:</li>
<li>data:</li>
<li>methods:</li>
<li>生命周期函数</li>
</ul>
<h2 id="二、-插值语法"><a href="#二、-插值语法" class="headerlink" title="二、 插值语法"></a>二、 插值语法</h2><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">mustache语法</span><br><span class="line">v- once</span><br><span class="line">v-html</span><br><span class="line">v-text</span><br><span class="line">v-pre:&#123;&#123;&#125;&#125;</span><br><span class="line">v-cloak: 斗篷</span><br></pre></td></tr></table></figure>

<h2 id="三、v-bind"><a href="#三、v-bind" class="headerlink" title="三、v-bind"></a>三、v-bind</h2><h3 id="3-1-v-bind绑定基本属性"><a href="#3-1-v-bind绑定基本属性" class="headerlink" title="3.1. v-bind绑定基本属性"></a>3.1. v-bind绑定基本属性</h3><ul>
<li>v-bind:src</li>
<li>:href</li>
</ul>
<h3 id="3-2-v-bind动态绑定class"><a href="#3-2-v-bind动态绑定class" class="headerlink" title="3.2. v-bind动态绑定class"></a>3.2. v-bind动态绑定class</h3><ul>
<li>对象语法：作业：class=’{类名: boolean}’</li>
<li>数组语法：</li>
</ul>
<h3 id="3-3-v-bind动态绑定style"><a href="#3-3-v-bind动态绑定style" class="headerlink" title="3.3. v-bind动态绑定style"></a>3.3. v-bind动态绑定style</h3><ul>
<li>对象属性：</li>
<li>数组语法：</li>
</ul>
<h2 id="四、计算属性"><a href="#四、计算属性" class="headerlink" title="四、计算属性"></a>四、计算属性</h2><ul>
<li>案例一：firstName + lastName</li>
<li>案例二： books -&gt;price</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay2</title>
    <url>/2021/01/16/vueDay2/</url>
    <content><![CDATA[<p>一. 计算属性</p>
<h4 id="1-1-计算属性的本质"><a href="#1-1-计算属性的本质" class="headerlink" title="1.1. 计算属性的本质"></a>1.1. 计算属性的本质</h4><ul>
<li>fullname:(set(), get())</li>
</ul>
<h4 id="1-2-计算属性和methods对比"><a href="#1-2-计算属性和methods对比" class="headerlink" title="1.2. 计算属性和methods对比"></a>1.2. 计算属性和methods对比</h4><ul>
<li>计算属性在多次使用时，只会调用一次</li>
<li>它是有缓存的</li>
</ul>
<h3 id="二-事件监听"><a href="#二-事件监听" class="headerlink" title="二. 事件监听"></a>二. 事件监听</h3><h4 id="2-1-事件监听基本使用"><a href="#2-1-事件监听基本使用" class="headerlink" title="2.1. 事件监听基本使用"></a>2.1. 事件监听基本使用</h4><ul>
<li>btnClick</li>
<li>btnClick(enent)</li>
<li>btnCLick(abc, event) -&gt; $event</li>
</ul>
<h4 id="2-3-修饰符"><a href="#2-3-修饰符" class="headerlink" title="2.3. 修饰符"></a>2.3. 修饰符</h4><ul>
<li>stop</li>
<li>prevent</li>
<li>.enter</li>
<li>.once</li>
<li>.native</li>
</ul>
<h3 id="三-条件判断"><a href="#三-条件判断" class="headerlink" title="三. 条件判断"></a>三. 条件判断</h3><h4 id="3-1-v-if-v-else-if-v-else"><a href="#3-1-v-if-v-else-if-v-else" class="headerlink" title="3.1. v-if/v-else-if/v-else"></a>3.1. v-if/v-else-if/v-else</h4><h4 id="3-2-登陆小案例"><a href="#3-2-登陆小案例" class="headerlink" title="3.2. 登陆小案例"></a>3.2. 登陆小案例</h4><h4 id="3-3-v-show"><a href="#3-3-v-show" class="headerlink" title="3.3. v-show"></a>3.3. v-show</h4><ul>
<li>v-show 和 v-if的区别</li>
</ul>
<h3 id="四-循环遍历"><a href="#四-循环遍历" class="headerlink" title="四. 循环遍历"></a>四. 循环遍历</h3><h4 id="4-1-遍历数组"><a href="#4-1-遍历数组" class="headerlink" title="4.1. 遍历数组"></a>4.1. 遍历数组</h4><h4 id="4-2-遍历对象"><a href="#4-2-遍历对象" class="headerlink" title="4.2 遍历对象"></a>4.2 遍历对象</h4><ul>
<li>value</li>
<li>value, key</li>
<li>value, key, index</li>
</ul>
<h4 id="4-3-数组哪些方法是响应式的"><a href="#4-3-数组哪些方法是响应式的" class="headerlink" title="4.3. 数组哪些方法是响应式的"></a>4.3. 数组哪些方法是响应式的</h4><h4 id="4-4-作业完成"><a href="#4-4-作业完成" class="headerlink" title="4.4. 作业完成"></a>4.4. 作业完成</h4><h3 id="五-书籍案例"><a href="#五-书籍案例" class="headerlink" title="五. 书籍案例"></a>五. 书籍案例</h3><h3 id="六-v-model的使用"><a href="#六-v-model的使用" class="headerlink" title="六. v-model的使用"></a>六. v-model的使用</h3><h4 id="6-1-v-model的基本使用"><a href="#6-1-v-model的基本使用" class="headerlink" title="6.1. v-model的基本使用"></a>6.1. v-model的基本使用</h4><ul>
<li>v-model=&gt;v-bind:value v-on:input</li>
</ul>
<h4 id="6-2-v-model和radio-checkbox-select"><a href="#6-2-v-model和radio-checkbox-select" class="headerlink" title="6.2 v-model和radio/checkbox/select"></a>6.2 v-model和radio/checkbox/select</h4><h4 id="6-3-修饰符"><a href="#6-3-修饰符" class="headerlink" title="6.3. 修饰符"></a>6.3. 修饰符</h4><ul>
<li>lazy</li>
<li>number</li>
<li>trim</li>
</ul>
<h3 id="七-组件化开发"><a href="#七-组件化开发" class="headerlink" title="七. 组件化开发"></a>七. 组件化开发</h3><h4 id="7-1-认识组件化"><a href="#7-1-认识组件化" class="headerlink" title="7.1. 认识组件化"></a>7.1. 认识组件化</h4><h4 id="7-2-组件的基本使用"><a href="#7-2-组件的基本使用" class="headerlink" title="7.2. 组件的基本使用"></a>7.2. 组件的基本使用</h4><h4 id="7-3-全局组件和局部组件"><a href="#7-3-全局组件和局部组件" class="headerlink" title="7.3. 全局组件和局部组件"></a>7.3. 全局组件和局部组件</h4><h4 id="7-4-父组件和子组件"><a href="#7-4-父组件和子组件" class="headerlink" title="7.4. 父组件和子组件"></a>7.4. 父组件和子组件</h4><h4 id="7-5-注册的语法糖"><a href="#7-5-注册的语法糖" class="headerlink" title="7.5. 注册的语法糖"></a>7.5. 注册的语法糖</h4><h4 id="7-6-模板的分离写法"><a href="#7-6-模板的分离写法" class="headerlink" title="7.6. 模板的分离写法"></a>7.6. 模板的分离写法</h4><ul>
<li>script</li>
<li>template</li>
</ul>
<h4 id="7-7-数据的存放"><a href="#7-7-数据的存放" class="headerlink" title="7.7. 数据的存放"></a>7.7. 数据的存放</h4><ul>
<li>子组件不能直接访问父组件</li>
<li>子组件中有自己的data ,而且必须是一个函数</li>
<li>为什么必须是一个函数</li>
</ul>
<h4 id="7-8-父子间组件的通信"><a href="#7-8-父子间组件的通信" class="headerlink" title="7.8. 父子间组件的通信"></a>7.8. 父子间组件的通信</h4><ul>
<li>父传子：props</li>
<li>子传父：$emit</li>
</ul>
<h4 id="7-9-项目"><a href="#7-9-项目" class="headerlink" title="7.9. 项目"></a>7.9. 项目</h4><ul>
<li>npm install</li>
<li>npm run serve</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay3</title>
    <url>/2021/02/05/vueDay3/</url>
    <content><![CDATA[<h3 id="一-组件化开发"><a href="#一-组件化开发" class="headerlink" title="一. 组件化开发"></a>一. 组件化开发</h3><h4 id="1-1-父子组件的访问"><a href="#1-1-父子组件的访问" class="headerlink" title="1.1. 父子组件的访问"></a>1.1. 父子组件的访问</h4><ul>
<li>children/refs</li>
<li>parent/root</li>
</ul>
<h4 id="1-2-slot的使用"><a href="#1-2-slot的使用" class="headerlink" title="1.2. slot的使用"></a>1.2. slot的使用</h4><ul>
<li>基本使用</li>
<li>具名插槽</li>
<li>编译的作用域</li>
<li>作用域插槽</li>
</ul>
<h3 id="二-前端模块化"><a href="#二-前端模块化" class="headerlink" title="二. 前端模块化"></a>二. 前端模块化</h3><h4 id="2-1-为什么要使用模块化"><a href="#2-1-为什么要使用模块化" class="headerlink" title="2.1 为什么要使用模块化"></a>2.1 为什么要使用模块化</h4><ul>
<li>解决命名重复、代码不可复用性等问题</li>
<li>简单写js代码带来的问题</li>
<li>闭包引起代码不可复用</li>
<li>自己实现了简单的模块化</li>
<li>AMD/CMD/CommonJS</li>
</ul>
<h4 id="2-2-模块化规范"><a href="#2-2-模块化规范" class="headerlink" title="2.2 模块化规范"></a>2.2 模块化规范</h4><ul>
<li>CommonJS</li>
<li>AMD</li>
<li>CMD</li>
<li>ES6的Modules</li>
</ul>
<h4 id="2-3-模块化核心，ES6中模块化的使用"><a href="#2-3-模块化核心，ES6中模块化的使用" class="headerlink" title="2.3 模块化核心，ES6中模块化的使用"></a>2.3 模块化核心，ES6中模块化的使用</h4><ul>
<li>导出  <ul>
<li>CommonJS: model.export{}</li>
<li>ES6: export{}</li>
</ul>
</li>
<li>导入 <ul>
<li> CommonJS: let{} = require(‘’)</li>
<li>ES6: import {…} from “…”</li>
</ul>
</li>
</ul>
<h3 id="三-webpack"><a href="#三-webpack" class="headerlink" title="三. webpack"></a>三. webpack</h3><h4 id="3-1-认识webpack"><a href="#3-1-认识webpack" class="headerlink" title="3.1. 认识webpack"></a>3.1. 认识webpack</h4><ul>
<li>模块化打包工具</li>
</ul>
<h5 id="3-1-1-和grunt-gulp的区别"><a href="#3-1-1-和grunt-gulp的区别" class="headerlink" title="3.1.1. 和grunt/gulp的区别"></a>3.1.1. 和grunt/gulp的区别</h5><ul>
<li>grunt/gulp更强调任务处理，自动化任务管理工具</li>
<li>webpack更强调模块化</li>
</ul>
<h4 id="3-2-webpck的安装"><a href="#3-2-webpck的安装" class="headerlink" title="3.2. webpck的安装"></a>3.2. webpck的安装</h4><p>依赖环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> -g</span><br><span class="line">cd 对应目录</span><br><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>

<h4 id="3-3-webpack的起步"><a href="#3-3-webpack的起步" class="headerlink" title="3.3. webpack的起步"></a>3.3. webpack的起步</h4><ul>
<li>src(开发)</li>
<li>dist-&gt;distribution(发布)</li>
</ul>
<p>webpack命令</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">webpack ./src/main.js ./dist/bundle.js</span><br></pre></td></tr></table></figure>
<h4 id="3-4-webpck的配置"><a href="#3-4-webpck的配置" class="headerlink" title="3.4. webpck的配置"></a>3.4. webpck的配置</h4><ul>
<li>入口和出口的配置<ul>
<li>webpack.config.js</li>
<li>   配置时注意绝对路径path<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">&#x27;./src/main.js&#x27;</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    <span class="comment">// path: &#x27;./dist&#x27;,</span></span><br><span class="line">    <span class="comment">// 动态获取路径</span></span><br><span class="line">    path: path.resolve(__dirname, <span class="string">&#x27;dist&#x27;</span>),</span><br><span class="line">    filename: <span class="string">&#x27;bundle.js&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm init</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li>package.jason</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;build&quot;</span>: <span class="string">&quot;webpack&quot;</span>,</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>
<ul>
<li>局部安装webpack<ul>
<li>开发时依赖</li>
<li>运行时依赖<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack@<span class="number">3.6</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>
<h4 id="3-5-loaderd-使用"><a href="#3-5-loaderd-使用" class="headerlink" title="3.5. loaderd 使用"></a>3.5. loaderd 使用</h4></li>
</ul>
</li>
</ul>
<p>webpack官网查询：<a href="https://webpack.docschina.org/">https://webpack.docschina.org/</a></p>
<h5 id="3-5-1-安装css-loader"><a href="#3-5-1-安装css-loader" class="headerlink" title="3.5.1 安装css-loader"></a>3.5.1 安装css-loader</h5><p>首先，你需要先安装 <code>css-loader</code> ：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev css-loader@<span class="number">2.0</span><span class="number">.2</span></span><br><span class="line">npm install --save-dev style-loader@<span class="number">0.23</span><span class="number">.1</span></span><br></pre></td></tr></table></figure>

<p>然后把 loader 引用到你 <code>webpack</code> 的配置中。如下所示：</p>
<p><strong>file.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> css <span class="keyword">from</span> <span class="string">&quot;file.css&quot;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.css$/i</span>,</span><br><span class="line">        use: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-2-安装less-loader"><a href="#3-5-2-安装less-loader" class="headerlink" title="3.5.2. 安装less-loader"></a>3.5.2. 安装less-loader</h5><p>安装 <code>less</code> 和 <code>less-loader</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install less@<span class="number">3.9</span><span class="number">.0</span> less-loader@<span class="number">4.1</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>

<p>将该 loader 添加到 webpack 的配置中去</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.less$/i</span>,</span><br><span class="line">        loader: [ <span class="comment">// compiles Less to CSS</span></span><br><span class="line">          <span class="string">&quot;style-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;css-loader&quot;</span>,</span><br><span class="line">          <span class="string">&quot;less-loader&quot;</span>,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="3-5-3-安装图片文件url-loader"><a href="#3-5-3-安装图片文件url-loader" class="headerlink" title="3.5.3 安装图片文件url-loader"></a>3.5.3 安装图片文件url-loader</h5><p>首先，你需要安装 <code>url-loader</code>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install url-loader@<span class="number">1.1</span><span class="number">.2</span> --save-dev</span><br></pre></td></tr></table></figure>

<p><code>url-loader</code> 功能类似于 <a href="https://webpack.docschina.org/loaders/file-loader/"><code>file-loader</code></a>, 但是在文件大小（单位为字节）低于指定的限制时，可以返回一个 DataURL。</p>
<p><strong>index.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> img <span class="keyword">from</span> <span class="string">&#x27;./image.png&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p><strong>webpack.config.js</strong></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123;</span><br><span class="line">        test: <span class="regexp">/\.(png|jpg|gif|jpeg)$/i</span>,</span><br><span class="line">        use: [</span><br><span class="line">          &#123;</span><br><span class="line">            loader: <span class="string">&#x27;url-loader&#x27;</span>,</span><br><span class="line">            options: &#123;</span><br><span class="line">              <span class="comment">// 当加载的图片小于limit8kb时会将图片编译成base64字符串形式</span></span><br><span class="line">              <span class="comment">// 当加载的图片大于limit8kb时，要使用file-loader模块进行加载</span></span><br><span class="line">              limit: <span class="number">8192</span>,</span><br><span class="line">              <span class="comment">// 统一命名</span></span><br><span class="line">              name: <span class="string">&#x27;img/[name].[hash:8].[ext]&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>然后通过你的首选方法运行 <code>webpack</code>。</p>
<h5 id="3-5-4-加载file-loader模块"><a href="#3-5-4-加载file-loader模块" class="headerlink" title="3.5.4. 加载file-loader模块,"></a>3.5.4. 加载file-loader模块,</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install file-loader@<span class="number">3.0</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure>

<p>加载后由于发布到dist文件夹中，注意修改webpack中：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">output: &#123;</span><br><span class="line">	publicPath: <span class="string">&#x27;dist/&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">&#125;,</span></span><br></pre></td></tr></table></figure>

<h5 id="3-5-5-babel-loader-gt-ES6语法处理"><a href="#3-5-5-babel-loader-gt-ES6语法处理" class="headerlink" title="3.5.5.  babel-loader-&gt;ES6语法处理"></a>3.5.5.  babel-loader-&gt;ES6语法处理</h5><p>env:environment环境</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev babel-loader@<span class="number">7</span> babel-core babel-preset-es2015</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.m?js$/</span>,</span><br><span class="line">      exclude: <span class="regexp">/(node_modules|bower_components)/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">        options: &#123;</span><br><span class="line">          <span class="comment">// presets: [&#x27;@babel/preset-env&#x27;]</span></span><br><span class="line">          presets: [<span class="string">&#x27;es2015&#x27;</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-6-webpack中配置vue"><a href="#3-6-webpack中配置vue" class="headerlink" title="3.6 webpack中配置vue"></a>3.6 webpack中配置vue</h4><p>下载vue的方式：</p>
<ul>
<li>直接下载应用</li>
<li>CDN引入</li>
<li>npm安装</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue@<span class="number">2.5</span><span class="number">.21</span> --save</span><br></pre></td></tr></table></figure>

<p>版本：</p>
<ul>
<li>runtime-only -&gt;代码中不可以有任何template</li>
<li>runtime-compiler -&gt;代码中可以有template,因为有compiler可以用于编译template</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">	alias: &#123;</span><br><span class="line">		<span class="string">&#x27;vue$&#x27;</span>: <span class="string">&#x27;vue/dist/vue.esm.js&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>SPA(simple page web applocation)单页面复应用 -&gt; 多页面时vue-router(前端路由)跳转</p>
<p>.vue文件封装处理</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue-loader@<span class="number">15.4</span><span class="number">.2</span> vue-template-compiler@<span class="number">2.5</span><span class="number">.21</span> --save-dev</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>: &#123;</span><br><span class="line">  rules: [</span><br><span class="line">    &#123;</span><br><span class="line">      test: <span class="regexp">/\.vue$/</span>,</span><br><span class="line">      use: &#123;</span><br><span class="line">        loader: <span class="string">&#x27;vue-loader&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>省略扩展名：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [<span class="string">&#x27;.js&#x27;</span>, <span class="string">&#x27;.css&#x27;</span>, <span class="string">&#x27;.vue&#x27;</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-webpack的plugin的使用"><a href="#3-7-webpack的plugin的使用" class="headerlink" title="3.7. webpack的plugin的使用"></a>3.7. webpack的plugin的使用</h4><p>插件–&gt;框架扩充</p>
<ul>
<li>添加版权</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&#x27;webpack&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.BannerPlugin(<span class="string">&#x27;最终版权归yzhou所有&#x27;</span>)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>打包html的plugin<ul>
<li>自动生成一个index.html文件（可以指定模板来生成）</li>
<li>将打包的js文件，自动通过script标签插入到body中<ul>
<li>修改webpack.config.js文件中plugin部分<ul>
<li>要删除之前在output中添加的publicPath属性</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install html-webpack-plugin@<span class="number">3.2</span><span class="number">.0</span> --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> HtmlWebpackPlugin = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line">plugins: [</span><br><span class="line">	<span class="keyword">new</span> HtmlWebpackPlugin(&#123;</span><br><span class="line">		template: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">	&#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<ul>
<li>js压缩的Plugin</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install uglifyjs-webpack-plugin@<span class="number">1.1</span><span class="number">.1</span> --save-dev</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> UglifyJsPlugin = <span class="built_in">require</span>(<span class="string">&#x27;uglifyjs-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	plugins: [</span><br><span class="line">		<span class="keyword">new</span> UglifyJsPlugin()</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="3-8-搭建服务器"><a href="#3-8-搭建服务器" class="headerlink" title="3.8. 搭建服务器"></a>3.8. 搭建服务器</h4><p>基于node.js搭建，内部使用express框架，让浏览器自动刷新，从内存读取</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install --save-dev webpack-dev-server@<span class="number">2.9</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">	devServer: &#123;</span><br><span class="line">		contentBase: <span class="string">&#x27;./dist&#x27;</span>,</span><br><span class="line">		inline: <span class="literal">true</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>package.jason中添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">	<span class="string">&quot;dev&quot;</span>: <span class="string">&quot;webpack-dev-server --open&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-9-webpack配置分离"><a href="#3-9-webpack配置分离" class="headerlink" title="3.9. webpack配置分离"></a>3.9. webpack配置分离</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack-merge@<span class="number">4.1</span><span class="number">.5</span> --save-dev</span><br></pre></td></tr></table></figure>



<h3 id="四-Vue-CLI"><a href="#四-Vue-CLI" class="headerlink" title="四. Vue CLI"></a>四. Vue CLI</h3><p>cli-&gt;command-line interface</p>
<h4 id="4-1-认识Vue-CLI"><a href="#4-1-认识Vue-CLI" class="headerlink" title="4.1. 认识Vue CLI"></a>4.1. 认识Vue CLI</h4><ul>
<li>脚手架是什么东西</li>
<li>CLI依赖webpack，node，npm</li>
<li>安装CLI3-&gt;拉取CLI2模块</li>
</ul>
<p>开发大型项目时，需要考虑代码目录结构，项目结构和部署、热加载、代码单元测试等事情，手动完成效率低</p>
<ul>
<li>快速搭建vue开发环境</li>
<li>生成对应webpack配置</li>
</ul>
<h4 id="4-2-使用前提"><a href="#4-2-使用前提" class="headerlink" title="4.2.使用前提"></a>4.2.使用前提</h4><ul>
<li>Node<ul>
<li>C++</li>
<li>V8引擎–跳过字节码直接编译成二进制代码</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br></pre></td></tr></table></figure>

<p>npm: Node Package Manager</p>
<ul>
<li>Nodejs包管理和分发工具</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g cnmp --registry=https:<span class="comment">//registry.npm.taobao.org</span></span><br></pre></td></tr></table></figure>

<ul>
<li>webpack</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install webpack -g</span><br></pre></td></tr></table></figure>

<h4 id="4-3-使用和安装"><a href="#4-3-使用和安装" class="headerlink" title="4.3. 使用和安装"></a>4.3. 使用和安装</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">C:\Users\yzhou&gt;vue --version</span><br><span class="line">@vue/cli <span class="number">4.5</span><span class="number">.12</span></span><br><span class="line">vue create my-project</span><br></pre></td></tr></table></figure>

<p>拉取Vue CLI2的模板：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install -g @vue/cli-init</span><br><span class="line">vue init webpack my-project</span><br></pre></td></tr></table></figure>



<h4 id="4-4-CLI2初始化项目的过程"><a href="#4-4-CLI2初始化项目的过程" class="headerlink" title="4.4 CLI2初始化项目的过程"></a>4.4 CLI2初始化项目的过程</h4><h4 id="4-5-CLI2生产的目录结构解析"><a href="#4-5-CLI2生产的目录结构解析" class="headerlink" title="4.5 CLI2生产的目录结构解析"></a>4.5 CLI2生产的目录结构解析</h4><p>ES(js)-Lint</p>
<p>e2e-&gt; end to end(端到端测试)-&gt; selenium</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay4</title>
    <url>/2021/03/20/vueDay4/</url>
    <content><![CDATA[<p>一、Vue CLI</p>
<p>安装脚手架遇到问题可以尝试清空这个文件夹</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">C:\Users\yzhou\AppData\Roaming\npm-cache</span><br></pre></td></tr></table></figure>

<p>parse解析</p>
<h4 id="1-1-runtime-compiler和runtime-only的区别"><a href="#1-1-runtime-compiler和runtime-only的区别" class="headerlink" title="1.1. runtime+compiler和runtime-only的区别"></a>1.1. runtime+compiler和runtime-only的区别</h4><ul>
<li> **runtime+compile:**template -&gt; ast -&gt; render -&gt; virtual dom -&gt; 真实DOM</li>
<li><strong>runtime-only:</strong> virtual dom -&gt; 真实DOM<ul>
<li>性能更高</li>
<li>代码量更少</li>
</ul>
</li>
<li>箭头函数render: (h) =&gt; h, -&gt;本质上是creatElement</li>
<li>ESlint</li>
</ul>
<p>render -&gt; vdom -&gt; UI</p>
<h4 id="1-2-认识Vue-CLI3"><a href="#1-2-认识Vue-CLI3" class="headerlink" title="1.2. 认识Vue CLI3"></a>1.2. 认识Vue CLI3</h4><p>vue2.5.21 -&gt; vue2.x -&gt; flow-type(facebook)</p>
<p>vue3.x -&gt; TypeScript(microsoft)</p>
<ol>
<li>webpack4 （v2webpack3）</li>
<li>设计原则0配置</li>
<li>vue ui 可视化配置，更加人性化</li>
<li>移除static，新增public，将index.html移动到public中</li>
</ol>
<p>preset配置</p>
<p>feature特性</p>
<p>rc-&gt;run command</p>
<p>vcs-&gt;version control system(版本控制git/svn)</p>
<ul>
<li>如何通过CLI3创建项目</li>
<li>CLI3的目录结构</li>
<li>vue配置文件的查看和修改<ol>
<li>vue ui</li>
<li>去找隐藏的配置文件</li>
<li>自定义vue.config.js</li>
</ol>
</li>
</ul>
<h3 id="二、Vue-Router"><a href="#二、Vue-Router" class="headerlink" title="二、Vue-Router"></a>二、Vue-Router</h3><h4 id="2-1-认识路由"><a href="#2-1-认识路由" class="headerlink" title="2.1 认识路由"></a>2.1 认识路由</h4><ul>
<li>后端渲染\后端渲染</li>
<li>前后端分离</li>
<li>SPA\前端路由</li>
</ul>
<p>路由（routing）：通过互联的网络把信息从源地址传输到目的地址的活动</p>
<p>映射关系：ip地址：mac地址</p>
<h5 id="2-1-1-前端渲染和后端渲染："><a href="#2-1-1-前端渲染和后端渲染：" class="headerlink" title="2.1.1 前端渲染和后端渲染："></a>2.1.1 前端渲染和后端渲染：</h5><p>历史阶段：</p>
<ol>
<li>后端渲染阶段<br>后端路由阶段<br>■早期的网站开发整个HTML页面是由服务器来渲染的<br>口服务器直接生产渲染好对应的HTML页面,返回给客户端进行展示<br>■但是,一个网站,这么多页面服务器如何处理呢?<br>口一个页面有自己对应的网址,也就是URL<br>口URL会发送到服务器,服务器会通过正则对该URL进行匹配并且最后交给一个 Controller进行处理<br>口 Controller进行各种处理,最终生成HTML或者数据,返回给前端<br>口这就完成了一个1O操作<br>■上面的这种操作就是后端路由.<br>口当我们页面中需要请求不同的路径内容时,交给服务器来进行处理,服务器渲染好整个页面,并且将页面返回给客户顿<br>口这种情况下渲染好的页面,不需要单独加载任何的s和cs,可以直接交给浏览器展示,这样也有利于SEO的优化<br>后端路由的缺点<br>口一种情况是整个页面的模块由后端人员来编写和维护的<br>口另一种情况是前端开发人员如果要开发页面,需要通过PHP和Java等语言来编写页面代码.<br>口而且通常情况下HTML代码和数据以及对应的逻辑会混在一起,编写和维护都是非常糟糕的事情.</li>
</ol>
<p><img src="/2021/03/20/vueDay4/01-%E5%90%8E%E7%AB%AF%E6%B8%B2%E6%9F%93-1619053611560-1619053625495-1619053695181.jpg"></p>
<ol start="2">
<li>前后端分离阶段<br>口随着Ajax的出现有了前后端分离的开发模式<br>口后端只提供AP来返回数据,前端通过Ajax获取数据并且可以通过 JavaScript将数据渲染到页面中<br>口这样做最大的优点就是前后端责任的清晰,后端专注于数据上前端专注于交互和可视化上.<br>口并且当移动端(ioS/ Android)出现后,后端不需要进行任何处理依然使用之前的一套API即可.<br>口目前很多的网站依然采用这种模式开发</li>
</ol>
<img src="/2021/03/20/vueDay4/02-%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%98%B6%E6%AE%B5-1619053735149.jpg" alt="02-前后端分离阶段" style="zoom:200%;">



<ol start="3">
<li><p>前端渲染阶段</p>
<p>■单页面富应用阶段:<br>口其实SPA最主要的特点就是在前后端分离的基础上加了一层前端路由<br>口也就是前端来维护一套路由规则.</p>
</li>
</ol>
<img src="/2021/03/20/vueDay4/03-SPA%E9%A1%B5%E9%9D%A2%E9%98%B6%E6%AE%B5-1619053748463.jpg" alt="03-SPA页面阶段" style="zoom:50%;">

<h5 id="2-1-2-前端路由中url和组件的关系"><a href="#2-1-2-前端路由中url和组件的关系" class="headerlink" title="2.1.2.前端路由中url和组件的关系"></a>2.1.2.前端路由中url和组件的关系</h5><img src="/2021/03/20/vueDay4/04-%E5%89%8D%E7%AB%AF%E8%B7%AF%E7%94%B1%E4%B8%ADurl%E5%92%8C%E7%BB%84%E4%BB%B6%E7%9A%84%E5%85%B3%E7%B3%BB-1619053762212.jpg" alt="04-前端路由中url和组件的关系" style="zoom:50%;">

<h5 id="2-1-3-前端路由的核心"><a href="#2-1-3-前端路由的核心" class="headerlink" title="2.1.3. 前端路由的核心"></a>2.1.3. 前端路由的核心</h5><ul>
<li><p>改变URL,但是页画不进行整体的刷新</p>
</li>
<li><p>改变URL的hash</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">location.hash = <span class="string">&#x27;aaa&#x27;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>HTML5的history模式</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.pushState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;home&#x27;</span>)</span><br></pre></td></tr></table></figure>

<p>href-&gt;hyper reference</p>
<p>数据结构：</p>
<p>栈结构：先进后出</p>
<p>push入栈</p>
<p><img src="/2021/03/20/vueDay4/%E6%A0%88%E7%BB%93%E6%9E%84-1619053772511.jpg" alt="栈结构"></p>
<ul>
<li>HTML5的history模式：replaceState</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">history.replaceState(&#123;&#125;, <span class="string">&#x27;&#x27;</span>, <span class="string">&#x27;home&#x27;</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>history.go()</li>
<li>因为 history. back0等价于 history. go(-1)<br>history forward0则等价于 history. go(1)<br>这三个接口等同于浏览器界面的前进后退。</li>
</ul>
<p>三大框架路由实现：</p>
<ul>
<li>Angular-&gt;ngRouter</li>
<li>React-&gt;ReactRouter</li>
<li>Vue-&gt;vue-router</li>
</ul>
<h4 id="2-2-vue-router基本使用"><a href="#2-2-vue-router基本使用" class="headerlink" title="2.2. vue-router基本使用"></a>2.2. vue-router基本使用</h4><h5 id="2-2-1-安装步骤"><a href="#2-2-1-安装步骤" class="headerlink" title="2.2.1. 安装步骤"></a>2.2.1. 安装步骤</h5><ol>
<li>安装</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install vue-router --save</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>在模块化工程中使用,搭建路由框架<ol>
<li>导入路由对象，并且调用Vue.use(VueRouter)</li>
<li>创建路由实例，并且传入路由映射配置</li>
<li>在Vue实例中挂载创建的路由实例</li>
</ol>
</li>
</ol>
<p>router=&gt;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关信息</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"><span class="keyword">import</span> HelloWorld <span class="keyword">from</span> <span class="string">&#x27;@/components/HelloWorld&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 通过VUe.use(插件)，安装插件</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建VueRouter对象</span></span><br><span class="line"><span class="comment">// 3. 将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的应用关系</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      name: <span class="string">&#x27;HelloWorld&#x27;</span>,</span><br><span class="line">      component: HelloWorld</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>main.js中挂载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>配置路由映射关系步骤：<ol>
<li> 创建路由组件</li>
<li> 配置路由映射：组件和路径映射关系</li>
<li> 使用路由：通过<router-link>和<router-view></router-view></router-link></li>
</ol>
</li>
</ol>
<p>router=&gt;index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Home <span class="keyword">from</span> <span class="string">&#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="keyword">import</span> About <span class="keyword">from</span> <span class="string">&quot;../components/About&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  <span class="comment">// 配置路由和组件之间的映射关系</span></span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      component: Home</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">      component: About</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>App.vue中</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    <span class="comment">// 渲染成a标签，改变hash</span></span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/home&quot;</span>&gt;首页&lt;/router-link&gt;</span><br><span class="line">    &lt;router-link to=<span class="string">&quot;/about&quot;</span>&gt;关于&lt;/router-link&gt;</span><br><span class="line">		<span class="comment">// 栈位，动态渲染不同的组件</span></span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>



<h5 id="2-2-2-配置默认路径"><a href="#2-2-2-配置默认路径" class="headerlink" title="2.2.2. 配置默认路径"></a>2.2.2. 配置默认路径</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123; </span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">      <span class="comment">// redirect重定向</span></span><br><span class="line">      redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"> 	]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-3-添加history在index-js中可以消除地址栏中‘-’"><a href="#2-2-3-添加history在index-js中可以消除地址栏中‘-’" class="headerlink" title="2.2.3. 添加history在index.js中可以消除地址栏中‘#’"></a>2.2.3. 添加history在index.js中可以消除地址栏中‘#’</h5><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123; </span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-4-router-link补充"><a href="#2-2-4-router-link补充" class="headerlink" title="2.2.4. router-link补充"></a>2.2.4. router-link补充</h5><ul>
<li>tag: tag可以指定渲染成什么组件,比如下面的代码会渲染成一个<button>,而不是<a></a></button></li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/home&quot;</span> tag=<span class="string">&quot;button&quot;</span>&gt;首页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>replace: 不会留下history记录，后退键不能返回到上一个界面中</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;router-link to=<span class="string">&quot;/home&quot;</span> tag=<span class="string">&quot;button&quot;</span> replace&gt;首页&lt;/router-link&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>active-class:修改默认的类名称</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123; </span><br><span class="line">  linkActiveClass: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="2-2-5-路由代码跳转"><a href="#2-2-5-路由代码跳转" class="headerlink" title="2.2.5. 路由代码跳转"></a>2.2.5. 路由代码跳转</h5><p>App.vue</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=<span class="string">&quot;app&quot;</span>&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;homeClick&quot;</span>&gt;首页&lt;/button&gt;</span><br><span class="line">    &lt;button @click=<span class="string">&quot;aboutClick&quot;</span>&gt;关于&lt;/button&gt;</span><br><span class="line">    &lt;router-view/&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">&#x27;App&#x27;</span>,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">homeClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    	<span class="comment">// 路由代码跳转</span></span><br><span class="line">      <span class="comment">// this.$router.push(&#x27;/home&#x27;)</span></span><br><span class="line">      <span class="built_in">this</span>.$router.replace(<span class="string">&#x27;/home&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;homeClick&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">aboutClick</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="built_in">this</span>.$router.push(<span class="string">&#x27;/about&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;aboutClick&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h5 id="2-2-6-动态路由的使用"><a href="#2-2-6-动态路由的使用" class="headerlink" title="2.2.6. 动态路由的使用"></a>2.2.6. 动态路由的使用</h5><ul>
<li>/user/:id</li>
<li>params-&gt;parameters参数<ul>
<li>this.$route.params.id</li>
</ul>
</li>
</ul>
<h5 id="2-2-7-认识路由的懒加载-打包文件的解析"><a href="#2-2-7-认识路由的懒加载-打包文件的解析" class="headerlink" title="2.2.7. 认识路由的懒加载-打包文件的解析"></a>2.2.7. 认识路由的懒加载-打包文件的解析</h5><p>用到时再加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">懒加载的方式</span><br><span class="line">■方式一:结合Wue的异步组件和 Webpack的代码分析</span><br><span class="line"><span class="keyword">const</span> Home resolve =&gt;i <span class="built_in">require</span> ensure([ ./components /Home. vue],<span class="function"><span class="params">O</span>=&gt;</span></span><br><span class="line">I resolve(<span class="built_in">require</span> (./components/Home. vue ))))</span><br><span class="line">■方式二:AMD写法</span><br><span class="line"><span class="keyword">const</span> About resolve = <span class="built_in">require</span>([ ./components/About. vue<span class="string">&#x27;l, resolve)</span></span><br><span class="line"><span class="string">方式三:在ES6中我们可以有更加简单的写法来组织vue异步组件和 Webpack的代码分割</span></span><br><span class="line"><span class="string">const Home = ON&gt; import(./components/Home. vue &#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="2-3-vue-router嵌套路由"><a href="#2-3-vue-router嵌套路由" class="headerlink" title="2.3. vue-router嵌套路由"></a>2.3. vue-router嵌套路由</h4><ul>
<li>children:[]</li>
</ul>
<p><img src="/2021/03/20/vueDay4/%E5%B5%8C%E5%A5%97%E8%B7%AF%E7%94%B1-1619053788569.jpg"></p>
<p>index.html</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">routes: [</span><br><span class="line">&#123;</span><br><span class="line">      path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">      component: Home,</span><br><span class="line">      children: [</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">          redirect: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">          component: HomeNews</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">          component: HomeMessage</span><br><span class="line">        &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>



<h4 id="2-4-vue-router参数传递"><a href="#2-4-vue-router参数传递" class="headerlink" title="2.4. vue-router参数传递"></a>2.4. vue-router参数传递</h4><p>profile -&gt; 档案（用于‘我的’的用户界面）</p>
<p>准备工作：</p>
<ol>
<li>创建新的组件Profile.vue</li>
<li>配置路由映射</li>
<li>添加跳转的<router-link></router-link></li>
</ol>
<p>传递参数类型：</p>
<ol>
<li><p>params的类型</p>
<ol>
<li>配置动态路由：/router/:id</li>
<li>传递的方式：在path后面跟上对应的值</li>
<li>传递后形成的路径：/router/123,/router/abc</li>
</ol>
</li>
<li><p>query</p>
<ol>
<li>配置路由/router普通配置</li>
<li>传递的方式：对象中使用query的key作为传递方式</li>
<li>传递后形成的路径：/router?id=123, /router?id=abc</li>
</ol>
</li>
<li><p>URL:</p>
<ul>
<li><p>协议://主机:端口/路径?查询#片段哈希值</p>
</li>
<li><p>scheme://localhost:portt/path?query#fragment</p>
</li>
</ul>
<p>所有的组件都继承着vue类的原型</p>
</li>
</ol>
<img src="/2021/03/20/vueDay4/$route%E5%92%8C$router%E6%98%AF%E6%9C%89%E5%8C%BA%E5%88%AB%E7%9A%84-1619053796692.jpg" alt="$route和$router是有区别的">

<h4 id="2-5-vue-router导航守卫"><a href="#2-5-vue-router导航守卫" class="headerlink" title="2.5. vue-router导航守卫"></a>2.5. vue-router导航守卫</h4><ul>
<li>全局导航守卫</li>
<li>路由独享守卫</li>
<li>组件类守卫</li>
</ul>
<img src="/2021/03/20/vueDay4/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-1619053800628.webp">

<p>生命周期函数：</p>
<ul>
<li>init lifecycle</li>
<li>beforeCreates如果有的话回调</li>
<li>init 响应式等其他东西</li>
<li>created(){}-&gt;创建组件时</li>
<li>挂载el、template</li>
<li>beforemounted 创建vm替换el</li>
<li>mounter(){} -&gt;template挂载到组件时<ul>
<li>做响应式检测回调beforeUpdate</li>
<li>重新渲染vdom,然后patch打补丁</li>
</ul>
</li>
<li>updated(){} -&gt;界面刷新时</li>
<li>beforeDestory后做一些回收的操作</li>
<li>destroyed(){}-&gt;销毁</li>
</ul>
<p>meta：元数据-&gt;描述数据的数据</p>
<p>metaclass元类可以创建类对象，接着创建实例对象</p>
<img src="/2021/03/20/vueDay4/%E5%AF%BC%E8%88%AA%E5%AE%88%E5%8D%AB%E7%9A%84%E4%BD%BF%E7%94%A8-1619053814326.jpg">

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 配置路由相关信息</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import Home from &#x27;../components/Home&#x27;</span></span><br><span class="line"><span class="comment">// import About from &quot;../components/About&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Home = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HomeNews = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HomeNews&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> HomeMessage = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/HomeMessage&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> About = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/About&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> User = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/User&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> Profile = <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Profile&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 通过VUe.use(插件)，安装插件</span></span><br><span class="line"><span class="comment">// 2. 创建VueRouter对象</span></span><br><span class="line">Vue.use(Router)</span><br><span class="line"><span class="comment">// 配置路由和组件之间的映射关系</span></span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="comment">// redirect重定向</span></span><br><span class="line">    redirect: <span class="string">&#x27;/home&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">    component: Home,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;首页&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        redirect: <span class="string">&#x27;news&#x27;</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;news&#x27;</span>,</span><br><span class="line">        component: HomeNews</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        path: <span class="string">&#x27;message&#x27;</span>,</span><br><span class="line">        component: HomeMessage</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">    component: About,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;关于&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/user/:userId&#x27;</span>,</span><br><span class="line">    component: User,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;用户&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    path: <span class="string">&#x27;/profile&#x27;</span>,</span><br><span class="line">    component: Profile,</span><br><span class="line">    meta: &#123;</span><br><span class="line">      title: <span class="string">&#x27;档案&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 3. 将router对象传入到Vue实例</span></span><br><span class="line"><span class="keyword">const</span> router = <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes,</span><br><span class="line">  mode: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">  linkActiveClass: <span class="string">&#x27;active&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 导航守卫</span></span><br><span class="line"><span class="comment">// 全局导航</span></span><br><span class="line"><span class="comment">// 前置守卫(guard)</span></span><br><span class="line">router.beforeEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 从from跳转到to</span></span><br><span class="line">  <span class="built_in">document</span>.title = to.matched[<span class="number">0</span>].meta.title</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;++++&#x27;</span>)</span><br><span class="line">  next()</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 后置钩子(hook)</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span></span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;----&#x27;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> router</span><br></pre></td></tr></table></figure>



<h4 id="2-6-keep-alive"><a href="#2-6-keep-alive" class="headerlink" title="2.6. keep-alive"></a>2.6. keep-alive</h4><ul>
<li>keep-alie是Wue内置的一个组件,可以使被包含的组件保留状态,或避免重新渲染<ul>
<li>它们有两个非常重要的属性:<ul>
<li>include-字符串或正则表达,只有匹配的组件会被缓存</li>
<li>exclude-字符串或正则表达式,任问匹配的组件都不会被缓存</li>
</ul>
</li>
</ul>
</li>
<li>router-view也是一个组件,如果直接被包在keep-aive里面,所有路径匹配到的视图组件都会被缓存</li>
<li>在keep-alive下才能使用activated/deactived这两个函数</li>
<li>(不常用)首页中使用path属性记录离开时的路径，在beforeRouteLeave中记录</li>
</ul>
<p>App.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">   &lt;router-view&#x2F;&gt;</span><br><span class="line">&lt;&#x2F;keep-alive&gt;</span><br></pre></td></tr></table></figure>

<p>Home.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">  name: &quot;Home&quot;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;你好啊&#39;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    console.log(&#39;home created&#39;);</span><br><span class="line">  &#125;,</span><br><span class="line">  destroyed() &#123;</span><br><span class="line">    console.log(&#39;home destroyed&#39;)</span><br><span class="line">  &#125;,</span><br><span class="line">  activated()&#123;</span><br><span class="line">    &#x2F;&#x2F; console.log(&#39;activated&#39;)</span><br><span class="line">    this.$router.push(this.path);</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave(to, from, next) &#123;</span><br><span class="line">    console.log(this.$router.path);</span><br><span class="line">    this.path &#x3D; this.$route.path;</span><br><span class="line">    next()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-9-TabBar的封装过程"><a href="#2-9-TabBar的封装过程" class="headerlink" title="2.9. TabBar的封装过程"></a>2.9. TabBar的封装过程</h4><ol>
<li><p>如果在下方有一个单独的 TabBar组件,你如何封装</p>
<ul>
<li>自定义 Tabbar组件,在APP中使用</li>
<li>让 TabBar出于底部,并且设置相关的样式</li>
</ul>
</li>
<li><p>TabBar中显示的内容由外界决定</p>
</li>
</ol>
<ul>
<li>定义插槽</li>
<li>fex布局平分 TabBar</li>
</ul>
<ol start="3">
<li>自定义 TabBarlten,可以传入图片和文字</li>
</ol>
<ul>
<li>定义 TabBarltem,并且定义两个插槽:图片、文字。</li>
<li>给两个插槽外层包装div,用于设置样式</li>
<li>填充插槽,实现底部 TabBar的效果</li>
</ul>
<ol start="4">
<li>传入高亮图片</li>
</ol>
<ul>
<li>定义另外一个插槽,插入 active-icon的数据</li>
<li>定义一个变量 inActive,通过 v-show来决定是否显示对应的icon</li>
</ul>
<ol start="5">
<li>TabBarlten绑定路由数据</li>
</ol>
<ul>
<li>安装路由 T npm install vue-router-save</li>
<li>完成 router/ ndex jsf的内容,以及创建对应的组件</li>
<li> main s中注册 router</li>
<li>APP中加入&lt; router-view&gt;组件</li>
</ul>
<ol start="6">
<li>点击item跳转到对应路由,并且动态决定 inActive</li>
</ol>
<ul>
<li>监听tem的点击,通过this. Router. replace0替换路由路径</li>
<li>通过this. Route path. indexof( this link!==-1来判断是否是 active</li>
</ul>
<ol start="7">
<li>动态计算 active样式</li>
</ol>
<ul>
<li>封装新的计算属性: this inActive? color:’red}:</li>
</ul>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>品优购</title>
    <url>/2021/04/20/xiangmu/</url>
    <content><![CDATA[<p>项目名称：品优购</p>
<p>项目描述：品优购是一个电商网站，主要完成PC端首页、列表页、注册页面的制作</p>
<p>开发工具：VScode、Photoshop(fw)、主流浏览器(以Chrome浏览器为主)</p>
<p>技术栈：</p>
<ul>
<li>利用HTML5 + CSS3手动布局，大量使用H5新增标签和样式</li>
<li>采取结构与样式相分离，模块化开发</li>
<li>代码规范</li>
</ul>
<p>模块化开发：</p>
<ul>
<li>样式和结构重复出现，单独做成一个模块</li>
<li>例如common.css</li>
<li>重复使用、修改方便</li>
</ul>
<p>项目名称：黑马面面布局开发</p>
<p>项目描述：移动端页面开发流程、掌握移动端常见布局思路</p>
<p>技术栈：</p>
<ul>
<li>弹性盒子 + rem + LESS </li>
<li>flex + rem + + flexible.js +  LESS </li>
</ul>
<ol start="4">
<li>最小适配设备为iphone5 320px  最大设配设备为iphone8plus</li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>html css</category>
      </categories>
      <tags>
        <tag>html css</tag>
      </tags>
  </entry>
  <entry>
    <title>组件化思想</title>
    <url>/2021/01/14/zujianhua/</url>
    <content><![CDATA[<h5 id="数据结构：数组、堆、栈、链表、树结构"><a href="#数据结构：数组、堆、栈、链表、树结构" class="headerlink" title="数据结构：数组、堆、栈、链表、树结构"></a>数据结构：数组、堆、栈、链表、树结构</h5><h5 id="组件化思想："><a href="#组件化思想：" class="headerlink" title="组件化思想："></a>组件化思想：</h5><ul>
<li>提供了一种抽象，让我们可以开发出独立可复用的小组件来构造我们的应用</li>
<li>任何应用都会被抽象成一颗组件树</li>
</ul>
<h5 id="注册组件的基本步骤："><a href="#注册组件的基本步骤：" class="headerlink" title="注册组件的基本步骤："></a>注册组件的基本步骤：</h5><ul>
<li>创建组件构造器</li>
<li>注册组件</li>
<li>使用组件</li>
</ul>
<p>Vue CLI 3.x(构造Vue的项目)</p>
<p>Vue 2.5.21 -&gt;v2.6.12</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>代码规范</title>
    <url>/2021/03/20/%E5%93%81%E4%BC%98%E8%B4%AD%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h2><p>欢迎使用品优购代码规范， 这个是我借鉴京东前端代码规范，组织的品优购内部规范。旨在增强团队开发协作、提高代码质量和打造开发基石的编码规范，</p>
<p>以下规范是团队基本约定的内容，必须严格遵循。</p>
<h4 id="HTML规范"><a href="#HTML规范" class="headerlink" title="HTML规范"></a>HTML规范</h4><p>基于 <a href="http://www.w3.org/">W3C</a>、<a href="https://developer.apple.com/">苹果开发者</a> 等官方文档，并结合团队业务和开发过程中总结的规范约定，让页面HTML代码更具语义性。</p>
<h4 id="图片规范"><a href="#图片规范" class="headerlink" title="图片规范"></a>图片规范</h4><p>了解各种图片格式特性，根据特性制定图片规范，包括但不限于图片的质量约定、图片引入方式、图片合并处理等，旨在从图片层面优化页面性能。</p>
<h4 id="CSS规范"><a href="#CSS规范" class="headerlink" title="CSS规范"></a>CSS规范</h4><p>统一规范团队 CSS 代码书写风格和使用 CSS 预编译语言语法风格，提供常用媒体查询语句和浏览器私有属性引用，并从业务层面统一规范常用模块的引用。</p>
<h4 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h4><p>从 <code>目录</code>、<code>图片</code>、<code>HTML/CSS文件</code>、<code>ClassName</code> 的命名等层面约定规范团队的命名习惯，增强团队代码的可读性。</p>
<h2 id="2-HTML-规范"><a href="#2-HTML-规范" class="headerlink" title="2. HTML 规范"></a>2. HTML 规范</h2><h3 id="DOCTYPE-声明"><a href="#DOCTYPE-声明" class="headerlink" title="DOCTYPE 声明"></a>DOCTYPE 声明</h3><p>HTML文件必须加上 DOCTYPE 声明，并统一使用 HTML5 的文档声明：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>HTML5标准模版</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML5标准模版<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="页面语言lang"><a href="#页面语言lang" class="headerlink" title="页面语言lang"></a>页面语言lang</h3><p>推荐使用属性值 <code>cmn-Hans-CN</code>（简体, 中国大陆），但是考虑浏览器和操作系统的兼容性，目前仍然使用 <code>zh-CN</code> 属性值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html lang&#x3D;&quot;zh-CN&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>更多地区语言参考：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zh-SG 中文 (简体, 新加坡)   对应 cmn-Hans-SG 普通话 (简体, 新加坡)</span><br><span class="line">zh-HK 中文 (繁体, 香港)     对应 cmn-Hant-HK 普通话 (繁体, 香港)</span><br><span class="line">zh-MO 中文 (繁体, 澳门)     对应 cmn-Hant-MO 普通话 (繁体, 澳门)</span><br><span class="line">zh-TW 中文 (繁体, 台湾)     对应 cmn-Hant-TW 普通话 (繁体, 台湾)</span><br></pre></td></tr></table></figure>

<h3 id="charset-字符集合"><a href="#charset-字符集合" class="headerlink" title="charset 字符集合"></a>charset 字符集合</h3><p>一般情况下统一使用 “UTF-8” 编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;UTF-8&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>由于历史原因，有些业务可能会使用 “GBK” 编码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta charset&#x3D;&quot;GBK&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>请尽量统一写成标准的 “UTF-8”，不要写成 “utf-8” 或 “utf8” 或 “UTF8”。根据 <a href="http://www.ietf.org/rfc/rfc3629">IETF对UTF-8的定义</a>，其编码标准的写法是 “UTF-8”；而 UTF8 或 utf8 的写法只是出现在某些编程系统中，如 .NET framework 的类 System.Text.Encoding 中的一个属性名就叫 UTF8。</p>
<h3 id="书写风格"><a href="#书写风格" class="headerlink" title="书写风格"></a>书写风格</h3><h4 id="HTML代码大小写"><a href="#HTML代码大小写" class="headerlink" title="HTML代码大小写"></a>HTML代码大小写</h4><p>HTML标签名、类名、标签属性和大部分属性值统一用小写</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;demo&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">	</span><br><span class="line">&lt;DIV CLASS&#x3D;&quot;DEMO&quot;&gt;&lt;&#x2F;DIV&gt;</span><br></pre></td></tr></table></figure>
<h3 id="类型属性"><a href="#类型属性" class="headerlink" title="类型属性"></a>类型属性</h3><p>不需要为 CSS、JS 指定类型属性，HTML5 中默认已包含</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; href&#x3D;&quot;&quot; &gt;</span><br><span class="line">&lt;script src&#x3D;&quot;&quot;&gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;link rel&#x3D;&quot;stylesheet&quot; type&#x3D;&quot;text&#x2F;css&quot; href&#x3D;&quot;&quot; &gt;</span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&quot; &gt;&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="元素属性"><a href="#元素属性" class="headerlink" title="元素属性"></a>元素属性</h3><ul>
<li>元素属性值使用双引号语法</li>
<li>元素属性值可以写上的都写上</li>
</ul>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;text&quot;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked&#x3D;&quot;checked&quot; &gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;text&gt;	</span><br><span class="line">&lt;input type&#x3D;&#39;text&#39;&gt;</span><br><span class="line">&lt;input type&#x3D;&quot;radio&quot; name&#x3D;&quot;name&quot; checked &gt;</span><br></pre></td></tr></table></figure>
<h3 id="特殊字符引用"><a href="#特殊字符引用" class="headerlink" title="特殊字符引用"></a>特殊字符引用</h3><p>文本可以和字符引用混合出现。这种方法可以用来转义在文本中不能合法出现的字符。</p>
<p>在 HTML 中不能使用小于号 “&lt;” 和大于号 “&gt;”特殊字符，浏览器会将它们作为标签解析，若要正确显示，在 HTML 源代码中使用字符实体</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;#&quot;&gt;more&gt;&gt;&lt;&#x2F;a&gt;</span><br></pre></td></tr></table></figure>

<h3 id="代码缩进"><a href="#代码缩进" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;jdc&quot;&gt;</span><br><span class="line">    &lt;a href&#x3D;&quot;#&quot;&gt;&lt;&#x2F;a&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>
<h3 id="代码嵌套"><a href="#代码嵌套" class="headerlink" title="代码嵌套"></a>代码嵌套</h3><p>元素嵌套规范，每个块状元素独立一行，内联元素可选</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">    &lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;	</span><br><span class="line">&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">    &lt;h1&gt;&lt;&#x2F;h1&gt;&lt;p&gt;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;&#x2F;div&gt;	</span><br><span class="line">&lt;p&gt; </span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">    &lt;span&gt;&lt;&#x2F;span&gt;</span><br><span class="line">&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p>段落元素与标题元素只能嵌套内联元素</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;span&gt;&lt;&#x2F;span&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;h1&gt;</span><br><span class="line">&lt;p&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;div&gt;&lt;&#x2F;div&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure>
<h2 id="3-图片规范"><a href="#3-图片规范" class="headerlink" title="3. 图片规范"></a>3. 图片规范</h2><h3 id="内容图"><a href="#内容图" class="headerlink" title="内容图"></a>内容图</h3><p>内容图多以商品图等照片类图片形式存在，颜色较为丰富，文件体积较大</p>
<ul>
<li>优先考虑 JPEG 格式，条件允许的话优先考虑 WebP 格式</li>
<li>尽量不使用PNG格式，PNG8 色位太低，PNG24 压缩率低，文件体积大</li>
<li><strong>PC平台单张的图片的大小不应大于 200KB。</strong></li>
</ul>
<h3 id="背景图"><a href="#背景图" class="headerlink" title="背景图"></a>背景图</h3><p>背景图多为图标等颜色比较简单、文件体积不大、起修饰作用的图片</p>
<ul>
<li>PNG 与 GIF 格式，优先考虑使用 PNG 格式,PNG格式允许更多的颜色并提供更好的压缩率</li>
<li>图像颜色比较简单的，如纯色块线条图标，优先考虑使用 PNG8 格式，避免不使用 JPEG 格式</li>
<li>图像颜色丰富而且图片文件不太大的（40KB 以下）或有半透明效果的优先考虑 PNG24 格式</li>
<li>图像颜色丰富而且文件比较大的（40KB - 200KB）优先考虑 JPEG 格式</li>
<li>条件允许的，优先考虑 WebP 代替 PNG 和 JPEG 格式</li>
</ul>
<h2 id="4-CSS规范"><a href="#4-CSS规范" class="headerlink" title="4. CSS规范"></a>4. CSS规范</h2><h3 id="代码格式化"><a href="#代码格式化" class="headerlink" title="代码格式化"></a>代码格式化</h3><p>样式书写一般有两种：一种是紧凑格式 (Compact)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc&#123; display: block;width: 50px;&#125;</span><br></pre></td></tr></table></figure>

<p>一种是展开格式（Expanded）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    display: block;</span><br><span class="line">    width: 50px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>团队约定</strong></p>
<p>统一使用展开格式书写样式</p>
<h3 id="代码大小写"><a href="#代码大小写" class="headerlink" title="代码大小写"></a>代码大小写</h3><p>样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;* 推荐 *&#x2F;</span><br><span class="line">.jdc&#123;</span><br><span class="line">	display:block;</span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">&#x2F;* 不推荐 *&#x2F;</span><br><span class="line">.JDC&#123;</span><br><span class="line">	DISPLAY:BLOCK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><ul>
<li>尽量少用通用选择器 <code>*</code></li>
<li>不使用 ID 选择器</li>
<li>不使用无具体语义定义的标签选择器</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">li</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">li</span> <span class="selector-tag">p</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line">*&#123;&#125;</span><br><span class="line"><span class="selector-id">#jdc</span> &#123;&#125;</span><br><span class="line"><span class="selector-class">.jdc</span> <span class="selector-tag">div</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码缩进-1"><a href="#代码缩进-1" class="headerlink" title="代码缩进"></a>代码缩进</h3><p>统一使用四个空格进行代码缩进，使得各编辑器表现一致（各编辑器有相关配置）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h3><p>每个属性声明末尾都要加分号；</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    width: 100%;</span><br><span class="line">    height: 100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="代码易读性"><a href="#代码易读性" class="headerlink" title="代码易读性"></a>代码易读性</h3><p>左括号与类名之间一个空格，冒号与属性值之间一个空格</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123; </span><br><span class="line">    width: 100%; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc&#123; </span><br><span class="line">    width:100%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>逗号分隔的取值，逗号之后一个空格</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>为单个css选择器或新申明开启新行</p>
<p><em>推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span>, </span><br><span class="line"><span class="selector-class">.jdc_logo</span>, </span><br><span class="line"><span class="selector-class">.jdc_hd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.nav</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span>,jdc_logo,<span class="selector-class">.jdc_hd</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ff0</span>;</span><br><span class="line">&#125;<span class="selector-class">.nav</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>颜色值 <code>rgb()</code> <code>rgba()</code> <code>hsl()</code> <code>hsla()</code> <code>rect()</code> 中不需有空格，且取值不要带有不必要的 0</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba(255,255,255,.5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: rgba( 255, 255, 255, 0.5 );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>属性值十六进制数值能用简写的尽量用简写</p>
<p><em>推荐：</em></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.jdc &#123;</span><br><span class="line">    color: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#ffffff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不要为 <code>0</code> 指明单位</p>
<p><em>推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不推荐：</em></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性值引号"><a href="#属性值引号" class="headerlink" title="属性值引号"></a>属性值引号</h3><p>css属性值需要用到引号时，统一使用单引号</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123; </span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&#x27;Hiragino Sans GB&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 不推荐 */</span></span><br><span class="line"><span class="selector-class">.jdc</span> &#123; </span><br><span class="line">	<span class="attribute">font-family</span>: <span class="string">&quot;Hiragino Sans GB&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="属性书写顺序"><a href="#属性书写顺序" class="headerlink" title="属性书写顺序"></a>属性书写顺序</h3><p>建议遵循以下顺序：</p>
<ol>
<li>布局定位属性：display / position / float / clear / visibility / overflow（建议 display 第一个写，毕竟关系到模式）</li>
<li>自身属性：width / height / margin / padding / border / background</li>
<li>文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word</li>
<li>其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background:linear-gradient …</li>
</ol>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.jdc</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">float</span>: left;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">font-family</span>: Arial, <span class="string">&#x27;Helvetica Neue&#x27;</span>, Helvetica, sans-serif;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#333</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>);</span><br><span class="line">    -webkit-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -moz-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -o-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    -ms-<span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.mozilla.org/css/base/content.css">mozilla官方属性顺序推荐</a></p>
<h2 id="命名规范-1"><a href="#命名规范-1" class="headerlink" title="命名规范"></a>命名规范</h2><p>由历史原因及个人习惯引起的 DOM 结构、命名不统一，导致不同成员在维护同一页面时，效率低下，迭代、维护成本极高。</p>
<h3 id="目录命名"><a href="#目录命名" class="headerlink" title="目录命名"></a>目录命名</h3><ul>
<li>项目文件夹：shoping</li>
<li>样式文件夹：css</li>
<li>脚本文件夹：js</li>
<li>样式类图片文件夹：img</li>
<li>产品类图片文件夹： upload</li>
<li>字体类文件夹： fonts</li>
</ul>
<h3 id="ClassName命名"><a href="#ClassName命名" class="headerlink" title="ClassName命名"></a>ClassName命名</h3><p>ClassName的命名应该尽量精短、明确，必须以<strong>字母开头命名</strong>，且<strong>全部字母为小写</strong>，单词之间<strong>统一使用下划线</strong> “_” 连接</p>
<p>.nav_top</p>
<h4 id="常用命名推荐"><a href="#常用命名推荐" class="headerlink" title="常用命名推荐"></a>常用命名推荐</h4><p><strong>注意</strong>：ad、banner、gg、guanggao 等有机会和广告挂勾的不建议直接用来做ClassName，因为有些浏览器插件（Chrome的广告拦截插件等）会直接过滤这些类名，因此</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;ad&quot;&gt;&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>

<p>这种广告的英文或拼音类名不应该出现</p>
<p>另外，<strong>敏感不和谐字眼</strong>也不应该出现，如：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div class&#x3D;&quot;fuck&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;jer&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;sm&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class="line">&lt;div class&#x3D;&quot;gcd&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">&lt;div class&#x3D;&quot;ass&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">&lt;div class&#x3D;&quot;KMT&quot;&gt;&lt;&#x2F;div&gt; </span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>ClassName</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>about</td>
<td>关于</td>
</tr>
<tr>
<td>account</td>
<td>账户</td>
</tr>
<tr>
<td>arrow</td>
<td>箭头图标</td>
</tr>
<tr>
<td>article</td>
<td>文章</td>
</tr>
<tr>
<td>aside</td>
<td>边栏</td>
</tr>
<tr>
<td>audio</td>
<td>音频</td>
</tr>
<tr>
<td>avatar</td>
<td>头像</td>
</tr>
<tr>
<td>bg,background</td>
<td>背景</td>
</tr>
<tr>
<td>bar</td>
<td>栏（工具类）</td>
</tr>
<tr>
<td>branding</td>
<td>品牌化</td>
</tr>
<tr>
<td>crumb,breadcrumbs</td>
<td>面包屑</td>
</tr>
<tr>
<td>btn,button</td>
<td>按钮</td>
</tr>
<tr>
<td>caption</td>
<td>标题，说明</td>
</tr>
<tr>
<td>category</td>
<td>分类</td>
</tr>
<tr>
<td>chart</td>
<td>图表</td>
</tr>
<tr>
<td>clearfix</td>
<td>清除浮动</td>
</tr>
<tr>
<td>close</td>
<td>关闭</td>
</tr>
<tr>
<td>col,column</td>
<td>列</td>
</tr>
<tr>
<td>comment</td>
<td>评论</td>
</tr>
<tr>
<td>community</td>
<td>社区</td>
</tr>
<tr>
<td>container</td>
<td>容器</td>
</tr>
<tr>
<td>content</td>
<td>内容</td>
</tr>
<tr>
<td>copyright</td>
<td>版权</td>
</tr>
<tr>
<td>current</td>
<td>当前态，选中态</td>
</tr>
<tr>
<td>default</td>
<td>默认</td>
</tr>
<tr>
<td>description</td>
<td>描述</td>
</tr>
<tr>
<td>details</td>
<td>细节</td>
</tr>
<tr>
<td>disabled</td>
<td>不可用</td>
</tr>
<tr>
<td>entry</td>
<td>文章，博文</td>
</tr>
<tr>
<td>error</td>
<td>错误</td>
</tr>
<tr>
<td>even</td>
<td>偶数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>fail</td>
<td>失败（提示）</td>
</tr>
<tr>
<td>feature</td>
<td>专题</td>
</tr>
<tr>
<td>fewer</td>
<td>收起</td>
</tr>
<tr>
<td>field</td>
<td>用于表单的输入区域</td>
</tr>
<tr>
<td>figure</td>
<td>图</td>
</tr>
<tr>
<td>filter</td>
<td>筛选</td>
</tr>
<tr>
<td>first</td>
<td>第一个，常用于列表中</td>
</tr>
<tr>
<td>footer</td>
<td>页脚</td>
</tr>
<tr>
<td>forum</td>
<td>论坛</td>
</tr>
<tr>
<td>gallery</td>
<td>画廊</td>
</tr>
<tr>
<td>group</td>
<td>模块，清除浮动</td>
</tr>
<tr>
<td>header</td>
<td>页头</td>
</tr>
<tr>
<td>help</td>
<td>帮助</td>
</tr>
<tr>
<td>hide</td>
<td>隐藏</td>
</tr>
<tr>
<td>hightlight</td>
<td>高亮</td>
</tr>
<tr>
<td>home</td>
<td>主页</td>
</tr>
<tr>
<td>icon</td>
<td>图标</td>
</tr>
<tr>
<td>info,information</td>
<td>信息</td>
</tr>
<tr>
<td>last</td>
<td>最后一个，常用于列表中</td>
</tr>
<tr>
<td>links</td>
<td>链接</td>
</tr>
<tr>
<td>login</td>
<td>登录</td>
</tr>
<tr>
<td>logout</td>
<td>退出</td>
</tr>
<tr>
<td>logo</td>
<td>标志</td>
</tr>
<tr>
<td>main</td>
<td>主体</td>
</tr>
<tr>
<td>menu</td>
<td>菜单</td>
</tr>
<tr>
<td>meta</td>
<td>作者、更新时间等信息栏，一般位于标题之下</td>
</tr>
<tr>
<td>module</td>
<td>模块</td>
</tr>
<tr>
<td>more</td>
<td>更多（展开）</td>
</tr>
<tr>
<td>msg,message</td>
<td>消息</td>
</tr>
<tr>
<td>nav,navigation</td>
<td>导航</td>
</tr>
<tr>
<td>next</td>
<td>下一页</td>
</tr>
<tr>
<td>nub</td>
<td>小块</td>
</tr>
<tr>
<td>odd</td>
<td>奇数，常用于多行列表或表格中</td>
</tr>
<tr>
<td>off</td>
<td>鼠标离开</td>
</tr>
<tr>
<td>on</td>
<td>鼠标移过</td>
</tr>
<tr>
<td>output</td>
<td>输出</td>
</tr>
<tr>
<td>pagination</td>
<td>分页</td>
</tr>
<tr>
<td>pop,popup</td>
<td>弹窗</td>
</tr>
<tr>
<td>preview</td>
<td>预览</td>
</tr>
<tr>
<td>previous</td>
<td>上一页</td>
</tr>
<tr>
<td>primary</td>
<td>主要</td>
</tr>
<tr>
<td>progress</td>
<td>进度条</td>
</tr>
<tr>
<td>promotion</td>
<td>促销</td>
</tr>
<tr>
<td>rcommd,recommendations</td>
<td>推荐</td>
</tr>
<tr>
<td>reg,register</td>
<td>注册</td>
</tr>
<tr>
<td>save</td>
<td>保存</td>
</tr>
<tr>
<td>search</td>
<td>搜索</td>
</tr>
<tr>
<td>secondary</td>
<td>次要</td>
</tr>
<tr>
<td>section</td>
<td>区块</td>
</tr>
<tr>
<td>selected</td>
<td>已选</td>
</tr>
<tr>
<td>share</td>
<td>分享</td>
</tr>
<tr>
<td>show</td>
<td>显示</td>
</tr>
<tr>
<td>sidebar</td>
<td>边栏，侧栏</td>
</tr>
<tr>
<td>slide</td>
<td>幻灯片，图片切换</td>
</tr>
<tr>
<td>sort</td>
<td>排序</td>
</tr>
<tr>
<td>sub</td>
<td>次级的，子级的</td>
</tr>
<tr>
<td>submit</td>
<td>提交</td>
</tr>
<tr>
<td>subscribe</td>
<td>订阅</td>
</tr>
<tr>
<td>subtitle</td>
<td>副标题</td>
</tr>
<tr>
<td>success</td>
<td>成功（提示）</td>
</tr>
<tr>
<td>summary</td>
<td>摘要</td>
</tr>
<tr>
<td>tab</td>
<td>标签页</td>
</tr>
<tr>
<td>table</td>
<td>表格</td>
</tr>
<tr>
<td>txt,text</td>
<td>文本</td>
</tr>
<tr>
<td>thumbnail</td>
<td>缩略图</td>
</tr>
<tr>
<td>time</td>
<td>时间</td>
</tr>
<tr>
<td>tips</td>
<td>提示</td>
</tr>
<tr>
<td>title</td>
<td>标题</td>
</tr>
<tr>
<td>video</td>
<td>视频</td>
</tr>
<tr>
<td>wrap</td>
<td>容器，包，一般用于最外层</td>
</tr>
<tr>
<td>wrapper</td>
<td>容器，包，一般用于最外层</td>
</tr>
</tbody></table>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>html css</category>
      </categories>
      <tags>
        <tag>html css</tag>
      </tags>
  </entry>
  <entry>
    <title>heimamm</title>
    <url>/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/</url>
    <content><![CDATA[<h2 id="黑马面面布局开发"><a href="#黑马面面布局开发" class="headerlink" title="黑马面面布局开发"></a>黑马面面布局开发</h2><h3 id="一、目的"><a href="#一、目的" class="headerlink" title="一、目的"></a>一、目的</h3><ol>
<li>了解移动端页面开发流程</li>
<li>掌握移动端常见布局思路</li>
</ol>
<h4 id="1-1-技术方案"><a href="#1-1-技术方案" class="headerlink" title="1.1  技术方案"></a>1.1  技术方案</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 弹性盒子 + rem + LESS </span><br><span class="line"><span class="number">4</span>. 最小适配设备为iphone5 <span class="number">320px</span>  最大设配设备为iphone8plus(ipad能正常查看内容即可)</span><br></pre></td></tr></table></figure>

<h4 id="1-2-代码规范"><a href="#1-2-代码规范" class="headerlink" title="1.2 代码规范"></a>1.2 代码规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. 类名语义化,尽量精短、明确，必须以字母开头命名，且全部字母为小写，单词之间统一使用下划线“_” 连接</span><br><span class="line"><span class="number">2</span>. 类名嵌套层次尽量不超过三层</span><br><span class="line"><span class="number">3</span>. 尽量避免直接使用元素选择器</span><br><span class="line"><span class="number">4</span>. 属性书写顺序</span><br><span class="line">   布局定位属性：<span class="attribute">display</span> / <span class="attribute">position</span> / <span class="attribute">float</span> / <span class="attribute">clear</span> / <span class="attribute">visibility</span> / <span class="attribute">overflow</span></span><br><span class="line">   尺寸属性：<span class="attribute">width</span> / <span class="attribute">height</span> / <span class="attribute">margin</span> / <span class="attribute">padding</span> / <span class="attribute">border</span> / <span class="attribute">background</span></span><br><span class="line">   文本属性：<span class="attribute">color</span> / <span class="attribute">font</span> / <span class="attribute">text-decoration</span> / <span class="attribute">text-align</span> / <span class="attribute">vertical-align</span></span><br><span class="line">   其他属性（CSS3）：<span class="attribute">content</span> / <span class="attribute">cursor</span> / <span class="attribute">border-radius</span> / <span class="attribute">box-shadow</span> / <span class="attribute">text-shadow</span></span><br><span class="line"><span class="number">5</span>. 避免使用id选择器</span><br><span class="line"><span class="number">6</span>. 避免使用通配符*和!important</span><br></pre></td></tr></table></figure>

<h4 id="1-2-目录规范"><a href="#1-2-目录规范" class="headerlink" title="1.2 目录规范"></a>1.2 目录规范</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">项目文件夹：heimamm</span><br><span class="line">	样式文件夹：css</span><br><span class="line">	业务类图片文件夹：images</span><br><span class="line">	样式类图片文件夹： icons</span><br><span class="line">	字体类文件夹： fonts</span><br></pre></td></tr></table></figure>

<h3 id="二、流程开发"><a href="#二、流程开发" class="headerlink" title="二、流程开发"></a>二、流程开发</h3><h4 id="2-1-蓝湖-摹客协作平台"><a href="#2-1-蓝湖-摹客协作平台" class="headerlink" title="2.1 蓝湖/摹客协作平台"></a>2.1 蓝湖/摹客协作平台</h4><ul>
<li>UI设计师 psd效果图完成后，会上传到蓝湖//摹客里面，同时会拉前端工程师进入开发</li>
<li>大部分情况下，UI会把图片按照前端设计要求给切好</li>
<li>UI设计师 上传蓝湖到或者/摹客（了解）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>. /摹客官网地址： https://www.mockplus.cn/  注册一个账号</span><br><span class="line"><span class="number">2</span>. 下载moke  ps插件 </span><br><span class="line"><span class="number">3</span>. PS 安装/摹客/蓝湖插件</span><br><span class="line"><span class="number">3</span>. 打开PS/摹客/蓝湖插件</span><br><span class="line"><span class="number">4</span>. 上传（需要切图，需要先标注切图）</span><br><span class="line"><span class="number">5</span>. 查看项目</span><br><span class="line"><span class="number">6</span>. 邀请成员进入（分享按钮，链接地址）</span><br></pre></td></tr></table></figure>

<ul>
<li>前端设计师可以直接/摹客/蓝湖测量取值</li>
</ul>
<h4 id="2-2-适配方案"><a href="#2-2-适配方案" class="headerlink" title="2.2 适配方案"></a>2.2 适配方案</h4><ul>
<li>flex 布局  </li>
<li>百分比布局</li>
<li>rem布局</li>
<li>vw/vh布局</li>
<li>响应式布局</li>
<li>本次案例  flex + rem + + flexible.js +  LESS   </li>
</ul>
<h4 id="2-3-初始化文件"><a href="#2-3-初始化文件" class="headerlink" title="2.3  初始化文件"></a>2.3  初始化文件</h4><ul>
<li><p>引入  normalize.css</p>
</li>
<li><p>less 中 初始化body样式</p>
</li>
<li><p>约束范围</p>
</li>
<li><p>~~~css<br>@media screen and (min-width: 750px) {<br>  html {</p>
<pre><code>font-size: 37.5px !important;
</code></pre>
<p>  }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">#### 2.4 布局模块</span><br><span class="line"></span><br><span class="line">1. 头部模块  .header    高度为 80px </span><br><span class="line"></span><br><span class="line">2. nav 模块制作  多用 flex</span><br><span class="line"></span><br><span class="line">3. 充电学习 阴影</span><br><span class="line"></span><br><span class="line">   ~~~css</span><br><span class="line">   box-shadow: 0 0px 10px rgba(0, 0, 0, 0.1)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="2-5-swiper-插件使用"><a href="#2-5-swiper-插件使用" class="headerlink" title="2.5 swiper 插件使用"></a>2.5 swiper 插件使用</h4><p>官网地址：<a href="https://www.swiper.com.cn/">https://www.swiper.com.cn/</a></p>
<ul>
<li>下载需要的css和js文件  html页面中 引入相关文件</li>
<li>官网找到类似案例，复制html结构，css样式  js 语法</li>
<li> 根据需求定制修改模块</li>
</ul>
<h4 id="2-6-图标字体上传下载"><a href="#2-6-图标字体上传下载" class="headerlink" title="2.6 图标字体上传下载"></a>2.6 图标字体上传下载</h4><p>上传步骤：</p>
<ol>
<li><p>让UI美工准备好 图标字体（必须是svg格式）</p>
</li>
<li><p>点上传按钮（保留颜色并提交）</p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593317258207.png" alt="59331725820"></p>
</li>
<li><p>生成之后加入购物车即可</p>
</li>
<li><p>点击下载 — 下载代码</p>
</li>
</ol>
<p>小技巧：  如何批量下载全部字体图标呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> span = <span class="built_in">document</span>.querySelectorAll(<span class="string">&#x27;.icon-cover&#x27;</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = span.length; i &lt; len; i++) &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(span[i].querySelector(<span class="string">&#x27;span&#x27;</span>).click());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="2-7-上传码云并发布部署静态网站"><a href="#2-7-上传码云并发布部署静态网站" class="headerlink" title="2.7  上传码云并发布部署静态网站"></a>2.7  上传码云并发布部署静态网站</h4><p>准备工作：  需要下载git软件    需要码云注册账号</p>
<p>git 可以把我们的本地网站提交上传到远程仓库（码云 gitee）里面    类似以前的   ftp  </p>
<p>码云  就是远程仓库， 类似服务器 </p>
<ol>
<li><p>码云创建新的仓库。   heimamm  </p>
</li>
<li><p>利用git 提交 把本地网站提交到 码云新建的仓库里面</p>
<ul>
<li><p>在网站根目录右键– Git Bash Here</p>
</li>
<li><p>如果是第一次利用git提交，请配置好全局选项</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git config --<span class="built_in">global</span> user.name <span class="string">&quot;用户名&quot;</span></span><br><span class="line">git config --<span class="built_in">global</span> user.email <span class="string">&quot;你的邮箱地址&quot;</span></span><br></pre></td></tr></table></figure></li>
<li><p>初始化仓库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure></li>
<li><p>把本地文件放到暂存区</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure></li>
<li><p>把本地文件放到本地仓库里面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">&#x27;提交黑马面面网站&#x27;</span></span><br></pre></td></tr></table></figure></li>
<li><p>链接远程仓库</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git remote add origin 你新建的仓库地址</span><br></pre></td></tr></table></figure></li>
<li><p>把本地仓库的文件推送到远程仓库 push</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
<li><p>码云部署发布静态网站</p>
<ul>
<li><p>在当前仓库中，点击  “服务”   菜单 </p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336007530.png" alt="59333600753"></p>
</li>
<li><p>选择 Gitee Pages</p>
<p> <img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336043016.png" alt="59333604301"></p>
</li>
<li><p>选择 “启动” 按钮</p>
<p> <img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336091814.png" alt="59333609181"></p>
</li>
<li><p>稍等之后，会拿到地址，就可以利用这个地址来预览网页了<img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336164295.png" alt="59333616429"></p>
</li>
<li><p>当然你也可以利用  草料二维码 生成二维码    <a href="https://cli.im/">https://cli.im/</a></p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336349811.png" alt="59333634981"></p>
</li>
</ul>
</li>
</ol>
<p>最后： 如果提交网站，你不愿意用git 提交， 可以直接找到仓库，里面有文件，选择上传本地文件即可。</p>
<p> <img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336426566.png" alt="59333642656"></p>
<p><img src="/2021/04/20/%E9%BB%91%E9%A9%AC%E9%9D%A2%E9%9D%A2%E7%A7%BB%E5%8A%A8%E9%A1%B5%E9%9D%A2%E5%B8%83%E5%B1%80/Users\kandy\AppData\Local\Temp\1593336450481.png" alt="59333645048"></p>
<p>但是，1个小时内，只能上传 20个以内的文件， 前端人员，git必备技能</p>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>html css</category>
      </categories>
      <tags>
        <tag>flex rem less</tag>
      </tags>
  </entry>
  <entry>
    <title>vueDay5</title>
    <url>/2021/04/23/vueDay5/</url>
    <content><![CDATA[<h3 id="一、Promise"><a href="#一、Promise" class="headerlink" title="一、Promise"></a>一、Promise</h3><h4 id="1-1-是什么？"><a href="#1-1-是什么？" class="headerlink" title="1.1. 是什么？"></a>1.1. 是什么？</h4><p>Promise是异步编程的一种解决方案。</p>
<h4 id="1-2-做什么？"><a href="#1-2-做什么？" class="headerlink" title="1.2. 做什么？"></a>1.2. 做什么？</h4><p>用于网络请求非常复杂的情形下</p>
<p>口一种很常见的场景应该就是网络请求了<br>口我们封装一个网络请求的函数,因为不能立即拿到结果,所以不能像简单的3+4=7—样将结果返回<br>口所以往往我们会传入另外一个函数,在数据请求成功时,将数据通过传入的函数回调出去<br>口如果只是一个简单的网络请求,那么这种方案不会给我们带来很大的麻烦。</p>
<p>■但是,当网络请求非常复杂时,就会出现回调地狱</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  什么情况下会用到Promise?</span></span><br><span class="line">  <span class="comment">//  一般情况下是有一些异步操作的时，使用promise对这个一步操作进行封装</span></span><br><span class="line">  <span class="comment">// executor:执行</span></span><br><span class="line">  <span class="comment">// new -&gt; 构造函数(1.保存了一些状态 2.执行传入的函数)</span></span><br><span class="line">  <span class="comment">// 在执行传入的回调函数时，会传入两个参数，resolve,reject，这两个参数本身又是函数</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 失败的时候调用reject</span></span><br><span class="line">      reject(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">      <span class="comment">// 成功的时候调用resolve</span></span><br><span class="line">      <span class="comment">// resolve(&#x27;Hello World&#x27;)</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;).then(<span class="function">(<span class="params">data</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 100行的处理代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">  &#125;).catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>



<h4 id="1-3-promise的三种状态"><a href="#1-3-promise的三种状态" class="headerlink" title="1.3. promise的三种状态"></a>1.3. promise的三种状态</h4><ul>
<li>pending:等待状态,比如正在进行网络请求,或者定时<br>器没有到时间。</li>
<li>fufl:满足状态,当我们主动回调了 resolve时,就处于<br>该状态,并且会回调then0</li>
<li>reject:拒绝状态,当我们主动回调了 reject时,就处于该<br>状态,并且会回调 catch0</li>
</ul>
<p><img src="/2021/04/23/vueDay5/promise%E4%B8%89%E7%A7%8D%E7%8A%B6%E6%80%81.jpg"></p>
<p>sync→&gt;同步(synchronization)<br>asnc→&gt;异步(asynchronization)</p>
<p>asnc operation异步操作</p>
<p>wropped into 包裹进去</p>
<p>另一种写法</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;Hello World&#x27;)</span></span><br><span class="line">        reject(<span class="string">&#x27;error message&#x27;</span>)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then((<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;), <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-4-Promise链式调用："><a href="#1-4-Promise链式调用：" class="headerlink" title="1.4. Promise链式调用："></a>1.4. Promise链式调用：</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 链式编程</span></span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一次网络请求的代码</span></span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve()</span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">  &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//第一次拿到结果的处理代码</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;Hello World&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//第二次网络请求的代码</span></span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//第二次拿到结果的处理代码</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Vuejs&#x27;</span>)</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">//第三次网络请求的代码</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          resolve()</span><br><span class="line">        &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">//第三次拿到结果的处理代码</span></span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">&#x27;Hello Python&#x27;</span>)</span><br><span class="line">        &#125;, <span class="number">1000</span>)</span><br><span class="line">        &#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// wrapped into</span></span><br><span class="line">   <span class="comment">// 网络请求: aaa -&gt; 自己处理(10行)</span></span><br><span class="line">   <span class="comment">// 处理: aaa111 -&gt; 自己处理(10行)</span></span><br><span class="line">   <span class="comment">// 处理: aaa111222 -&gt; 自己处理</span></span><br><span class="line">  <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">    setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">      resolve(&#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment">    &#125;, 1000)</span></span><br><span class="line"><span class="comment">  &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     // 1.自己处理10行代码</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第一层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     // 2.对结果进行第一次处理</span></span><br><span class="line"><span class="comment">     return new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(res + &#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第二层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     return new Promise((resolve) =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(res + &#x27;222&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log((res + &#x27;第三层的10行处理代码&#x27;))</span></span><br><span class="line"><span class="comment">   &#125;)*/</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// new Promise(resolve =&gt; resolve(结果))简写</span></span><br><span class="line">   <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(&#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;, 1000)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     // 1.自己处理10行代码</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第一层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     // 2.对结果进行第一次处理</span></span><br><span class="line"><span class="comment">     return Promise.resolve(res + &#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第二层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     return Promise.resolve(res + &#x27;222&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log((res + &#x27;第三层的10行处理代码&#x27;))</span></span><br><span class="line"><span class="comment">   &#125;)*/</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 继续简写</span></span><br><span class="line">   <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">     setTimeout(() =&gt; &#123;</span></span><br><span class="line"><span class="comment">       resolve(&#x27;aaa&#x27;)</span></span><br><span class="line"><span class="comment">     &#125;, 1000)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     // 1.自己处理10行代码</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第一层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     // 2.对结果进行第一次处理</span></span><br><span class="line"><span class="comment">     return (res + &#x27;111&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log(res, &#x27;第二层的10行处理代码&#x27;);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     return (res + &#x27;222&#x27;)</span></span><br><span class="line"><span class="comment">   &#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">     console.log((res + &#x27;第三层的10行处理代码&#x27;))</span></span><br><span class="line"><span class="comment">   &#125;)*/</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">// 失败了时</span></span><br><span class="line">   <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       resolve(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">     &#125;, <span class="number">1000</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="comment">// 1.自己处理10行代码</span></span><br><span class="line">     <span class="built_in">console</span>.log(res, <span class="string">&#x27;第一层的10行处理代码&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="comment">// 2.对结果进行第一次处理</span></span><br><span class="line">     <span class="comment">// return Promise.reject(&#x27;error message&#x27;)</span></span><br><span class="line">     <span class="keyword">throw</span> <span class="string">&#x27;error message&#x27;</span></span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(res, <span class="string">&#x27;第二层的10行处理代码&#x27;</span>);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> (res + <span class="string">&#x27;222&#x27;</span>)</span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log((res + <span class="string">&#x27;第三层的10行处理代码&#x27;</span>))</span><br><span class="line">   &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="built_in">console</span>.log(err);</span><br><span class="line">   &#125;)</span><br></pre></td></tr></table></figure>

<h4 id="1-5-Promise的all方法使用"><a href="#1-5-Promise的all方法使用" class="headerlink" title="1.5. Promise的all方法使用"></a>1.5. Promise的all方法使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Promise</span>.all([</span><br><span class="line">    <span class="comment">/*new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      $.ajax(&#123;</span></span><br><span class="line"><span class="comment">        url: &#x27;url1&#x27;,</span></span><br><span class="line"><span class="comment">        success: function (data) &#123;</span></span><br><span class="line"><span class="comment">          resolve(data)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;)</span></span><br><span class="line"><span class="comment">    &#125;),</span></span><br><span class="line"><span class="comment">    new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line"><span class="comment">      $.ajax(&#123;</span></span><br><span class="line"><span class="comment">        url: &#x27;url2&#x27;,</span></span><br><span class="line"><span class="comment">        success: function (data) &#123;</span></span><br><span class="line"><span class="comment">          resolve(data)</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">      &#125;)</span></span><br><span class="line"><span class="comment">    &#125;)*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;result1&#x27;)</span></span><br><span class="line">        resolve(&#123;<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">      &#125;, <span class="number">2000</span>)</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// resolve(&#x27;result2&#x27;)</span></span><br><span class="line">        resolve(&#123;<span class="attr">name</span>: <span class="string">&#x27;why&#x27;</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;)</span><br><span class="line">      &#125;, <span class="number">1000</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  ]).then(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">/*results[0]</span></span><br><span class="line"><span class="comment">    results[1]*/</span></span><br><span class="line">    <span class="built_in">console</span>.log(results);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="二、Vuex"><a href="#二、Vuex" class="headerlink" title="二、Vuex"></a>二、Vuex</h3><h4 id="2-1-Vuex是做什么的"><a href="#2-1-Vuex是做什么的" class="headerlink" title="2.1. Vuex是做什么的"></a>2.1. Vuex是做什么的</h4><ul>
<li>官方解释:Vuex是一个专为 Vue. js应用程序开发的<strong>状态管理</strong>模式<ul>
<li>它采用集中式存储管理应用的所有组件的状态,并以相应的规则保证状态以一种可预测的方式发生变化。</li>
<li>Vuex也集成到Vue的官方调试工具 devtools extension,提供了诸如零配置的time- travel调试、状态快照导入导出等高级调试功能。</li>
</ul>
</li>
<li>状态管理到底是什么?<ul>
<li>状态管理模式、集中式存储管理这些名词听起来就非常高大上,让人捉摸不透。</li>
<li>其实,你可以简单的将其看成把需要多个组件共享的变量全部存储在一个对象里面。</li>
<li>然后,将这个对象放在顶层的Vue实例中,让其他组件可以使用。</li>
<li>那么,多个组件就可以共享这个对象中的所有变量属性</li>
</ul>
</li>
</ul>
<h4 id="2-2-管理什么状态"><a href="#2-2-管理什么状态" class="headerlink" title="2.2. 管理什么状态"></a>2.2. 管理什么状态</h4><ul>
<li>有什么状态时需要我们在多个组件间共享的呢?<ul>
<li>如果你做过大型开放,你一定遇到过多个状态,在多个界面问的共享问题。<ul>
<li>比如用户的登录状态、用户名称、头像、地理位置信息等等。</li>
<li>比如商品的收藏、购物车中的物品等等。</li>
<li>这些状态信息,我们都可以放在统一的地方,对它进行保存和管理,而且它们还是响应式的</li>
</ul>
</li>
</ul>
</li>
</ul>
<blockquote>
<p>Talk is cheap, Show me the code. （来自LInus)</p>
<p>linus -&gt; linux, git</p>
</blockquote>
<h4 id="2-3-单界面到多界面状态管理切换"><a href="#2-3-单界面到多界面状态管理切换" class="headerlink" title="2.3. 单界面到多界面状态管理切换"></a>2.3. 单界面到多界面状态管理切换</h4><p>单页面管理状态</p>
<p><img src="/2021/04/23/vueDay5/%E5%8D%95%E9%A1%B5%E9%9D%A2%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86.jpg"></p>
<p>多界面状态管理</p>
<ul>
<li>全局单例摸式(大管家)<ul>
<li>我们现在要做的就是将共享的状态抽取出来,交给我们的大管家,统一进行管理</li>
<li>之后,你们每个试图,按照我规定好的规定,进行访问和修改等操作。</li>
<li>这就是vuex背后的基本思想</li>
</ul>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm intall vuex --save</span><br></pre></td></tr></table></figure>

<p>store-&gt; index.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 安装插件</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 创建对象</span></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state: &#123;</span><br><span class="line">    counter: <span class="number">1000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  mutations: &#123;</span><br><span class="line">    <span class="function"><span class="title">increment</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter++</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">decrement</span>(<span class="params">state</span>)</span> &#123;</span><br><span class="line">      state.counter--</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  actions: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  getters: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line">  modules: &#123;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3. 导出store独享</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">&#x27;./App&#x27;</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&quot;./store&quot;</span>;</span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p>App.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">    &lt;h2&gt;--------App内容-------------&lt;&#x2F;h2&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123; message &#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--    &lt;h2&gt;&#123;&#123; counter &#125;&#125;&lt;&#x2F;h2&gt;--&gt;</span><br><span class="line">    &lt;h2&gt;&#123;&#123;$store.state.counter&#125;&#125;&lt;&#x2F;h2&gt;</span><br><span class="line"></span><br><span class="line">&lt;!--    &lt;button @click&#x3D;&quot;counter&amp;#45;&amp;#45;&quot;&gt;-&lt;&#x2F;button&gt;--&gt;</span><br><span class="line">&lt;!--    &lt;button @click&#x3D;&quot;counter++&quot;&gt;+&lt;&#x2F;button&gt;--&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;addition&quot;&gt;+&lt;&#x2F;button&gt;</span><br><span class="line">    &lt;button @click&#x3D;&quot;subtraction&quot;&gt;-&lt;&#x2F;button&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &lt;h2&gt;----------Hello Vuex内容---------&lt;&#x2F;h2&gt;</span><br><span class="line">&lt;!--    &lt;hello-vuex :counter&#x3D;&quot;counter&quot;&#x2F;&gt;--&gt;</span><br><span class="line">    &lt;hello-vuex &#x2F;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import HelloVuex from &quot;.&#x2F;components&#x2F;HelloVuex&quot;;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &#39;App&#39;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    HelloVuex</span><br><span class="line">  &#125;,</span><br><span class="line">  data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      message: &#39;我是App组件&#39;,</span><br><span class="line">      &#x2F;&#x2F; counter: 0</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    addition()&#123;</span><br><span class="line">      this.$store.commit(&#39;increment&#39;)</span><br><span class="line">    &#125;,</span><br><span class="line">    subtraction()&#123;</span><br><span class="line">      this.$store.commit(&#39;decrement&#39;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="2-4-Vue状态管理图例"><a href="#2-4-Vue状态管理图例" class="headerlink" title="2.4. Vue状态管理图例"></a>2.4. Vue状态管理图例</h4><p><img src="/2021/04/23/vueDay5/vuex%E7%8A%B6%E6%80%81%E7%AE%A1%E7%90%86%E5%9B%BE%E4%BE%8B.jpg"></p>
<h4 id="2-5-vuex核心概念"><a href="#2-5-vuex核心概念" class="headerlink" title="2.5. vuex核心概念"></a>2.5. vuex核心概念</h4><ul>
<li>State 保存共享状态 -&gt;单一状态数</li>
<li>Getters 类似于组件中计算属性</li>
<li>Mutation 状态更新</li>
<li>Action 异步操作</li>
<li>Module 划分模块</li>
</ul>
<h5 id="2-5-1-State单一状态树"><a href="#2-5-1-State单一状态树" class="headerlink" title="2.5.1 State单一状态树"></a>2.5.1 State单一状态树</h5><p>（Single Source of Truth，可以翻译成单一数据源）<br>如果你的状态信息是保存到多个 Store对象中的,那么之后的管理和维护等等都会变得特别困难。<br>所以∨uex也使用了单一状态树来管理应用层级的全部状态。<br>单一状态树能够让我们最直接的方式找到某个状态的片段,而且在之后的维护和调试过程中,也可以非常方便的管理和维护。</p>
<h5 id="2-5-2-Getters基本使用"><a href="#2-5-2-Getters基本使用" class="headerlink" title="2.5.2. Getters基本使用"></a>2.5.2. Getters基本使用</h5><p>需要从 store中获取一些 state变异后的状态</p>
<p><img src="/2021/04/23/vueDay5/Getters%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8.jpg"></p>
<h5 id="2-5-3-Mutation状态更新"><a href="#2-5-3-Mutation状态更新" class="headerlink" title="2.5.3 Mutation状态更新"></a>2.5.3 Mutation状态更新</h5><ol>
<li><strong>Vuex的 store状态的更新唯一方式:提交 Mutation</strong></li>
</ol>
<ul>
<li> Mutation主要包括两部分:</li>
<li>字符串的事件类型(type)</li>
<li>一个回调函数( handler),该回调函数的第一个参数就是 state</li>
</ul>
<ol start="2">
<li>Mutation传递参数<br>参数被称为是 mutation的载荷( Payload)<br>■ Mutation中的代码:</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">decrement</span>(<span class="params">state, n</span>)</span> &#123;</span><br><span class="line">  state.count -= n</span><br><span class="line">&#125;</span><br><span class="line">decrement: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;decrement&#x27;</span>, <span class="number">2</span> )</span><br><span class="line">&#125;              </span><br></pre></td></tr></table></figure>

<p>很多参数需要传递,通常会以对象的形式传递也就是 payload是一个对象，可以再从对象中取出相关的信息</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">changeCount</span>(<span class="params">state, payload</span>)</span> &#123;</span><br><span class="line">  state.count = payload.count</span><br><span class="line">&#125;</span><br><span class="line">changeCount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.$store.commit(<span class="string">&#x27;changeCount&#x27;</span>, &#123;<span class="attr">count</span>: <span class="number">0</span>&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Mutation提交风格<ol>
<li>上面的通过 commit进行提交是种普通的方式</li>
<li>Vue还提供了另外一种风格,它是一个包含type属性的对象</li>
</ol>
</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="title">addCount</span>(<span class="params">count</span>)</span> &#123;</span><br><span class="line">      <span class="comment">// payload: 负载</span></span><br><span class="line">      <span class="comment">// 1. 普通的提交封装</span></span><br><span class="line">      <span class="built_in">this</span>.$store.commit(<span class="string">&quot;incrementCount&quot;</span>, count)</span><br><span class="line">    <span class="comment">//  2. 特出的提交封装</span></span><br><span class="line">      <span class="built_in">this</span>.$store.commit(&#123;</span><br><span class="line">        type: <span class="string">&#x27;incrementCount&#x27;</span>,</span><br><span class="line">        count</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>Mutation响应规则</li>
</ol>
<ul>
<li>Vuex的 store中的 state是响应式的,当 state中的数据发生改变时,Wue组件会自动更新</li>
<li>这就要求我们必须遵守一些vuex对应的规则:<ul>
<li>提前在 store中初始化好所需的属性.</li>
<li>当给 state中的对象添加新属性时,使用下面的方式</li>
</ul>
</li>
</ul>
<blockquote>
<p>方式一:使用 Vue. set(obj, newProp,123)<br>方式二:用新对象给旧对象重新赋值</p>
</blockquote>
<ol start="5">
<li><p>Mutation常量类型一概念</p>
<ul>
<li>我们来考虑下面的问题<ul>
<li>在 mutation中我们定义了很多事件类型(也就是其中的方法名称）</li>
<li>当我们的项目增大时,Wuex管理的状态越来越多,需要更新状态的情况越来越多,那么意味着 Mutation中的方法越来越多</li>
<li>方法过多,使用者需要花费大量的经历去记住这些方法甚至是多个文件间来回切换查看方法名称甚至如果不<br>是复制的时候可能还会出现写铠的情况</li>
</ul>
</li>
</ul>
</li>
<li><p>Mutation同步函数</p>
<ul>
<li>通常情况下,∨uex要求我们 Mutation中的方法必须是同步方法</li>
<li>主要的原因是当我们使用 devtools时,可以 devtools可以帮助我们捕捉 mutation的快照</li>
<li>但是如果是异步操作,那么 devtools将不能很好的追踪这个操作什么时候会被完成</li>
</ul>
</li>
</ol>
<h4 id="2-6Action的基本定义"><a href="#2-6Action的基本定义" class="headerlink" title="2.6Action的基本定义"></a>2.6Action的基本定义</h4><p>我们强调,不要再 Mutation中进行异步操作<br>口但是某些情况我们确实希望在vUex味进行些异步操作比如网络请求必<br>然是异步的这个时候怎么处理呢<br>口 Action类似于 Mutation,但是是用来代替 Mutation进行异步操作的</p>
<h4 id="2-7-认识Module"><a href="#2-7-认识Module" class="headerlink" title="2.7. 认识Module"></a>2.7. 认识Module</h4><p>Module是模块的意思,为什么在vuex中我们要使用模块呢?<br>口Vue使用单一状态树那么也意味着很多状态都会交给<br>Vuex来管理<br>口当应用变得非常复杂时, store对象就有可能变得相当臃<br>肿<br>口为了解决这个问题Vuex允许我们将 store分割成模块<br>( Module),而每个模块拥有自己的 Istate、 mutations<br>actions、 getters等<br>■我们按照什么样的方式来组织模块呢?<br>口我们来看左边的代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  state:&#123;&#125;,</span><br><span class="line">  mutations:&#123;&#125;,</span><br><span class="line">	actions:&#123;&#125;,</span><br><span class="line">	getters:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> moduleB = &#123;</span><br><span class="line">  state:&#123;&#125;,</span><br><span class="line">  mutations:&#123;&#125;,</span><br><span class="line">	actions:&#123;&#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store([</span><br><span class="line">	modules: &#123;</span><br><span class="line">  	a: moduleA,</span><br><span class="line">  	b: moduleB</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">store.state.a <span class="comment">//-&gt; moduleA 的状态</span></span><br><span class="line">store.state.b <span class="comment">//-&gt; moduleB 的状态</span></span><br></pre></td></tr></table></figure>

<p>ES6语法：(对象的解构)</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">Const obj=&#123;</span><br><span class="line">	name: <span class="string">&#x27;why&#x27;</span></span><br><span class="line">	age: <span class="number">18</span>,</span><br><span class="line">	height: <span class="number">1.88</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"><span class="comment">// const name = obj.name;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123;name, age, height&#125; = obj;</span><br><span class="line"><span class="built_in">console</span>.log(name);</span><br></pre></td></tr></table></figure>

<p>Actions的写法<br>■ actions的写法呢?接收一个 context参数对象<br>口局部状态通过 context.state暴露出来,根节点状态则为 context.rootState. </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">actions: &#123;</span><br><span class="line">  incrementIfoddOnRootSum (&#123; state, commit, rootState &#125;)&#123;</span><br><span class="line">    <span class="keyword">if</span> ((state.count + rootState.count)% <span class="number">2</span> === <span class="number">1</span>) &#123;</span><br><span class="line">      commit(<span class="string">&#x27;increment&#x27;</span>)</span><br><span class="line">    	&#125;</span><br><span class="line">  	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>■如果 getters中也需要使用全局的状态,可以接受更多的参数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> moduleA = &#123;</span><br><span class="line">  getters: &#123;</span><br><span class="line">    sumwithRootCount (state, getters, rootState) &#123;</span><br><span class="line">      <span class="keyword">return</span> state. count root state. coun</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="三、网络请求封装"><a href="#三、网络请求封装" class="headerlink" title="三、网络请求封装"></a>三、网络请求封装</h3><h4 id="3-1-选择什么网络模块"><a href="#3-1-选择什么网络模块" class="headerlink" title="3.1. 选择什么网络模块"></a>3.1. 选择什么网络模块</h4><p>主要内容<br>■常见的网络请求模块,以及优缺点对比<br>JSONP的原理和封装<br>口 JSONP原理回顾<br>口 JSONP请求封装<br>■ axIos的内容详解<br>口认识 axIos网络模块<br>口发送基本请求<br>口 axIos创建实例<br>口 axIos拦截器的使用</p>
<p>选择什么网络模块？<br>vue中发送网络请求有非常多的方式那么在开发中如何选择呢？<br>选择一: 传统的Ajax是基于 XmlHttpreqUesT(xhr)<br>为什么不用它呢?</p>
<ul>
<li>非常好解释,配置和调用方式等非常混乱</li>
<li>编码起来看起来就非常蛋疼</li>
<li>所以真实开发中很少直接使用,而是使用 Query-Ajax</li>
</ul>
<p>■选择二:在前面的学习中,我们经常会使用 jQuery-Ajax</p>
<ul>
<li><p>相对于传统的Aax非常好用</p>
<p>■为什么不选择它呢?</p>
<ul>
<li>首先,我们先明确一点:在vue的整个开发中都是不需要<br>使用 jQuery了</li>
<li>那么,就意味着为了方便我们进行一个网络请求,特意引<br>用一个 jQuery你觉得合理吗?</li>
<li>jQuery的代码1w+行</li>
<li>vue的代码才1W+行</li>
<li>完全没有必要为了用网络请求就引用这个重量级的框架</li>
</ul>
</li>
</ul>
<p>选择三:官方在vue1.x的时候推出了vue- resource</p>
<ul>
<li>vue- resource的体积相对于 jQuery小很多</li>
<li>另外vue- resource是官方推出的.<br>为什么不选择它呢?<ul>
<li>在vue20退出后,ue作者就在 GitHubl的 ISsues中说明<br>了去掉vue- resource,并且以后也不会再更新</li>
<li>那么意味着以后vue- reource不再支持新的版本时,也不<br>会再继续更新和维护</li>
<li>对以后的项目开发和维护都存在很大的隐患</li>
</ul>
</li>
</ul>
<p>■选择四:在说明不再继续更新和维护vue- resource的同时,作者<br>还推荐了一个框架: axIos</p>
<ul>
<li>axIos有非常多的优点并且用起来也非常方便</li>
</ul>
<h4 id="3-2jsonp"><a href="#3-2jsonp" class="headerlink" title="3.2jsonp"></a>3.2jsonp</h4><p>在前端开发中,我们种常见的网络请求方式就是丿SONP<br>口使用 JSONP最主要的原因往往是为了解决跨域访问的问题.<br>JSONPI的原理是什么呢?<br>口 JSONP的核心在于通过&lt; script&gt;标签的src来帮助我们请求数据.<br>口原因是我们的项目部署在 domain1com服务器上时,是不能直接访<br>问 domain2com服务器上的资料的<br>口这个时候我们利用&lt; script&gt;标签的src帮助我们去服务器请求到数<br>据将数据当做个 javascript的函数来执行并且执行的过程中传<br>入我们需要的json<br>口所以封装 ason的核心就在于我们监听 window上的 Jsonp进行回<br>调时的名称</p>
<p>3.3. 为什么选择axios</p>
<p>■功能特点<br>口在浏览器中发送 XmlhTtpreqUesTs请求<br>口在nodejs中发送http请求<br>口支持 Promise APi<br>口拦截请求和响应<br>口转换请求和响应数据<br>口等等</p>
<p>补充: axios名称的由来?个人理解<br>没有具体的翻译.<br>aXIOs: ajax l/onSystem</p>
<p>axios请求方式<br>■支持多种请求方式</p>
<ul>
<li>axIos( config)</li>
<li>axios request(config)</li>
<li>axiosget(url, config])</li>
<li>axios delete(url config])</li>
<li>axios head(url config)</li>
<li>axios post(url[ dataL config])</li>
<li>axios put(urIL dataL, config])</li>
<li>axios patch(url[, dataL, config])</li>
</ul>
<h4 id="3-3-axios框架的基本使用"><a href="#3-3-axios框架的基本使用" class="headerlink" title="3.3. axios框架的基本使用"></a>3.3. axios框架的基本使用</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">npm install axios --save</span><br><span class="line"></span><br><span class="line">main.js</span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"><span class="comment">// axios(config)</span></span><br><span class="line"><span class="comment">// config是一个对象类型</span></span><br><span class="line">axios (&#123;</span><br><span class="line">  <span class="comment">//url: &#x27;httpbin.org/&#x27; 这个可以用来测试</span></span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,</span><br><span class="line">  methods: <span class="string">&#x27;get&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios (&#123;</span></span><br><span class="line"><span class="comment">  //url: &#x27;httpbin.org/&#x27; 这个可以用来测试</span></span><br><span class="line"><span class="comment">  url: &#x27;http://123.207.32.32:8000/home/data?type=sell&amp;page=3&#x27;,</span></span><br><span class="line"><span class="comment">&#125;).then(res =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(res);</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line">axios (&#123;</span><br><span class="line">  <span class="comment">//url: &#x27;httpbin.org/&#x27; 这个可以用来测试</span></span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  <span class="comment">// 专门针对get请求的参数拼接</span></span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>3.4. axios发送并发请求</p>
<ul>
<li>axios.all，可以放入多个请求的数组</li>
<li>axios.all([])返回的结果是一个数组，使用axios.spread可将数组[res1,res2]展开为res1,res2</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 2. axios发送并发请求</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">axios.all([axios(&#123;</span></span><br><span class="line"><span class="comment">  url: &#x27;http://123.207.32.32:8000/home/multidata&#x27;,</span></span><br><span class="line"><span class="comment">&#125;), axios(&#123;</span></span><br><span class="line"><span class="comment">  url: &#x27;http://123.207.32.32:8000/home/data&#x27;,</span></span><br><span class="line"><span class="comment">  params: &#123;</span></span><br><span class="line"><span class="comment">    type: &#x27;sell&#x27;,</span></span><br><span class="line"><span class="comment">    page: 5</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">&#125;)]).then(results =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(results);</span></span><br><span class="line"><span class="comment">  console.log(results[0]);</span></span><br><span class="line"><span class="comment">  console.log(results[1]);</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/multidata&#x27;</span>,</span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;http://123.207.32.32:8000/home/data&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">    page: <span class="number">5</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).then(axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1);</span><br><span class="line">  <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>3.4. 全局配置</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.defaults.baseURL = <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span></span><br><span class="line">axios.defaults.timeout = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">axios.all([axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span>,</span><br><span class="line">&#125;), axios(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;sell&#x27;</span>,</span><br><span class="line">    page: <span class="number">5000</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)]).then(axios.spread(<span class="function">(<span class="params">res1, res2</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1);</span><br><span class="line">  <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<h4 id="3-4-常见配置选项"><a href="#3-4-常见配置选项" class="headerlink" title="3.4. 常见配置选项"></a>3.4. 常见配置选项</h4><p><img src="/2021/04/23/vueDay5/axios%E5%B8%B8%E8%A7%81%E9%85%8D%E7%BD%AE%E9%80%89%E9%A1%B9.jpg"></p>
<h4 id="3-5-创建对应的axios实例"><a href="#3-5-创建对应的axios实例" class="headerlink" title="3.5. 创建对应的axios实例"></a>3.5. 创建对应的axios实例</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 4. 创建对应的axios实例</span></span><br><span class="line"><span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">  baseUrl: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">5000</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">instance1(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/data&#x27;</span>,</span><br><span class="line">  params: &#123;</span><br><span class="line">    type: <span class="string">&#x27;pop&#x27;</span>,</span><br><span class="line">    page: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> instence2 = axios.create(&#123;</span><br><span class="line">  baseURL: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">  timeout: <span class="number">10000</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="3-6-封装request模块"><a href="#3-6-封装request模块" class="headerlink" title="3.6. 封装request模块"></a>3.6. 封装request模块</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 5. 封装request模块</span></span><br><span class="line"><span class="keyword">import</span> &#123;request&#125; <span class="keyword">from</span> <span class="string">&quot;./network/request&quot;</span>;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">request(&#123;</span></span><br><span class="line"><span class="comment">  url: &#x27;/home/multidata&#x27;</span></span><br><span class="line"><span class="comment">&#125;, res =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(res);</span></span><br><span class="line"><span class="comment">&#125;, err =&gt; &#123;</span></span><br><span class="line"><span class="comment">  console.log(err);</span></span><br><span class="line"><span class="comment">&#125;)*/</span></span><br><span class="line"></span><br><span class="line">request(&#123;</span><br><span class="line">  url: <span class="string">&#x27;/home/multidata&#x27;</span></span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



<p>network -&gt; request.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import axios from &#39;axios&#39;</span><br><span class="line">export function request(config) &#123;</span><br><span class="line">  &#x2F;&#x2F; 1. 创建axios实例</span><br><span class="line">  const instance &#x3D; axios.create(&#123;</span><br><span class="line">    baseUrl: &#39;http:&#x2F;&#x2F;123.207.32.32:8000&#39;,</span><br><span class="line">    timeout: 5000</span><br><span class="line">  &#125;)</span><br><span class="line">  &#x2F;&#x2F; 2. 发送真正的网络请求</span><br><span class="line">  return instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="3-7-axios的拦截器"><a href="#3-7-axios的拦截器" class="headerlink" title="3.7. axios的拦截器"></a>3.7. axios的拦截器</h4><ul>
<li>请求拦截的作用</li>
<li>响应拦截</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">request</span>(<span class="params">config</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 1. 创建axios实例</span></span><br><span class="line">  <span class="keyword">const</span> instance = axios.create(&#123;</span><br><span class="line">    baseUrl: <span class="string">&#x27;http://123.207.32.32:8000&#x27;</span>,</span><br><span class="line">    timeout: <span class="number">5000</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2. axios的拦截器</span></span><br><span class="line">  instance.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(config);</span></span><br><span class="line">    <span class="comment">// 2.1 请求拦截的作用</span></span><br><span class="line">    <span class="comment">// 1.比如config中的一些信息不符合服务器要求</span></span><br><span class="line">    <span class="comment">// 2.比如每次发送网络请求时，都希望在界面中显示一个请求的图标 show</span></span><br><span class="line">    <span class="comment">// 3.某些网络请求（比如登陆（token）），必须携带一些特殊信息</span></span><br><span class="line">    <span class="keyword">return</span> config</span><br><span class="line">  &#125;, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(err);</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 2.2 响应拦截</span></span><br><span class="line">  instance.interceptors.response.use(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// console.log(res);</span></span><br><span class="line">    <span class="keyword">return</span> res.data</span><br><span class="line">  &#125;), <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(err);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 3. 发送真正的网络请求</span></span><br><span class="line">  <span class="keyword">return</span> instance(config)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="四、项目开发"><a href="#四、项目开发" class="headerlink" title="四、项目开发"></a>四、项目开发</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">git branch -M main</span><br><span class="line">git remote add origin git@github.com:yzhou15/supermall.git</span><br><span class="line">git push -u origin main</span><br></pre></td></tr></table></figure>

<h4 id="4-1-划分目录结构"><a href="#4-1-划分目录结构" class="headerlink" title="4.1. 划分目录结构"></a>4.1. 划分目录结构</h4><h4 id="4-2-引入CSS文件"><a href="#4-2-引入CSS文件" class="headerlink" title="4.2. 引入CSS文件"></a>4.2. 引入CSS文件</h4><p>：root 伪类 获取根元素html</p>
<h4 id="4-3-vue-config-js-和-editorconfig"><a href="#4-3-vue-config-js-和-editorconfig" class="headerlink" title="4.3. vue.config.js 和 editorconfig"></a>4.3. vue.config.js 和 editorconfig</h4><p>别名配置vue.config.js</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    resolve: &#123;</span><br><span class="line">      alias: &#123;</span><br><span class="line">        <span class="string">&#x27;assets&#x27;</span>: <span class="string">&#x27;@/assets&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;common&#x27;</span>: <span class="string">&#x27;@/common&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;components&#x27;</span>: <span class="string">&#x27;@/components&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;network&#x27;</span>: <span class="string">&#x27;@/network&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;views&#x27;</span>: <span class="string">&#x27;@/views&#x27;</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h4 id="4-4-项目的横向划分：tabbar-gt-路由的映射关系"><a href="#4-4-项目的横向划分：tabbar-gt-路由的映射关系" class="headerlink" title="4.4. 项目的横向划分：tabbar -&gt; 路由的映射关系"></a>4.4. 项目的横向划分：tabbar -&gt; 路由的映射关系</h4><p>以前网页服务端渲染用jsp</p>
<h4 id="4-5-navbar"><a href="#4-5-navbar" class="headerlink" title="4.5. navbar"></a>4.5. navbar</h4><ol start="6">
<li><h4 id="轮播图"><a href="#轮播图" class="headerlink" title="轮播图"></a>轮播图</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 函数调用-&gt; 压入函数栈（保存函数调用过程中的所有变量）</span></span><br><span class="line"><span class="comment">// 函数调用结束 -&gt; 弹出函数栈（释放函数所有的变量）</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">text</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> names = [<span class="string">&#x27;why&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test()</span><br></pre></td></tr></table></figure>

<p>垃圾回收</p>
<p><img src="/2021/04/23/vueDay5/%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6.jpg"></p>
<p>vueui库：mint-ui/iview</p>
<p><img src="/2021/04/23/vueDay5/goods%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B.jpg"></p>
</li>
</ol>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kity@2.0.4/dist/kity.min.js"></script><script type="text/javascript" src="https://cdn.jsdelivr.net/npm/kityminder-core@1.4.50/dist/kityminder.core.min.js"></script><script defer="true" type="text/javascript" src="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.js"></script><link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/hexo-simple-mindmap@0.2.0/dist/mindmap.min.css">]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
